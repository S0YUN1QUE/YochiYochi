import { Pose, Options, WeightOption } from '../types';
export declare function vectorizeAndNormalize(pose: Pose, options: Options): number[][];
/**
 * Covert the pose to a set of vectors
 *
 * @param pose The pose object to be converted.
 * @param weightOption The options to manipulate pose scores
 *
 * @return An array of vectors which stand for
 * [0] = The vector of pose keypoints x, y.
 *          [x1, y1, x2, y2, ... , x17, y17]
 * [1] = The values to translate and scale pose keypoints x, y vector.
 *          [translateX, translateY, scaler]
 * [2] = The scores of pose keypoints and the sum of them
 *          [score1, score2, ..., score17, sumOfScores]
 *          Will be used for the weightedDistance strategy
 */
export declare function convertPoseToVectors(pose: Pose, weightOption?: WeightOption): number[][];
/**
 * Scale and translate a pose to size 1*1
 *
 * @param vectorPoseXY The vector of pose keypoints x, y
 *        [x1, y1, x2, y2, ... , x17, y17]
 * @param transformValues The values to translate and scale pose keypoints x, y vector
 *        [translateX, translateY, scaler]
 *
 * @return An scaled and translated pose keypoints x, y vector in size 1*1
 *          [x1, y1, x2, y2, ... , x17, y17]
 */
export declare function scaleAndTranslate(vectorPoseXY: number[], transformValues: number[]): number[];
/**
 * L2 nomalize a pose
 *
 * @param vectorPoseXY The vector of pose keypoints x, y
 *        [x1, y1, x2, y2, ... , x17, y17]
 *
 * @return An L2 normalized pose keypoints x, y vector in size 1*1
 *          [x1, y1, x2, y2, ... , x17, y17]
 */
export declare function L2Normalization(vectorPoseXY: number[]): number[];
