"use strict";
exports.__esModule = true;
exports.weightedDistanceMatching = exports.cosineDistanceMatching = exports.cosineSimilarity = void 0;
function cosineSimilarity(vectorPose1XY, vectorPose2XY) {
    var v1DotV2 = 0;
    var absV1 = 0;
    var absV2 = 0;
    vectorPose1XY.forEach(function (v1, index) {
        var v2 = vectorPose2XY[index];
        v1DotV2 += v1 * v2;
        absV1 += v1 * v1;
        absV2 += v2 * v2;
    });
    absV1 = Math.sqrt(absV1);
    absV2 = Math.sqrt(absV2);
    return v1DotV2 / (absV1 * absV2);
}
exports.cosineSimilarity = cosineSimilarity;
function cosineDistanceMatching(vectorPose1XY, vectorPose2XY) {
    var cosSimilarity = cosineSimilarity(vectorPose1XY, vectorPose2XY);
    return Math.sqrt(2 * (1 - cosSimilarity));
}
exports.cosineDistanceMatching = cosineDistanceMatching;
function weightedDistanceMatching(vectorPose1XY, vectorPose2XY, vectorConfidences) {
    var summation1 = 1 / vectorConfidences[vectorConfidences.length - 1];
    var summation2 = 0;
    for (var i = 0; i < vectorPose1XY.length; i++) {
        var confIndex = Math.floor(i / 2);
        summation2 += vectorConfidences[confIndex] * Math.abs(vectorPose1XY[i] - vectorPose2XY[i]);
    }
    return summation1 * summation2;
}
exports.weightedDistanceMatching = weightedDistanceMatching;
