{
  "version": 3,
  "sources": ["../../@tensorflow-models/pose-detection/dist/pose-detection.esm.js", "../../../../tfjs-converter/src/flags.ts", "../../../../tfjs-converter/src/data/compiled_api.ts", "../../../../tfjs-converter/src/operations/custom_op/register.ts", "../../../../tfjs-converter/src/operations/executors/utils.ts", "../../../../tfjs-converter/src/operations/op_list/arithmetic.ts", "../../../../tfjs-converter/src/operations/op_list/basic_math.ts", "../../../../tfjs-converter/src/operations/op_list/control.ts", "../../../../tfjs-converter/src/operations/op_list/convolution.ts", "../../../../tfjs-converter/src/operations/op_list/creation.ts", "../../../../tfjs-converter/src/operations/op_list/dynamic.ts", "../../../../tfjs-converter/src/operations/op_list/evaluation.ts", "../../../../tfjs-converter/src/operations/op_list/graph.ts", "../../../../tfjs-converter/src/operations/op_list/hash_table.ts", "../../../../tfjs-converter/src/operations/op_list/image.ts", "../../../../tfjs-converter/src/operations/op_list/logical.ts", "../../../../tfjs-converter/src/operations/op_list/matrices.ts", "../../../../tfjs-converter/src/operations/op_list/normalization.ts", "../../../../tfjs-converter/src/operations/op_list/reduction.ts", "../../../../tfjs-converter/src/operations/op_list/slice_join.ts", "../../../../tfjs-converter/src/operations/op_list/sparse.ts", "../../../../tfjs-converter/src/operations/op_list/spectral.ts", "../../../../tfjs-converter/src/operations/op_list/string.ts", "../../../../tfjs-converter/src/operations/op_list/transformation.ts", "../../../../tfjs-converter/src/operations/operation_mapper.ts", "../../../../tfjs-converter/src/operations/custom_op/node_value_impl.ts", "../../../../tfjs-core/src/ops/ops_for_converter.ts", "../../../../tfjs-converter/src/operations/executors/arithmetic_executor.ts", "../../../../tfjs-converter/src/operations/executors/basic_math_executor.ts", "../../../../tfjs-converter/src/executor/tensor_utils.ts", "../../../../tfjs-converter/src/executor/tensor_array.ts", "../../../../tfjs-converter/src/executor/tensor_list.ts", "../../../../tfjs-converter/src/operations/executors/control_executor.ts", "../../../../tfjs-converter/src/operations/executors/convolution_executor.ts", "../../../../tfjs-converter/src/operations/executors/creation_executor.ts", "../../../../tfjs-converter/src/operations/executors/dynamic_executor.ts", "../../../../tfjs-converter/src/operations/executors/evaluation_executor.ts", "../../../../tfjs-converter/src/operations/executors/graph_executor.ts", "../../../../tfjs-converter/src/executor/hash_table.ts", "../../../../tfjs-converter/src/operations/executors/hash_table_executor.ts", "../../../../tfjs-converter/src/operations/executors/image_executor.ts", "../../../../tfjs-converter/src/operations/executors/logical_executor.ts", "../../../../tfjs-converter/src/operations/executors/matrices_executor.ts", "../../../../tfjs-converter/src/operations/executors/normalization_executor.ts", "../../../../tfjs-converter/src/operations/executors/ragged_executor.ts", "../../../../tfjs-converter/src/operations/executors/reduction_executor.ts", "../../../../tfjs-converter/src/operations/executors/slice_join_executor.ts", "../../../../tfjs-converter/src/operations/executors/sparse_executor.ts", "../../../../tfjs-converter/src/operations/executors/spectral_executor.ts", "../../../../tfjs-converter/src/operations/executors/string_executor.ts", "../../../../tfjs-converter/src/operations/executors/transformation_executor.ts", "../../../../tfjs-converter/src/operations/operation_executor.ts", "../../../../tfjs-converter/src/executor/execution_context.ts", "../../../../tfjs-converter/src/executor/model_analysis.ts", "../../../../tfjs-converter/src/executor/graph_executor.ts", "../../../../tfjs-converter/src/executor/resource_manager.ts", "../../../../tfjs-converter/src/executor/graph_model.ts"],
  "sourcesContent": ["/**\n    * @license\n    * Copyright 2022 Google LLC. All Rights Reserved.\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    * http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    * =============================================================================\n    */\nimport{Pose as t}from\"@mediapipe/pose\";import{Tensor as e,browser as i,util as n,tidy as r,add as o,mul as a,tensor2d as s,image as l,expandDims as u,cast as h,slice as c,squeeze as p,dispose as f,tensor1d as d,getBackend as m,engine as g,sub as y,square as v,minimum as x,backend as w,div as k,exp as b,concat as M,reshape as S,clipByValue as T,sigmoid as P,pad as F,mirrorPad as _,env as O,zeros as A,scalar as I,argMax as C}from\"@tensorflow/tfjs-core\";import{loadGraphModel as R}from\"@tensorflow/tfjs-converter\";var E=function(t,e){return(E=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)};function z(t,e){function i(){this.constructor=t}E(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}var V=function(){return(V=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var r in e=arguments[i])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}).apply(this,arguments)};function L(t,e,i,n){return new(i||(i=Promise))((function(r,o){function a(t){try{l(n.next(t))}catch(t){o(t)}}function s(t){try{l(n.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?r(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(a,s)}l((n=n.apply(t,e||[])).next())}))}function B(t,e){var i,n,r,o,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(i)throw new TypeError(\"Generator is already executing.\");for(;a;)try{if(i=1,n&&(r=2&o[0]?n.return:o[0]?n.throw||((r=n.return)&&r.call(n),0):n.next)&&!(r=r.call(n,o[1])).done)return r;switch(n=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(r=a.trys,(r=r.length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){a.label=o[1];break}if(6===o[0]&&a.label<r[1]){a.label=r[1],r=o;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(o);break}r[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],n=0}finally{i=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function N(){for(var t=0,e=0,i=arguments.length;e<i;e++)t+=arguments[e].length;var n=Array(t),r=0;for(e=0;e<i;e++)for(var o=arguments[e],a=0,s=o.length;a<s;a++,r++)n[r]=o[a];return n}var D=[\"nose\",\"left_eye\",\"right_eye\",\"left_ear\",\"right_ear\",\"left_shoulder\",\"right_shoulder\",\"left_elbow\",\"right_elbow\",\"left_wrist\",\"right_wrist\",\"left_hip\",\"right_hip\",\"left_knee\",\"right_knee\",\"left_ankle\",\"right_ankle\"],K=[\"nose\",\"left_eye_inner\",\"left_eye\",\"left_eye_outer\",\"right_eye_inner\",\"right_eye\",\"right_eye_outer\",\"left_ear\",\"right_ear\",\"mouth_left\",\"mouth_right\",\"left_shoulder\",\"right_shoulder\",\"left_elbow\",\"right_elbow\",\"left_wrist\",\"right_wrist\",\"left_pinky\",\"right_pinky\",\"left_index\",\"right_index\",\"left_thumb\",\"right_thumb\",\"left_hip\",\"right_hip\",\"left_knee\",\"right_knee\",\"left_ankle\",\"right_ankle\",\"left_heel\",\"right_heel\",\"left_foot_index\",\"right_foot_index\"],j={left:[1,2,3,7,9,11,13,15,17,19,21,23,25,27,29,31],right:[4,5,6,8,10,12,14,16,18,20,22,24,26,28,30,32],middle:[0]},H={left:[1,3,5,7,9,11,13,15],right:[2,4,6,8,10,12,14,16],middle:[0]},q=[[0,1],[0,2],[1,3],[2,4],[5,6],[5,7],[5,11],[6,8],[6,12],[7,9],[8,10],[11,12],[11,13],[12,14],[13,15],[14,16]],U=[[0,1],[0,4],[1,2],[2,3],[3,7],[4,5],[5,6],[6,8],[9,10],[11,12],[11,13],[11,23],[12,14],[14,16],[12,24],[13,15],[15,17],[16,18],[16,20],[15,17],[15,19],[15,21],[16,22],[17,19],[18,20],[23,25],[23,24],[24,26],[25,27],[26,28],[27,29],[28,30],[27,31],[28,32],[29,31],[30,32]];function X(t){return t instanceof SVGAnimatedLength?t.baseVal.value:t}function W(t){return L(this,void 0,void 0,(function(){var n,r;return B(this,(function(o){switch(o.label){case 0:return n=document.createElement(\"canvas\"),t instanceof e?[4,i.toPixels(t,n)]:[3,2];case 1:return o.sent(),[3,3];case 2:n.width=X(t.width),n.height=X(t.height),r=n.getContext(\"2d\"),t instanceof ImageData?r.putImageData(t,0,0):r.drawImage(t,0,0),o.label=3;case 3:return[2,n]}}))}))}function Y(t){return L(this,void 0,void 0,(function(){var n,r,o,a,s,l;return B(this,(function(u){switch(u.label){case 0:return t instanceof e?(n=t.shape.slice(0,2),r=n[0],o=n[1],a=ImageData.bind,[4,i.toPixels(t)]):[3,2];case 1:return[2,new(a.apply(ImageData,[void 0,u.sent(),o,r]))];case 2:return s=document.createElement(\"canvas\"),l=s.getContext(\"2d\"),s.width=X(t.width),s.height=X(t.height),l.drawImage(t,0,0),[2,l.getImageData(0,0,s.width,s.height)]}}))}))}function G(t){return L(this,void 0,void 0,(function(){var e,n;return B(this,(function(r){switch(r.label){case 0:return t instanceof SVGImageElement||t instanceof OffscreenCanvas?[4,W(t)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n=t,r.label=3;case 3:return e=n,[2,i.fromPixels(e,4)]}}))}))}function Q(t){if(t<0||t>=256)throw new Error(\"Mask value must be in range [0, 255] but got \"+t);if(!Number.isInteger(t))throw new Error(\"Mask value must be an integer but got \"+t)}var Z={runtime:\"mediapipe\",enableSmoothing:!0,enableSegmentation:!1,smoothSegmentation:!0,modelType:\"full\"};var $=function(){function t(t){this.mask=t}return t.prototype.toCanvasImageSource=function(){return L(this,void 0,void 0,(function(){return B(this,(function(t){return[2,this.mask]}))}))},t.prototype.toImageData=function(){return L(this,void 0,void 0,(function(){return B(this,(function(t){return[2,Y(this.mask)]}))}))},t.prototype.toTensor=function(){return L(this,void 0,void 0,(function(){return B(this,(function(t){return[2,G(this.mask)]}))}))},t.prototype.getUnderlyingType=function(){return\"canvasimagesource\"},t}();function J(t){return Q(t),\"person\"}var tt=function(){function n(e){var i,n=this;switch(this.width=0,this.height=0,this.selfieMode=!1,this.poseSolution=new t({locateFile:function(t,i){return e.solutionPath?e.solutionPath.replace(/\\/+$/,\"\")+\"/\"+t:i+\"/\"+t}}),e.modelType){case\"lite\":i=0;break;case\"heavy\":i=2;break;case\"full\":default:i=1}this.poseSolution.setOptions({modelComplexity:i,smoothLandmarks:e.enableSmoothing,enableSegmentation:e.enableSegmentation,smoothSegmentation:e.smoothSegmentation,selfieMode:this.selfieMode}),this.poseSolution.onResults((function(t){if(n.height=t.image.height,n.width=t.image.width,null==t.poseLandmarks)n.poses=[];else{var e=n.translateOutput(t.poseLandmarks,t.poseWorldLandmarks);t.segmentationMask&&(e.segmentation={maskValueToLabel:J,mask:new $(t.segmentationMask)}),n.poses=[e]}}))}return n.prototype.translateOutput=function(t,e){var i=this,n={keypoints:t.map((function(t,e){return{x:t.x*i.width,y:t.y*i.height,z:t.z,score:t.visibility,name:K[e]}}))};return null!=e&&(n.keypoints3D=e.map((function(t,e){return{x:t.x,y:t.y,z:t.z,score:t.visibility,name:K[e]}}))),n},n.prototype.estimatePoses=function(t,n,r){return L(this,void 0,void 0,(function(){var o,a;return B(this,(function(s){switch(s.label){case 0:return n&&n.flipHorizontal&&n.flipHorizontal!==this.selfieMode&&(this.selfieMode=n.flipHorizontal,this.poseSolution.setOptions({selfieMode:this.selfieMode})),t instanceof e?(a=ImageData.bind,[4,i.toPixels(t)]):[3,2];case 1:return o=new(a.apply(ImageData,[void 0,s.sent(),t.shape[1],t.shape[0]])),[3,3];case 2:o=t,s.label=3;case 3:return t=o,[4,this.poseSolution.send({image:t},r)];case 4:return s.sent(),[2,this.poses]}}))}))},n.prototype.dispose=function(){this.poseSolution.close()},n.prototype.reset=function(){this.poseSolution.reset()},n.prototype.initialize=function(){return this.poseSolution.initialize()},n}();function et(t){return L(this,void 0,void 0,(function(){var e,i;return B(this,(function(n){switch(n.label){case 0:return e=function(t){if(null==t)return V({},Z);var e=V({},t);return e.runtime=\"mediapipe\",null==e.enableSegmentation&&(e.enableSegmentation=Z.enableSegmentation),null==e.enableSmoothing&&(e.enableSmoothing=Z.enableSmoothing),null==e.smoothSegmentation&&(e.smoothSegmentation=Z.smoothSegmentation),null==e.modelType&&(e.modelType=Z.modelType),e}(t),[4,(i=new tt(e)).initialize()];case 1:return n.sent(),[2,i]}}))}))}function it(t){return t instanceof e?{height:t.shape[0],width:t.shape[1]}:{height:t.height,width:t.width}}function nt(t){return t-2*Math.PI*Math.floor((t+Math.PI)/(2*Math.PI))}function rt(t){return t instanceof e?t:i.fromPixels(t)}function ot(t,e,i){return at(i,\"inputResolution\"),[1/i.width*t[0][0]*e.width,1/i.height*t[0][1]*e.width,t[0][3]*e.width,1/i.width*t[1][0]*e.height,1/i.height*t[1][1]*e.height,t[1][3]*e.height,0,0]}function at(t,e){n.assert(0!==t.width,(function(){return e+\" width cannot be 0.\"})),n.assert(0!==t.height,(function(){return e+\" height cannot be 0.\"}))}function st(t,e,i){var n=i.rotationVectorStartKeypointIndex,r=i.rotationVectorEndKeypointIndex,o=t.locationData,a=o.relativeKeypoints[n].x*e.width,s=o.relativeKeypoints[n].y*e.height,l=o.relativeKeypoints[r].x*e.width,u=o.relativeKeypoints[r].y*e.height,h=2*Math.sqrt((l-a)*(l-a)+(u-s)*(u-s)),c=function(t,e,i){var n,r=t.locationData,o=i.rotationVectorStartKeypointIndex,a=i.rotationVectorEndKeypointIndex;n=i.rotationVectorTargetAngle?i.rotationVectorTargetAngle:Math.PI*i.rotationVectorTargetAngleDegree/180;var s=r.relativeKeypoints[o].x*e.width,l=r.relativeKeypoints[o].y*e.height,u=r.relativeKeypoints[a].x*e.width,h=r.relativeKeypoints[a].y*e.height;return nt(n-Math.atan2(-(h-l),u-s))}(t,e,i);return{xCenter:a/e.width,yCenter:s/e.height,width:h/e.width,height:h/e.height,rotation:c}}function lt(t){if(16!==t.length)throw new Error(\"Array length must be 16 but got \"+t.length);return[[t[0],t[1],t[2],t[3]],[t[4],t[5],t[6],t[7]],[t[8],t[9],t[10],t[11]],[t[12],t[13],t[14],t[15]]]}function ut(t,e,i,n,r,o,a){return t[e][r]*(t[i][o]*t[n][a]-t[i][a]*t[n][o])}function ht(t,e,i){var n=(e+1)%4,r=(e+2)%4,o=(e+3)%4,a=(i+1)%4,s=(i+2)%4,l=(i+3)%4;return ut(t,n,r,o,a,s,l)+ut(t,r,o,n,a,s,l)+ut(t,o,n,r,a,s,l)}function ct(t,e,i){void 0===i&&(i={ignoreRotation:!1});for(var n=[],r=0,o=t;r<o.length;r++){var a=o[r],s=a.x-.5,l=a.y-.5,u=i.ignoreRotation?0:e.rotation,h=Math.cos(u)*s-Math.sin(u)*l,c=Math.sin(u)*s+Math.cos(u)*l;h=h*e.width+e.xCenter,c=c*e.height+e.yCenter;var p=a.z*e.width,f=V({},a);f.x=h,f.y=c,f.z=p,n.push(f)}return n}function pt(t,e){var i=function(t,e,i,n){var r=e-t,o=n-i;if(0===r)throw new Error(\"Original min and max are both \"+t+\", range cannot be 0.\");var a=o/r;return{scale:a,offset:i-t*a}}(0,255,e[0],e[1]);return r((function(){return o(a(t,i.scale),i.offset)}))}function ft(t,e,i){var n,o,a,c,p,f,d,m,g,y,v,x,w,k,b=e.outputTensorSize,M=e.keepAspectRatio,S=e.borderMode,T=e.outputTensorFloatRange,P=it(t),F=function(t,e){return e?{xCenter:e.xCenter*t.width,yCenter:e.yCenter*t.height,width:e.width*t.width,height:e.height*t.height,rotation:e.rotation}:{xCenter:.5*t.width,yCenter:.5*t.height,width:t.width,height:t.height,rotation:0}}(P,i),_=function(t,e,i){if(void 0===i&&(i=!1),!i)return{top:0,left:0,right:0,bottom:0};var n=e.height,r=e.width;at(e,\"targetSize\"),at(t,\"roi\");var o,a,s=n/r,l=t.height/t.width,u=0,h=0;return s>l?(o=t.width,a=t.width*s,h=(1-l/s)/2):(o=t.height/s,a=t.height,u=(1-s/l)/2),t.width=o,t.height=a,{top:h,left:u,right:u,bottom:h}}(F,b,M),O=(n=F,o=P.width,a=P.height,c=!1,p=n.width,f=n.height,d=c?-1:1,m=Math.cos(n.rotation),g=Math.sin(n.rotation),y=n.xCenter,v=n.yCenter,x=1/o,w=1/a,(k=new Array(16))[0]=p*m*d*x,k[1]=-f*g*x,k[2]=0,k[3]=(-.5*p*m*d+.5*f*g+y)*x,k[4]=p*g*d*w,k[5]=f*m*w,k[6]=0,k[7]=(-.5*f*m-.5*p*g*d+v)*w,k[8]=0,k[9]=0,k[10]=p*x,k[11]=0,k[12]=0,k[13]=0,k[14]=0,k[15]=1,lt(k));return{imageTensor:r((function(){var e=rt(t),i=s(ot(O,P,b),[1,8]),n=\"zero\"===S?\"constant\":\"nearest\",r=l.transform(u(h(e,\"float32\")),i,\"bilinear\",n,0,[b.height,b.width]);return null!=T?pt(r,T):r})),padding:_,transformationMatrix:O}}function dt(t,e,i,n){return 1===n?.5*(t+e):t+(e-t)*i/(n-1)}function mt(t){return r((function(){var e=function(t){return r((function(){return[c(t,[0,0,0],[1,-1,1]),c(t,[0,0,1],[1,-1,-1])]}))}(t),i=e[0],n=e[1];return{boxes:p(n),logits:p(i)}}))}function gt(t){return null!=t&&null!=t.currentTime}function yt(t){for(var e={locationData:{relativeKeypoints:[]}},i=Number.MAX_SAFE_INTEGER,n=Number.MIN_SAFE_INTEGER,r=Number.MAX_SAFE_INTEGER,o=Number.MIN_SAFE_INTEGER,a=0;a<t.length;++a){var s=t[a];i=Math.min(i,s.x),n=Math.max(n,s.x),r=Math.min(r,s.y),o=Math.max(o,s.y),e.locationData.relativeKeypoints.push({x:s.x,y:s.y})}return e.locationData.relativeBoundingBox={xMin:i,yMin:r,xMax:n,yMax:o,width:n-i,height:o-r},e}function vt(t,e,i,n){return L(this,void 0,void 0,(function(){var n,r,o,a,u;return B(this,(function(h){switch(h.label){case 0:return t.sort((function(t,e){return Math.max.apply(Math,e.score)-Math.max.apply(Math,t.score)})),n=s(t.map((function(t){return[t.locationData.relativeBoundingBox.yMin,t.locationData.relativeBoundingBox.xMin,t.locationData.relativeBoundingBox.yMax,t.locationData.relativeBoundingBox.xMax]}))),r=d(t.map((function(t){return t.score[0]}))),[4,l.nonMaxSuppressionAsync(n,r,e,i)];case 1:return[4,(o=h.sent()).array()];case 2:return a=h.sent(),u=t.filter((function(t,e){return a.indexOf(e)>-1})),f([n,r,o]),[2,u]}}))}))}function xt(t,e){return t.map((function(t){var i=V(V({},t),{x:t.x*e.width,y:t.y*e.height});return null!=t.z&&(i.z=t.z*e.width),i}))}function wt(t,e,i){return L(this,void 0,void 0,(function(){var n,r,o,a,s,l,u,h,c,f,d,m,g,y,v,x,w,k,b,M,S,T,P,F;return B(this,(function(_){switch(_.label){case 0:if(n=p(e,[0]),r=n.shape,o=r[0],a=r[1],s=r[2],t.length!==s)throw new Error(\"Expected heatmap to have same number of channels as the number of landmarks. But got landmarks length: \"+t.length+\", heatmap length: \"+s);return l=[],[4,n.buffer()];case 1:for(u=_.sent(),h=0;h<t.length;h++)if(c=t[h],f=V({},c),l.push(f),d=Math.trunc(f.x*a),m=Math.trunc(f.y*o),!(d<0||d>=a||m<0||d>=o)){for(g=Math.trunc((i.kernelSize-1)/2),y=Math.max(0,d-g),v=Math.min(a,d+g+1),x=Math.max(0,m-g),w=Math.min(o,m+g+1),k=0,b=0,M=0,S=0,T=x;T<w;++T)for(P=y;P<v;++P)F=u.get(T,P,h),k+=F,S=Math.max(S,F),b+=P*F,M+=T*F;S>=i.minConfidenceToRefine&&k>0&&(f.x=b/a/k,f.y=M/o/k)}return n.dispose(),[2,l]}}))}))}function kt(t,e){var i=e.left,n=e.top,r=e.left+e.right,o=e.top+e.bottom;return t.map((function(t){return V(V({},t),{x:(t.x-i)/(1-r),y:(t.y-n)/(1-o),z:t.z/(1-r)})}))}function bt(t,e,i){return\"webgl\"===m()?function(t,e,i){var n=i.combineWithPreviousRatio.toFixed(2),o={variableNames:[\"prevMask\",\"newMask\"],outputShape:t.shape,userCode:\"\\n  void main() {\\n      ivec2 coords = getOutputCoords();\\n      int height = coords[0];\\n      int width = coords[1];\\n\\n      float prevMaskValue = getPrevMask(height, width);\\n      float newMaskValue = getNewMask(height, width);\\n\\n      /*\\n      * Assume p := newMaskValue\\n      * H(p) := 1 + (p * log(p) + (1-p) * log(1-p)) / log(2)\\n      * uncertainty alpha(p) =\\n      *   Clamp(1 - (1 - H(p)) * (1 - H(p)), 0, 1) [squaring the\\n      * uncertainty]\\n      *\\n      * The following polynomial approximates uncertainty alpha as a\\n      * function of (p + 0.5):\\n      */\\n      const float c1 = 5.68842;\\n      const float c2 = -0.748699;\\n      const float c3 = -57.8051;\\n      const float c4 = 291.309;\\n      const float c5 = -624.717;\\n      float t = newMaskValue - 0.5;\\n      float x = t * t;\\n\\n      float uncertainty =\\n        1.0 - min(1.0, x * (c1 + x * (c2 + x * (c3 + x * (c4 + x * c5)))));\\n\\n      float outputValue = newMaskValue + (prevMaskValue - newMaskValue) *\\n                             (uncertainty * \"+n+\");\\n\\n      setOutput(outputValue);\\n    }\\n\"},a=w();return r((function(){var i=a.compileAndRun(o,[t,e]);return g().makeTensorFromDataId(i.dataId,i.shape,i.dtype)}))}(t,e,i):r((function(){var n=y(e,.5),r=v(n),s=y(1,x(1,a(r,o(5.68842,a(r,o(-.748699,a(r,o(-57.8051,a(r,o(291.309,a(r,-624.717)))))))))));return o(e,a(y(t,e),a(s,i.combineWithPreviousRatio)))}))}function Mt(t,e,i){return L(this,void 0,void 0,(function(){var n,s,l,u,h;return B(this,(function(d){switch(d.label){case 0:return n=t[0],s=t[1],l=function(t,e,i){return r((function(){var n,r,s,l;i.reverseOutputOrder?(r=p(c(t,[0,i.boxCoordOffset+0],[-1,1])),n=p(c(t,[0,i.boxCoordOffset+1],[-1,1])),l=p(c(t,[0,i.boxCoordOffset+2],[-1,1])),s=p(c(t,[0,i.boxCoordOffset+3],[-1,1]))):(n=p(c(t,[0,i.boxCoordOffset+0],[-1,1])),r=p(c(t,[0,i.boxCoordOffset+1],[-1,1])),s=p(c(t,[0,i.boxCoordOffset+2],[-1,1])),l=p(c(t,[0,i.boxCoordOffset+3],[-1,1]))),r=o(a(k(r,i.xScale),e.w),e.x),n=o(a(k(n,i.yScale),e.h),e.y),i.applyExponentialOnBoxSize?(s=a(b(k(s,i.hScale)),e.h),l=a(b(k(l,i.wScale)),e.w)):(s=a(k(s,i.hScale),e.h),l=a(k(l,i.wScale),e.h));var u=y(n,k(s,2)),h=y(r,k(l,2)),f=o(n,k(s,2)),d=o(r,k(l,2)),m=M([S(u,[i.numBoxes,1]),S(h,[i.numBoxes,1]),S(f,[i.numBoxes,1]),S(d,[i.numBoxes,1])],1);if(i.numKeypoints)for(var g=0;g<i.numKeypoints;++g){var v=i.keypointCoordOffset+g*i.numValuesPerKeypoint,x=void 0,w=void 0;i.reverseOutputOrder?(x=p(c(t,[0,v],[-1,1])),w=p(c(t,[0,v+1],[-1,1]))):(w=p(c(t,[0,v],[-1,1])),x=p(c(t,[0,v+1],[-1,1])));var T=o(a(k(x,i.xScale),e.w),e.x),P=o(a(k(w,i.yScale),e.h),e.y);m=M([m,S(T,[i.numBoxes,1]),S(P,[i.numBoxes,1])],1)}return m}))}(s,e,i),u=r((function(){var t=n;return i.sigmoidScore?(null!=i.scoreClippingThresh&&(t=T(n,-i.scoreClippingThresh,i.scoreClippingThresh)),t=P(t)):t})),[4,St(l,u,i)];case 1:return h=d.sent(),f([l,u]),[2,h]}}))}))}function St(t,e,i){return L(this,void 0,void 0,(function(){var n,r,o,a,s,l,u,h,c,p,f,d;return B(this,(function(m){switch(m.label){case 0:return n=[],[4,t.data()];case 1:return r=m.sent(),[4,e.data()];case 2:for(o=m.sent(),a=0;a<i.numBoxes;++a)if(!(null!=i.minScoreThresh&&o[a]<i.minScoreThresh||(s=a*i.numCoords,l=Tt(r[s+0],r[s+1],r[s+2],r[s+3],o[a],i.flipVertically,a),(u=l.locationData.relativeBoundingBox).width<0||u.height<0))){if(i.numKeypoints>0)for((h=l.locationData).relativeKeypoints=[],c=i.numKeypoints*i.numValuesPerKeypoint,p=0;p<c;p+=i.numValuesPerKeypoint)f=s+i.keypointCoordOffset+p,d={x:r[f+0],y:i.flipVertically?1-r[f+1]:r[f+1]},h.relativeKeypoints.push(d);n.push(l)}return[2,n]}}))}))}function Tt(t,e,i,n,r,o,a){return{score:[r],ind:a,locationData:{relativeBoundingBox:{xMin:e,yMin:o?1-i:t,xMax:n,yMax:o?1-t:i,width:n-e,height:i-t}}}}function Pt(t,e){return\"none\"===t?e:function(t){return 1/(1+Math.exp(-t))}(e)}function Ft(t,e,i,n){return L(this,void 0,void 0,(function(){var r,o,a,s,l,u,h,c;return B(this,(function(p){switch(p.label){case 0:return i=i||e.flipHorizontally||!1,n=n||e.flipVertically||!1,r=t.size,o=r/e.numLandmarks,[4,t.data()];case 1:for(a=p.sent(),s=[],l=0;l<e.numLandmarks;++l)u=l*o,(c={x:0,y:0}).x=i?e.inputImageWidth-a[u]:a[u],o>1&&(c.y=n?e.inputImageHeight-a[u+1]:a[u+1]),o>2&&(c.z=a[u+2]),o>3&&(c.score=Pt(e.visibilityActivation,a[u+3])),s.push(c);for(h=0;h<s.length;++h)(c=s[h]).x=c.x/e.inputImageWidth,c.y=c.y/e.inputImageHeight,c.z=c.z/e.inputImageWidth/(e.normalizeZ||1);return[2,s]}}))}))}function _t(t,e,i){var n=t.width,r=t.height,o=t.rotation;if(null==i.rotation&&null==i.rotationDegree||(o=function(t,e){null!=e.rotation?t+=e.rotation:null!=e.rotationDegree&&(t+=Math.PI*e.rotationDegree/180);return nt(t)}(o,i)),0===o)t.xCenter=t.xCenter+n*i.shiftX,t.yCenter=t.yCenter+r*i.shiftY;else{var a=(e.width*n*i.shiftX*Math.cos(o)-e.height*r*i.shiftY*Math.sin(o))/e.width,s=(e.width*n*i.shiftX*Math.sin(o)+e.height*r*i.shiftY*Math.cos(o))/e.height;t.xCenter=t.xCenter+a,t.yCenter=t.yCenter+s}if(i.squareLong){var l=Math.max(n*e.width,r*e.height);n=l/e.width,r=l/e.height}else if(i.squareShort){var u=Math.min(n*e.width,r*e.height);n=u/e.width,r=u/e.height}return t.width=n*i.scaleX,t.height=r*i.scaleY,t}function Ot(t,e){return t.map((function(t){var i=V(V({},t),{x:t.x/e.width,y:t.y/e.height});return null!=t.z&&(t.z=t.z/e.width),i}))}var At=function(){function t(t){this.alpha=t,this.initialized=!1}return t.prototype.apply=function(t,e){var i;return this.initialized?i=null==e?this.storedValue+this.alpha*(t-this.storedValue):this.storedValue+this.alpha*e*Math.asinh((t-this.storedValue)/e):(i=t,this.initialized=!0),this.rawValue=t,this.storedValue=i,i},t.prototype.applyWithAlpha=function(t,e,i){return this.alpha=e,this.apply(t,i)},t.prototype.hasLastRawValue=function(){return this.initialized},t.prototype.lastRawValue=function(){return this.rawValue},t.prototype.reset=function(){this.initialized=!1},t}(),It=function(){function t(t){this.frequency=t.frequency,this.minCutOff=t.minCutOff,this.beta=t.beta,this.thresholdCutOff=t.thresholdCutOff,this.thresholdBeta=t.thresholdBeta,this.derivateCutOff=t.derivateCutOff,this.x=new At(this.getAlpha(this.minCutOff)),this.dx=new At(this.getAlpha(this.derivateCutOff)),this.lastTimestamp=0}return t.prototype.apply=function(t,e,i){if(null==t)return t;var n=Math.trunc(e);if(this.lastTimestamp>=n)return t;0!==this.lastTimestamp&&0!==n&&(this.frequency=1/(1e-6*(n-this.lastTimestamp))),this.lastTimestamp=n;var r=this.x.hasLastRawValue()?(t-this.x.lastRawValue())*i*this.frequency:0,o=this.dx.applyWithAlpha(r,this.getAlpha(this.derivateCutOff)),a=this.minCutOff+this.beta*Math.abs(o),s=null!=this.thresholdCutOff?this.thresholdCutOff+this.thresholdBeta*Math.abs(o):null;return this.x.applyWithAlpha(t,this.getAlpha(a),s)},t.prototype.getAlpha=function(t){return 1/(1+this.frequency/(2*Math.PI*t))},t}(),Ct=function(){function t(t){this.config=t}return t.prototype.apply=function(t,e,i){var n=this;if(null==t)return this.reset(),null;this.initializeFiltersIfEmpty(t);var r=1;if(!this.config.disableValueScaling){if(i<this.config.minAllowedObjectScale)return N(t);r=1/i}return t.map((function(t,i){var o=V(V({},t),{x:n.xFilters[i].apply(t.x,e,r),y:n.yFilters[i].apply(t.y,e,r)});return null!=t.z&&(o.z=n.zFilters[i].apply(t.z,e,r)),o}))},t.prototype.reset=function(){this.xFilters=null,this.yFilters=null,this.zFilters=null},t.prototype.initializeFiltersIfEmpty=function(t){var e=this;null!=this.xFilters&&this.xFilters.length===t.length||(this.xFilters=t.map((function(t){return new It(e.config)})),this.yFilters=t.map((function(t){return new It(e.config)})),this.zFilters=t.map((function(t){return new It(e.config)})))},t}(),Rt=function(){function t(t){this.config=t,this.window=[],this.lowPassFilter=new At(1),this.lastValue=0,this.lastValueScale=1,this.lastTimestamp=-1}return t.prototype.apply=function(t,e,i){if(null==t)return t;var n,r=Math.trunc(e);if(this.lastTimestamp>=r)return t;if(-1===this.lastTimestamp)n=1;else{for(var o=t*i-this.lastValue*this.lastValueScale,a=r-this.lastTimestamp,s=o,l=a,u=(1+this.window.length)*(1e6/30),h=0,c=this.window;h<c.length;h++){var p=c[h];if(l+p.duration>u)break;s+=p.distance,l+=p.duration}var f=s/(1e-6*l);n=1-1/(1+this.config.velocityScale*Math.abs(f)),this.window.unshift({distance:o,duration:a}),this.window.length>this.config.windowSize&&this.window.pop()}return this.lastValue=t,this.lastValueScale=i,this.lastTimestamp=r,this.lowPassFilter.applyWithAlpha(t,n)},t}(),Et=function(){function t(t){this.config=t}return t.prototype.apply=function(t,e,i){var n=this;if(null==t)return this.reset(),null;var r=1;if(!this.config.disableValueScaling){if(i<this.config.minAllowedObjectScale)return N(t);r=1/i}return this.initializeFiltersIfEmpty(t),t.map((function(t,i){var o=V(V({},t),{x:n.xFilters[i].apply(t.x,e,r),y:n.yFilters[i].apply(t.y,e,r)});return null!=t.z&&(o.z=n.zFilters[i].apply(t.z,e,r)),o}))},t.prototype.reset=function(){this.xFilters=null,this.yFilters=null,this.zFilters=null},t.prototype.initializeFiltersIfEmpty=function(t){var e=this;null!=this.xFilters&&this.xFilters.length===t.length||(this.xFilters=t.map((function(t){return new Rt(e.config)})),this.yFilters=t.map((function(t){return new Rt(e.config)})),this.zFilters=t.map((function(t){return new Rt(e.config)})))},t}(),zt=function(){function t(t){if(null!=t.velocityFilter)this.keypointsFilter=new Et(t.velocityFilter);else{if(null==t.oneEuroFilter)throw new Error(\"Either configure velocityFilter or oneEuroFilter, but got \"+t+\".\");this.keypointsFilter=new Ct(t.oneEuroFilter)}}return t.prototype.apply=function(t,e,i,n,r){if(void 0===n&&(n=!1),null==t)return this.keypointsFilter.reset(),null;var o=null!=r?function(t,e){return(t.width*e.width+t.height*e.height)/2}(r,i):1,a=n?xt(t,i):t,s=this.keypointsFilter.apply(a,e,o);return n?Ot(s,i):s},t}(),Vt=function(){function t(t){this.alpha=t.alpha}return t.prototype.apply=function(t){var e=this;if(null==t)return this.visibilityFilters=null,null;null!=this.visibilityFilters&&this.visibilityFilters.length===t.length||(this.visibilityFilters=t.map((function(t){return new At(e.alpha)})));for(var i=[],n=0;n<t.length;++n){var r=t[n],o=V({},r);o.score=this.visibilityFilters[n].apply(r.score),i.push(o)}return i},t}(),Lt={reduceBoxesInLowestlayer:!1,interpolatedScaleAspectRatio:1,featureMapHeight:[],featureMapWidth:[],numLayers:5,minScale:.1484375,maxScale:.75,inputSizeHeight:224,inputSizeWidth:224,anchorOffsetX:.5,anchorOffsetY:.5,strides:[8,16,32,32,32],aspectRatios:[1],fixedAnchorSize:!0},Bt={runtime:\"tfjs\",modelType:\"full\",enableSmoothing:!0,enableSegmentation:!1,smoothSegmentation:!0,detectorModelUrl:\"https://tfhub.dev/mediapipe/tfjs-model/blazepose_3d/detector/1\",landmarkModelUrl:\"https://tfhub.dev/mediapipe/tfjs-model/blazepose_3d/landmark/full/2\"},Nt={maxPoses:1,flipHorizontal:!1},Dt={applyExponentialOnBoxSize:!1,flipVertically:!1,ignoreClasses:[],numClasses:1,numBoxes:2254,numCoords:12,boxCoordOffset:0,keypointCoordOffset:4,numKeypoints:4,numValuesPerKeypoint:2,sigmoidScore:!0,scoreClippingThresh:100,reverseOutputOrder:!0,xScale:224,yScale:224,hScale:224,wScale:224,minScoreThresh:.5},Kt=.3,jt={shiftX:0,shiftY:0,scaleX:1.25,scaleY:1.25,squareLong:!0},Ht={outputTensorSize:{width:224,height:224},keepAspectRatio:!0,outputTensorFloatRange:[-1,1],borderMode:\"zero\"},qt={outputTensorSize:{width:256,height:256},keepAspectRatio:!0,outputTensorFloatRange:[0,1],borderMode:\"zero\"},Ut={numLandmarks:39,inputImageWidth:256,inputImageHeight:256,visibilityActivation:\"sigmoid\",flipHorizontally:!1,flipVertically:!1},Xt={numLandmarks:39,inputImageWidth:1,inputImageHeight:1,visibilityActivation:\"sigmoid\",flipHorizontally:!1,flipVertically:!1},Wt={kernelSize:7,minConfidenceToRefine:.5},Yt={alpha:.1},Gt={oneEuroFilter:{frequency:30,minCutOff:.05,beta:80,derivateCutOff:1,minAllowedObjectScale:1e-6}},Qt={oneEuroFilter:{frequency:30,minCutOff:.01,beta:10,derivateCutOff:1,minAllowedObjectScale:1e-6}},Zt={oneEuroFilter:{frequency:30,minCutOff:.1,beta:40,derivateCutOff:1,minAllowedObjectScale:1e-6,disableValueScaling:!0}},$t={activation:\"none\"},Jt={combineWithPreviousRatio:.7};var te=function(){function t(t){this.mask=t}return t.prototype.toCanvasImageSource=function(){return L(this,void 0,void 0,(function(){return B(this,(function(t){return[2,W(this.mask)]}))}))},t.prototype.toImageData=function(){return L(this,void 0,void 0,(function(){return B(this,(function(t){return[2,Y(this.mask)]}))}))},t.prototype.toTensor=function(){return L(this,void 0,void 0,(function(){return B(this,(function(t){return[2,this.mask]}))}))},t.prototype.getUnderlyingType=function(){return\"tensor\"},t}();function ee(t){return Q(t),\"person\"}var ie=function(){function t(t,e,i,n,r,o){this.detectorModel=t,this.landmarkModel=e,this.enableSmoothing=i,this.enableSegmentation=n,this.smoothSegmentation=r,this.modelType=o,this.regionOfInterest=null,this.prevFilteredSegmentationMask=null,this.anchors=function(t){null==t.reduceBoxesInLowestLayer&&(t.reduceBoxesInLowestLayer=!1),null==t.interpolatedScaleAspectRatio&&(t.interpolatedScaleAspectRatio=1),null==t.fixedAnchorSize&&(t.fixedAnchorSize=!1);for(var e=[],i=0;i<t.numLayers;){for(var n=[],r=[],o=[],a=[],s=i;s<t.strides.length&&t.strides[s]===t.strides[i];){var l=dt(t.minScale,t.maxScale,s,t.strides.length);if(0===s&&t.reduceBoxesInLowestLayer)o.push(1),o.push(2),o.push(.5),a.push(.1),a.push(l),a.push(l);else{for(var u=0;u<t.aspectRatios.length;++u)o.push(t.aspectRatios[u]),a.push(l);if(t.interpolatedScaleAspectRatio>0){var h=s===t.strides.length-1?1:dt(t.minScale,t.maxScale,s+1,t.strides.length);a.push(Math.sqrt(l*h)),o.push(t.interpolatedScaleAspectRatio)}}s++}for(var c=0;c<o.length;++c){var p=Math.sqrt(o[c]);n.push(a[c]/p),r.push(a[c]*p)}var f=0,d=0;if(t.featureMapHeight.length>0)f=t.featureMapHeight[i],d=t.featureMapWidth[i];else{var m=t.strides[i];f=Math.ceil(t.inputSizeHeight/m),d=Math.ceil(t.inputSizeWidth/m)}for(var g=0;g<f;++g)for(var y=0;y<d;++y)for(var v=0;v<n.length;++v){var x={xCenter:(y+t.anchorOffsetX)/d,yCenter:(g+t.anchorOffsetY)/f,width:0,height:0};t.fixedAnchorSize?(x.width=1,x.height=1):(x.width=r[v],x.height=n[v]),e.push(x)}i=s}return e}(Lt);var a=d(this.anchors.map((function(t){return t.width}))),l=d(this.anchors.map((function(t){return t.height}))),u=d(this.anchors.map((function(t){return t.xCenter}))),h=d(this.anchors.map((function(t){return t.yCenter})));this.anchorTensor={x:u,y:h,w:a,h:l},this.prevFilteredSegmentationMask=this.enableSegmentation?s([],[0,0]):null}return t.prototype.estimatePoses=function(t,e,i){return L(this,void 0,void 0,(function(){var n,o,a,s,l,c,p,d,m,g,y,v,x,w,k,b,M,S,T,P,O,A,I;return B(this,(function(C){switch(C.label){case 0:return n=function(t){var e;if(null==(e=null==t?Nt:V({},t)).maxPoses&&(e.maxPoses=1),e.maxPoses<=0)throw new Error(\"Invalid maxPoses \"+e.maxPoses+\". Should be > 0.\");if(e.maxPoses>1)throw new Error(\"Multi-pose detection is not implemented yet. Please set maxPoses to 1.\");return e}(e),null==t?(this.reset(),[2,[]]):(this.maxPoses=n.maxPoses,this.timestamp=null!=i?1e3*i:gt(t)?1e6*t.currentTime:null,o=it(t),a=r((function(){return h(rt(t),\"float32\")})),null!=(s=this.regionOfInterest)?[3,2]:[4,this.detectPose(a)]);case 1:if(0===(l=C.sent()).length)return this.reset(),a.dispose(),[2,[]];c=l[0],s=this.poseDetectionToRoi(c,o),C.label=2;case 2:return[4,this.poseLandmarksByRoi(s,a)];case 3:return p=C.sent(),a.dispose(),null==p?(this.reset(),[2,[]]):(d=p.landmarks,m=p.auxiliaryLandmarks,g=p.poseScore,y=p.worldLandmarks,v=p.segmentationMask,x=this.poseLandmarkFiltering(d,m,y,o),w=x.actualLandmarksFiltered,k=x.auxiliaryLandmarksFiltered,b=x.actualWorldLandmarksFiltered,M=this.poseLandmarksToRoi(k,o),this.regionOfInterest=M,S=this.smoothSegmentation&&null!=v?this.poseSegmentationFiltering(v):v,null!=(T=null!=w?xt(w,o):null)&&T.forEach((function(t,e){t.name=K[e]})),null!=(P=b)&&P.forEach((function(t,e){t.name=K[e]})),O={score:g,keypoints:T,keypoints3D:P},null!==S&&(A=r((function(){var t=u(S,2),e=F(t,[[0,0],[0,0],[0,1]]);return _(e,[[0,0],[0,0],[0,2]],\"symmetric\")})),this.smoothSegmentation||f(S),I={maskValueToLabel:ee,mask:new te(A)},O.segmentation=I),[2,[O]])}}))}))},t.prototype.poseSegmentationFiltering=function(t){var e=this.prevFilteredSegmentationMask;return 0===e.size?this.prevFilteredSegmentationMask=t:(this.prevFilteredSegmentationMask=bt(e,t,Jt),f(t)),f(e),this.prevFilteredSegmentationMask},t.prototype.dispose=function(){this.detectorModel.dispose(),this.landmarkModel.dispose(),f([this.anchorTensor.x,this.anchorTensor.y,this.anchorTensor.w,this.anchorTensor.h,this.prevFilteredSegmentationMask])},t.prototype.reset=function(){this.regionOfInterest=null,this.enableSegmentation&&(f(this.prevFilteredSegmentationMask),this.prevFilteredSegmentationMask=s([],[0,0])),this.visibilitySmoothingFilterActual=null,this.visibilitySmoothingFilterAuxiliary=null,this.landmarksSmoothingFilterActual=null,this.landmarksSmoothingFilterAuxiliary=null},t.prototype.detectPose=function(t){return L(this,void 0,void 0,(function(){var e,i,n,r,o,a,s,l,u,h;return B(this,(function(c){switch(c.label){case 0:return e=ft(t,Ht),i=e.imageTensor,n=e.padding,r=this.detectorModel.predict(i),o=mt(r),a=o.boxes,[4,Mt([s=o.logits,a],this.anchorTensor,Dt)];case 1:return 0===(l=c.sent()).length?(f([i,r,s,a]),[2,l]):[4,vt(l,this.maxPoses,Kt)];case 2:return u=c.sent(),h=function(t,e){void 0===t&&(t=[]);for(var i=e.left,n=e.top,r=e.left+e.right,o=e.top+e.bottom,a=0;a<t.length;a++){var s=t[a],l=s.locationData.relativeBoundingBox,u=(l.xMin-i)/(1-r),h=(l.yMin-n)/(1-o),c=l.width/(1-r),p=l.height/(1-o);l.xMin=u,l.yMin=h,l.width=c,l.height=p,l.xMax=u+c,l.yMax=h+p;var f=s.locationData.relativeKeypoints;f&&f.forEach((function(t){var e=(t.x-i)/(1-r),a=(t.y-n)/(1-o);t.x=e,t.y=a}))}return t}(u,n),f([i,r,s,a]),[2,h]}}))}))},t.prototype.poseDetectionToRoi=function(t,e){return 0,1,_t(st(t,e,{rotationVectorEndKeypointIndex:1,rotationVectorStartKeypointIndex:0,rotationVectorTargetAngleDegree:90}),e,jt)},t.prototype.poseLandmarksByRoi=function(t,e){return L(this,void 0,void 0,(function(){var i,n,r,o,a,s,l,u,h,c,p,d,m,g;return B(this,(function(y){switch(y.label){case 0:if(i=it(e),n=ft(e,qt,t),r=n.imageTensor,o=n.padding,a=n.transformationMatrix,\"lite\"!==this.modelType&&\"full\"!==this.modelType&&\"heavy\"!==this.modelType)throw new Error(\"Model type must be one of lite, full or heavy,but got \"+this.modelType);return s=[\"ld_3d\",\"output_poseflag\",\"activation_heatmap\",\"world_3d\"],this.enableSegmentation&&s.push(\"activation_segmentation\"),l=this.landmarkModel.execute(r,s),[4,this.tensorsToPoseLandmarksAndSegmentation(l)];case 1:return null==(u=y.sent())?(f(l),f(r),[2,null]):(h=u.landmarks,c=u.auxiliaryLandmarks,p=u.poseScore,d=u.worldLandmarks,m=u.segmentationMask,[4,this.poseLandmarksAndSegmentationInverseProjection(i,t,o,a,h,c,d,m)]);case 2:return g=y.sent(),f(l),f(r),[2,V({poseScore:p},g)]}}))}))},t.prototype.poseLandmarksAndSegmentationInverseProjection=function(t,e,i,n,o,a,u,h){return L(this,void 0,void 0,(function(){var c,d,m,g,y,v;return B(this,(function(x){return c=kt(o,i),d=kt(a,i),m=ct(c,e),g=ct(d,e),y=function(t,e){for(var i=[],n=0,r=t;n<r.length;n++){var o=r[n],a=o.x,s=o.y,l=e.rotation,u=Math.cos(l)*a-Math.sin(l)*s,h=Math.sin(l)*a+Math.cos(l)*s,c=V({},o);c.x=u,c.y=h,i.push(c)}return i}(u,e),v=null,this.enableSegmentation&&(v=r((function(){var e=h.shape,i=e[0],r=e[1],o=function(t){var e=lt(new Array(16).fill(0));e[0][0]=ht(t,0,0),e[1][0]=-ht(t,0,1),e[2][0]=ht(t,0,2),e[3][0]=-ht(t,0,3),e[0][2]=ht(t,2,0),e[1][2]=-ht(t,2,1),e[2][2]=ht(t,2,2),e[3][2]=-ht(t,2,3),e[0][1]=-ht(t,1,0),e[1][1]=ht(t,1,1),e[2][1]=-ht(t,1,2),e[3][1]=ht(t,1,3),e[0][3]=-ht(t,3,0),e[1][3]=ht(t,3,1),e[2][3]=-ht(t,3,2),e[3][3]=ht(t,3,3);for(var i=t[0][0]*e[0][0]+t[1][0]*e[0][1]+t[2][0]*e[0][2]+t[3][0]*e[0][3],n=0;n<e.length;n++)for(var r=0;r<e.length;r++)e[n][r]/=i;return e}(n),a=s(ot(o,{width:r,height:i},t),[1,8]),u=[1,i,r,1];return p(l.transform(S(h,u),a,\"bilinear\",\"constant\",0,[t.height,t.width]),[0,3])})),f(h)),[2,{landmarks:m,auxiliaryLandmarks:g,worldLandmarks:y,segmentationMask:v}]}))}))},t.prototype.tensorsToPoseLandmarksAndSegmentation=function(t){return L(this,void 0,void 0,(function(){var e,i,n,o,a,s,u,h,c,f,d,m,g;return B(this,(function(y){switch(y.label){case 0:return e=t[0],i=t[1],n=t[2],o=t[3],a=this.enableSegmentation?t[4]:null,[4,i.data()];case 1:return(s=y.sent()[0])<.5?[2,null]:[4,Ft(e,Ut)];case 2:return[4,wt(y.sent(),n,Wt)];case 3:return u=y.sent(),h=u.slice(0,33),c=u.slice(33,35),[4,Ft(o,Xt)];case 4:return f=y.sent(),d=f.slice(0,33),m=function(t,e,i){void 0===i&&(i=!0);for(var n=[],r=0;r<t.length;r++){var o=V({},e[r]);i&&(o.score=t[r].score),n.push(o)}return n}(h,d,!0),g=this.enableSegmentation?function(t,e,i){return r((function(){var n=p(t,[0]),r=n.shape[2];if(1===r){var o=n;switch(e.activation){case\"none\":break;case\"sigmoid\":o=P(o);break;case\"softmax\":throw new Error(\"Softmax activation requires two channels.\");default:throw new Error(\"Activation not supported (\"+e.activation+\")\")}var a=i?l.resizeBilinear(o,[i.height,i.width]):o;return p(a,[2])}throw new Error(\"Unsupported number of tensor channels \"+r)}))}(a,$t):null,[2,{landmarks:h,auxiliaryLandmarks:c,poseScore:s,worldLandmarks:m,segmentationMask:g}]}}))}))},t.prototype.poseLandmarksToRoi=function(t,e){return _t(st(yt(t),e,{rotationVectorStartKeypointIndex:0,rotationVectorEndKeypointIndex:1,rotationVectorTargetAngleDegree:90}),e,jt)},t.prototype.poseLandmarkFiltering=function(t,e,i,n){var r,o,a;if(null!=this.timestamp&&this.enableSmoothing){var s=st(yt(e),n,{rotationVectorEndKeypointIndex:0,rotationVectorStartKeypointIndex:1,rotationVectorTargetAngleDegree:90});null==this.visibilitySmoothingFilterActual&&(this.visibilitySmoothingFilterActual=new Vt(Yt)),r=this.visibilitySmoothingFilterActual.apply(t),null==this.visibilitySmoothingFilterAuxiliary&&(this.visibilitySmoothingFilterAuxiliary=new Vt(Yt)),o=this.visibilitySmoothingFilterAuxiliary.apply(e),a=this.visibilitySmoothingFilterActual.apply(i),null==this.landmarksSmoothingFilterActual&&(this.landmarksSmoothingFilterActual=new zt(Gt)),r=this.landmarksSmoothingFilterActual.apply(r,this.timestamp,n,!0,s),null==this.landmarksSmoothingFilterAuxiliary&&(this.landmarksSmoothingFilterAuxiliary=new zt(Qt)),o=this.landmarksSmoothingFilterAuxiliary.apply(o,this.timestamp,n,!0,s),null==this.worldLandmarksSmoothingFilterActual&&(this.worldLandmarksSmoothingFilterActual=new zt(Zt)),a=this.worldLandmarksSmoothingFilterActual.apply(i,this.timestamp)}else r=t,o=e,a=i;return{actualLandmarksFiltered:r,auxiliaryLandmarksFiltered:o,actualWorldLandmarksFiltered:a}},t}();function ne(t){return L(this,void 0,void 0,(function(){var e,i,n,r,o,a;return B(this,(function(s){switch(s.label){case 0:return e=function(t){var e=V({},null==t?Bt:t);if(null==e.enableSmoothing&&(e.enableSmoothing=Bt.enableSmoothing),null==e.enableSegmentation&&(e.enableSegmentation=Bt.enableSegmentation),null==e.smoothSegmentation&&(e.smoothSegmentation=Bt.smoothSegmentation),null==e.modelType&&(e.modelType=Bt.modelType),null==e.detectorModelUrl&&(e.detectorModelUrl=Bt.detectorModelUrl),null==e.landmarkModelUrl)switch(e.modelType){case\"lite\":e.landmarkModelUrl=\"https://tfhub.dev/mediapipe/tfjs-model/blazepose_3d/landmark/lite/2\";break;case\"heavy\":e.landmarkModelUrl=\"https://tfhub.dev/mediapipe/tfjs-model/blazepose_3d/landmark/heavy/2\";break;case\"full\":default:e.landmarkModelUrl=\"https://tfhub.dev/mediapipe/tfjs-model/blazepose_3d/landmark/full/2\"}return e}(t),i=\"string\"==typeof e.detectorModelUrl&&e.detectorModelUrl.indexOf(\"https://tfhub.dev\")>-1,n=\"string\"==typeof e.landmarkModelUrl&&e.landmarkModelUrl.indexOf(\"https://tfhub.dev\")>-1,[4,Promise.all([R(e.detectorModelUrl,{fromTFHub:i}),R(e.landmarkModelUrl,{fromTFHub:n})])];case 1:return r=s.sent(),o=r[0],a=r[1],[2,new ie(o,a,e.enableSmoothing,e.enableSegmentation,e.smoothSegmentation,e.modelType)]}}))}))}var re,oe,ae=function(){function t(t){!function(t){if(t.maxTracks<1)throw new Error(\"Must specify 'maxTracks' to be at least 1, but encountered \"+t.maxTracks);if(t.maxAge<=0)throw new Error(\"Must specify 'maxAge' to be positive, but encountered \"+t.maxAge);if(void 0!==t.keypointTrackerParams){if(t.keypointTrackerParams.keypointConfidenceThreshold<0||t.keypointTrackerParams.keypointConfidenceThreshold>1)throw new Error(\"Must specify 'keypointConfidenceThreshold' to be in the range [0, 1], but encountered \"+t.keypointTrackerParams.keypointConfidenceThreshold);if(t.keypointTrackerParams.minNumberOfKeypoints<1)throw new Error(\"Must specify 'minNumberOfKeypoints' to be at least 1, but encountered \"+t.keypointTrackerParams.minNumberOfKeypoints);for(var e=0,i=t.keypointTrackerParams.keypointFalloff;e<i.length;e++){var n=i[e];if(n<=0)throw new Error(\"Must specify each keypoint falloff parameterto be positive but encountered \"+n)}}}(t),this.tracks=[],this.maxTracks=t.maxTracks,this.maxAge=1e3*t.maxAge,this.minSimilarity=t.minSimilarity,this.nextID=1}return t.prototype.apply=function(t,e){this.filterOldTracks(e);var i=this.computeSimilarity(t);return this.assignTracks(t,i,e),this.updateTracks(e),t},t.prototype.getTracks=function(){return this.tracks.slice()},t.prototype.getTrackIDs=function(){return new Set(this.tracks.map((function(t){return t.id})))},t.prototype.filterOldTracks=function(t){var e=this;this.tracks=this.tracks.filter((function(i){return t-i.lastTimestamp<=e.maxAge}))},t.prototype.assignTracks=function(t,e,i){for(var n=Array.from(Array(e[0].length).keys()),r=[],o=0,a=Array.from(Array(t.length).keys());o<a.length;o++){var s=a[o];if(0!==n.length){for(var l=-1,u=-1,h=0,c=n;h<c.length;h++){var p=c[h],f=e[s][p];f>=this.minSimilarity&&f>u&&(l=p,u=f)}if(l>=0){var d=this.tracks[l];d=Object.assign(d,this.createTrack(t[s],i,d.id)),t[s].id=d.id;var m=n.indexOf(l);n.splice(m,1)}else r.push(s)}else r.push(s)}for(var g=0,y=r;g<y.length;g++){s=y[g];var v=this.createTrack(t[s],i);this.tracks.push(v),t[s].id=v.id}},t.prototype.updateTracks=function(t){this.tracks.sort((function(t,e){return e.lastTimestamp-t.lastTimestamp})),this.tracks=this.tracks.slice(0,this.maxTracks)},t.prototype.createTrack=function(t,e,i){var n={id:i||this.nextTrackID(),lastTimestamp:e,keypoints:N(t.keypoints).map((function(t){return V({},t)}))};return void 0!==t.box&&(n.box=V({},t.box)),n},t.prototype.nextTrackID=function(){var t=this.nextID;return this.nextID+=1,t},t.prototype.remove=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this.tracks=this.tracks.filter((function(e){return!t.includes(e.id)}))},t.prototype.reset=function(){this.tracks=[]},t}(),se=function(t){function e(e){return t.call(this,e)||this}return z(e,t),e.prototype.computeSimilarity=function(t){var e=this;return 0===t.length||0===this.tracks.length?[[]]:t.map((function(t){return e.tracks.map((function(i){return e.iou(t,i)}))}))},e.prototype.iou=function(t,e){var i=Math.max(t.box.xMin,e.box.xMin),n=Math.max(t.box.yMin,e.box.yMin),r=Math.min(t.box.xMax,e.box.xMax),o=Math.min(t.box.yMax,e.box.yMax);if(i>=r||n>=o)return 0;var a=(r-i)*(o-n);return a/(t.box.width*t.box.height+e.box.width*e.box.height-a)},e}(ae),le=function(t){function e(e){var i=t.call(this,e)||this;return i.keypointThreshold=e.keypointTrackerParams.keypointConfidenceThreshold,i.keypointFalloff=e.keypointTrackerParams.keypointFalloff,i.minNumKeyoints=e.keypointTrackerParams.minNumberOfKeypoints,i}return z(e,t),e.prototype.computeSimilarity=function(t){if(0===t.length||0===this.tracks.length)return[[]];for(var e=[],i=0,n=t;i<n.length;i++){for(var r=n[i],o=[],a=0,s=this.tracks;a<s.length;a++){var l=s[a];o.push(this.oks(r,l))}e.push(o)}return e},e.prototype.oks=function(t,e){for(var i=this.area(e.keypoints)+1e-6,n=0,r=0,o=0;o<t.keypoints.length;++o){var a=t.keypoints[o],s=e.keypoints[o];if(!(a.score<this.keypointThreshold||s.score<this.keypointThreshold)){r+=1;var l=Math.pow(a.x-s.x,2)+Math.pow(a.y-s.y,2),u=2*this.keypointFalloff[o];n+=Math.exp(-1*l/(2*i*Math.pow(u,2)))}}return r<this.minNumKeyoints?0:n/r},e.prototype.area=function(t){var e=this,i=t.filter((function(t){return t.score>e.keypointThreshold})),n=Math.min.apply(Math,N([1],i.map((function(t){return t.x})))),r=Math.max.apply(Math,N([0],i.map((function(t){return t.x})))),o=Math.min.apply(Math,N([1],i.map((function(t){return t.y}))));return(r-n)*(Math.max.apply(Math,N([0],i.map((function(t){return t.y}))))-o)},e}(ae);function ue(t){switch(t){case oe.BlazePose:return K.reduce((function(t,e,i){return t[e]=i,t}),{});case oe.PoseNet:case oe.MoveNet:return D.reduce((function(t,e,i){return t[e]=i,t}),{});default:throw new Error(\"Model \"+t+\" is not supported.\")}}!function(t){t.Keypoint=\"keypoint\",t.BoundingBox=\"boundingBox\"}(re||(re={})),function(t){t.MoveNet=\"MoveNet\",t.BlazePose=\"BlazePose\",t.PoseNet=\"PoseNet\"}(oe||(oe={}));var he=Object.freeze({__proto__:null,getKeypointIndexBySide:function(t){switch(t){case oe.BlazePose:return j;case oe.PoseNet:case oe.MoveNet:return H;default:throw new Error(\"Model \"+t+\" is not supported.\")}},getAdjacentPairs:function(t){switch(t){case oe.BlazePose:return U;case oe.PoseNet:case oe.MoveNet:return q;default:throw new Error(\"Model \"+t+\" is not supported.\")}},getKeypointIndexByName:ue}),ce=[\"SinglePose.Lightning\",\"SinglePose.Thunder\",\"MultiPose.Lightning\"],pe={modelType:\"SinglePose.Lightning\",enableSmoothing:!0},fe={},de={frequency:30,minCutOff:2.5,beta:300,derivateCutOff:2.5,thresholdCutOff:.5,thresholdBeta:5,disableValueScaling:!0},me={maxTracks:18,maxAge:1e3,minSimilarity:.2,keypointTrackerParams:{keypointConfidenceThreshold:.3,keypointFalloff:[.026,.025,.025,.035,.035,.079,.079,.072,.072,.062,.062,.107,.107,.087,.087,.089,.089],minNumberOfKeypoints:4}},ge={maxTracks:18,maxAge:1e3,minSimilarity:.15,trackerParams:{}};function ye(t,e,i,n){for(var r={},o=0,a=D;o<a.length;o++){var s=a[o];r[s]=[e[i[s]].y*n.height,e[i[s]].x*n.width]}if(function(t,e){return(t[e.left_hip].score>.2||t[e.right_hip].score>.2)&&(t[e.left_shoulder].score>.2||t[e.right_shoulder].score>.2)}(e,i)){var l=(r.left_hip[0]+r.right_hip[0])/2,u=(r.left_hip[1]+r.right_hip[1])/2,h=function(t,e,i,n,r){for(var o=[\"left_shoulder\",\"right_shoulder\",\"left_hip\",\"right_hip\"],a=0,s=0,l=0;l<o.length;l++){(f=Math.abs(n-i[o[l]][0]))>a&&(a=f),(d=Math.abs(r-i[o[l]][1]))>s&&(s=d)}for(var u=0,h=0,c=0,p=Object.keys(i);c<p.length;c++){var f,d,m=p[c];if(!(t[e[m]].score<.2))(f=Math.abs(n-i[m][0]))>u&&(u=f),(d=Math.abs(r-i[m][1]))>h&&(h=d)}return[a,s,u,h]}(e,i,r,l,u),c=h[0],p=h[1],f=h[2],d=h[3],m=Math.max(1.9*p,1.9*c,1.2*f,1.2*d),g=[l-(m=Math.min(m,Math.max(u,n.width-u,l,n.height-l))),u-m];if(m>Math.max(n.width,n.height)/2)return ve(null==t,n);var y=2*m;return{yMin:g[0]/n.height,xMin:g[1]/n.width,yMax:(g[0]+y)/n.height,xMax:(g[1]+y)/n.width,height:(g[0]+y)/n.height-g[0]/n.height,width:(g[1]+y)/n.width-g[1]/n.width}}return ve(null==t,n)}function ve(t,e){var i,n,r,o;return t?e.width>e.height?(i=1,n=e.height/e.width,r=0,o=(e.width/2-e.height/2)/e.width):(i=e.width/e.height,n=1,r=(e.height/2-e.width/2)/e.height,o=0):e.width>e.height?(i=e.width/e.height,n=1,r=(e.height/2-e.width/2)/e.height,o=0):(i=1,n=e.height/e.width,r=0,o=(e.width/2-e.height/2)/e.width),{yMin:r,xMin:o,yMax:r+i,xMax:o+n,height:i,width:n}}function xe(t){var e,i=null==t?pe:V({},t);if(null==i.modelType)i.modelType=\"SinglePose.Lightning\";else if(ce.indexOf(i.modelType)<0)throw new Error(\"Invalid architecture \"+i.modelType+\". Should be one of \"+ce);if(null==i.enableSmoothing&&(i.enableSmoothing=!0),null!=i.minPoseScore&&(i.minPoseScore<0||i.minPoseScore>1))throw new Error(\"minPoseScore should be between 0.0 and 1.0\");if(null!=i.multiPoseMaxDimension&&(i.multiPoseMaxDimension%32!=0||i.multiPoseMaxDimension<32))throw new Error(\"multiPoseMaxDimension must be a multiple of 32 and higher than 0\");if(\"MultiPose.Lightning\"===i.modelType&&null==i.enableTracking&&(i.enableTracking=!0),\"MultiPose.Lightning\"===i.modelType&&!0===i.enableTracking)if(null==i.trackerType&&(i.trackerType=re.BoundingBox),i.trackerType===re.Keypoint)null!=i.trackerConfig?i.trackerConfig=function(t){var e=we(me,t);e.keypointTrackerParams=V({},me.keypointTrackerParams),null!=t.keypointTrackerParams&&(null!=t.keypointTrackerParams.keypointConfidenceThreshold&&(e.keypointTrackerParams.keypointConfidenceThreshold=t.keypointTrackerParams.keypointConfidenceThreshold),null!=t.keypointTrackerParams.keypointFalloff&&(e.keypointTrackerParams.keypointFalloff=t.keypointTrackerParams.keypointFalloff),null!=t.keypointTrackerParams.minNumberOfKeypoints&&(e.keypointTrackerParams.minNumberOfKeypoints=t.keypointTrackerParams.minNumberOfKeypoints));return e}(i.trackerConfig):i.trackerConfig=me;else{if(i.trackerType!==re.BoundingBox)throw new Error(\"Tracker type not supported by MoveNet\");null!=i.trackerConfig?i.trackerConfig=(e=i.trackerConfig,we(ge,e)):i.trackerConfig=ge}return i}function we(t,e){var i={maxTracks:t.maxTracks,maxAge:t.maxAge,minSimilarity:t.minSimilarity};return null!=e.maxTracks&&(i.maxTracks=e.maxTracks),null!=e.maxAge&&(i.maxAge=e.maxAge),null!=e.minSimilarity&&(i.minSimilarity=e.minSimilarity),i}var ke=function(){function t(t,e){this.moveNetModel=t,this.modelInputResolution={height:0,width:0},this.keypointIndexByName=ue(oe.MoveNet),\"SinglePose.Lightning\"===e.modelType?(this.modelInputResolution.width=192,this.modelInputResolution.height=192):\"SinglePose.Thunder\"===e.modelType&&(this.modelInputResolution.width=256,this.modelInputResolution.height=256),this.multiPoseModel=\"MultiPose.Lightning\"===e.modelType,this.multiPoseModel||(this.keypointFilter=new Ct(de),this.cropRegionFilterYMin=new At(.9),this.cropRegionFilterXMin=new At(.9),this.cropRegionFilterYMax=new At(.9),this.cropRegionFilterXMax=new At(.9)),this.enableSmoothing=e.enableSmoothing,e.minPoseScore?this.minPoseScore=e.minPoseScore:this.minPoseScore=.25,e.multiPoseMaxDimension?this.multiPoseMaxDimension=e.multiPoseMaxDimension:this.multiPoseMaxDimension=256,this.enableTracking=e.enableTracking,this.multiPoseModel&&this.enableTracking&&(e.trackerType===re.Keypoint?this.tracker=new le(e.trackerConfig):e.trackerType===re.BoundingBox&&(this.tracker=new se(e.trackerConfig)),this.enableSmoothing&&(this.keypointFilterMap=new Map))}return t.prototype.runSinglePersonPoseModel=function(t){return L(this,void 0,void 0,(function(){var e,i,n,r,o;return B(this,(function(a){switch(a.label){case 0:if(4!==(e=this.moveNetModel.execute(t)).shape.length||1!==e.shape[0]||1!==e.shape[1]||17!==e.shape[2]||3!==e.shape[3])throw e.dispose(),new Error(\"Unexpected output shape from model: [\"+e.shape+\"]\");return\"webgpu\"===m()?[3,1]:(i=e.dataSync(),[3,3]);case 1:return[4,e.data()];case 2:i=a.sent(),a.label=3;case 3:for(e.dispose(),n={keypoints:[],score:0},r=0,o=0;o<17;++o)n.keypoints[o]={y:i[3*o],x:i[3*o+1],score:i[3*o+2]},n.keypoints[o].score>.2&&(++r,n.score+=n.keypoints[o].score);return r>0&&(n.score/=r),[2,n]}}))}))},t.prototype.runMultiPersonPoseModel=function(t){return L(this,void 0,void 0,(function(){var e,i,n,r,o,a,s,l;return B(this,(function(u){switch(u.label){case 0:if(3!==(e=this.moveNetModel.execute(t)).shape.length||1!==e.shape[0]||56!==e.shape[2])throw e.dispose(),new Error(\"Unexpected output shape from model: [\"+e.shape+\"]\");return\"webgpu\"===m()?[3,1]:(i=e.dataSync(),[3,3]);case 1:return[4,e.data()];case 2:i=u.sent(),u.label=3;case 3:for(e.dispose(),n=[],r=i.length/56,o=0;o<r;++o)for(n[o]={keypoints:[]},a=56*o+51,n[o].box={yMin:i[a],xMin:i[a+1],yMax:i[a+2],xMax:i[a+3],width:i[a+3]-i[a+1],height:i[a+2]-i[a]},s=56*o+55,n[o].score=i[s],n[o].keypoints=[],l=0;l<17;++l)n[o].keypoints[l]={y:i[56*o+3*l],x:i[56*o+3*l+1],score:i[56*o+3*l+2]};return[2,n]}}))}))},t.prototype.estimatePoses=function(t,i,n){return void 0===i&&(i=fe),L(this,void 0,void 0,(function(){var r,o,a,s,l,h;return B(this,(function(c){switch(c.label){case 0:return i=function(t){return null==t?fe:V({},t)}(i),null==t?(this.reset(),[2,[]]):(null==n?gt(t)&&(n=1e6*t.currentTime):n*=1e3,r=rt(t),o=it(r),a=u(r,0),t instanceof e||r.dispose(),s=[],this.multiPoseModel?[3,2]:[4,this.estimateSinglePose(a,o,n)]);case 1:return s=c.sent(),[3,4];case 2:return[4,this.estimateMultiplePoses(a,o,n)];case 3:s=c.sent(),c.label=4;case 4:for(l=0;l<s.length;++l)for(h=0;h<s[l].keypoints.length;++h)s[l].keypoints[h].name=D[h],s[l].keypoints[h].y*=o.height,s[l].keypoints[h].x*=o.width;return[2,s]}}))}))},t.prototype.estimateSinglePose=function(t,e,i){return L(this,void 0,void 0,(function(){var n,o,a,u,c=this;return B(this,(function(p){switch(p.label){case 0:return this.cropRegion||(this.cropRegion=ve(null==this.cropRegion,e)),n=r((function(){var e=s([[c.cropRegion.yMin,c.cropRegion.xMin,c.cropRegion.yMax,c.cropRegion.xMax]]),i=A([1],\"int32\"),n=[c.modelInputResolution.height,c.modelInputResolution.width];return h(l.cropAndResize(t,e,i,n,\"bilinear\",0),\"int32\")})),t.dispose(),[4,this.runSinglePersonPoseModel(n)];case 1:if(o=p.sent(),n.dispose(),o.score<this.minPoseScore)return this.reset(),[2,[]];for(a=0;a<o.keypoints.length;++a)o.keypoints[a].y=this.cropRegion.yMin+o.keypoints[a].y*this.cropRegion.height,o.keypoints[a].x=this.cropRegion.xMin+o.keypoints[a].x*this.cropRegion.width;return null!=i&&this.enableSmoothing&&(o.keypoints=this.keypointFilter.apply(o.keypoints,i,1)),u=ye(this.cropRegion,o.keypoints,this.keypointIndexByName,e),this.cropRegion=this.filterCropRegion(u),[2,[o]]}}))}))},t.prototype.estimateMultiplePoses=function(t,e,i){return L(this,void 0,void 0,(function(){var n,r,o,a,s,u,c,p,f,d,m,g=this;return B(this,(function(y){switch(y.label){case 0:return 32,e.width>e.height?(r=this.multiPoseMaxDimension,o=Math.round(this.multiPoseMaxDimension*e.height/e.width),n=l.resizeBilinear(t,[o,r]),s=r,u=32*Math.ceil(o/32),a=F(n,[[0,0],[0,u-o],[0,0],[0,0]])):(r=Math.round(this.multiPoseMaxDimension*e.width/e.height),o=this.multiPoseMaxDimension,n=l.resizeBilinear(t,[o,r]),s=32*Math.ceil(r/32),u=o,a=F(n,[[0,0],[0,0],[0,s-r],[0,0]])),n.dispose(),t.dispose(),c=h(a,\"int32\"),a.dispose(),[4,this.runMultiPersonPoseModel(c)];case 1:for(p=y.sent(),c.dispose(),p=p.filter((function(t){return t.score>=g.minPoseScore})),d=0;d<p.length;++d)for(f=0;f<p[d].keypoints.length;++f)p[d].keypoints[f].y*=u/o,p[d].keypoints[f].x*=s/r;if(this.enableTracking&&(this.tracker.apply(p,i),this.enableSmoothing)){for(d=0;d<p.length;++d)this.keypointFilterMap.has(p[d].id)||this.keypointFilterMap.set(p[d].id,new Ct(de)),p[d].keypoints=this.keypointFilterMap.get(p[d].id).apply(p[d].keypoints,i,1);m=this.tracker.getTrackIDs(),this.keypointFilterMap.forEach((function(t,e){m.has(e)||g.keypointFilterMap.delete(e)}))}return[2,p]}}))}))},t.prototype.filterCropRegion=function(t){if(t){var e=this.cropRegionFilterYMin.apply(t.yMin),i=this.cropRegionFilterXMin.apply(t.xMin),n=this.cropRegionFilterYMax.apply(t.yMax),r=this.cropRegionFilterXMax.apply(t.xMax);return{yMin:e,xMin:i,yMax:n,xMax:r,height:n-e,width:r-i}}return this.cropRegionFilterYMin.reset(),this.cropRegionFilterXMin.reset(),this.cropRegionFilterYMax.reset(),this.cropRegionFilterXMax.reset(),null},t.prototype.dispose=function(){this.moveNetModel.dispose()},t.prototype.reset=function(){this.cropRegion=null,this.resetFilters()},t.prototype.resetFilters=function(){this.keypointFilter.reset(),this.cropRegionFilterYMin.reset(),this.cropRegionFilterXMin.reset(),this.cropRegionFilterYMax.reset(),this.cropRegionFilterXMax.reset()},t}();function be(t){return void 0===t&&(t=pe),L(this,void 0,void 0,(function(){var e,i,n,r;return B(this,(function(o){switch(o.label){case 0:return e=xe(t),n=!0,e.modelUrl?(n=\"string\"==typeof e.modelUrl&&e.modelUrl.indexOf(\"https://tfhub.dev\")>-1,[4,R(e.modelUrl,{fromTFHub:n})]):[3,2];case 1:return i=o.sent(),[3,4];case 2:return r=void 0,\"SinglePose.Lightning\"===e.modelType?r=\"https://tfhub.dev/google/tfjs-model/movenet/singlepose/lightning/4\":\"SinglePose.Thunder\"===e.modelType?r=\"https://tfhub.dev/google/tfjs-model/movenet/singlepose/thunder/4\":\"MultiPose.Lightning\"===e.modelType&&(r=\"https://tfhub.dev/google/tfjs-model/movenet/multipose/lightning/1\"),[4,R(r,{fromTFHub:n})];case 3:i=o.sent(),o.label=4;case 4:return\"webgl\"===m()&&O().set(\"TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD\",0),[2,new ke(i,e)]}}))}))}var Me={architecture:\"MobileNetV1\",outputStride:16,multiplier:.75,inputResolution:{height:257,width:257}},Se=[\"MobileNetV1\",\"ResNet50\"],Te={MobileNetV1:[8,16],ResNet50:[16]},Pe=[8,16,32],Fe={MobileNetV1:[.5,.75,1],ResNet50:[1]},_e=[1,2,4],Oe={maxPoses:1,flipHorizontal:!1},Ae={maxPoses:5,flipHorizontal:!1,scoreThreshold:.5,nmsRadius:20},Ie=[-123.15,-115.9,-103.06];function Ce(t){return Math.floor(t/2)}var Re=function(){function t(t,e){this.priorityQueue=new Array(t),this.numberOfElements=-1,this.getElementValue=e}return t.prototype.enqueue=function(t){this.priorityQueue[++this.numberOfElements]=t,this.swim(this.numberOfElements)},t.prototype.dequeue=function(){var t=this.priorityQueue[0];return this.exchange(0,this.numberOfElements--),this.sink(0),this.priorityQueue[this.numberOfElements+1]=null,t},t.prototype.empty=function(){return-1===this.numberOfElements},t.prototype.size=function(){return this.numberOfElements+1},t.prototype.all=function(){return this.priorityQueue.slice(0,this.numberOfElements+1)},t.prototype.max=function(){return this.priorityQueue[0]},t.prototype.swim=function(t){for(;t>0&&this.less(Ce(t),t);)this.exchange(t,Ce(t)),t=Ce(t)},t.prototype.sink=function(t){for(;2*t<=this.numberOfElements;){var e=2*t;if(e<this.numberOfElements&&this.less(e,e+1)&&e++,!this.less(t,e))break;this.exchange(t,e),t=e}},t.prototype.getValueAt=function(t){return this.getElementValue(this.priorityQueue[t])},t.prototype.less=function(t,e){return this.getValueAt(t)<this.getValueAt(e)},t.prototype.exchange=function(t,e){var i=this.priorityQueue[t];this.priorityQueue[t]=this.priorityQueue[e],this.priorityQueue[e]=i},t}();function Ee(t,e,i,n,r,o){for(var a=o.shape,s=a[0],l=a[1],u=!0,h=Math.max(i-r,0),c=Math.min(i+r+1,s),p=h;p<c;++p){for(var f=Math.max(n-r,0),d=Math.min(n+r+1,l),m=f;m<d;++m)if(o.get(p,m,t)>e){u=!1;break}if(!u)break}return u}function ze(t){return L(this,void 0,void 0,(function(){return B(this,(function(e){return[2,Promise.all(t.map((function(t){return t.buffer()})))]}))}))}function Ve(t,e,i,n){return{y:n.get(t,e,i),x:n.get(t,e,i+17)}}function Le(t,e,i){var n=Ve(t.heatmapY,t.heatmapX,t.id,i),r=n.y,o=n.x;return{x:t.heatmapX*e+o,y:t.heatmapY*e+r}}function Be(t,e,i,n){var r=i.x,o=i.y;return t.some((function(t){var i,a,s,l,u,h,c=t.keypoints;return i=o,a=r,s=c[n].y,l=c[n].x,(u=s-i)*u+(h=l-a)*h<=e}))}var Ne=D.reduce((function(t,e,i){return t[e]=i,t}),{}),De=[[\"nose\",\"left_eye\"],[\"left_eye\",\"left_ear\"],[\"nose\",\"right_eye\"],[\"right_eye\",\"right_ear\"],[\"nose\",\"left_shoulder\"],[\"left_shoulder\",\"left_elbow\"],[\"left_elbow\",\"left_wrist\"],[\"left_shoulder\",\"left_hip\"],[\"left_hip\",\"left_knee\"],[\"left_knee\",\"left_ankle\"],[\"nose\",\"right_shoulder\"],[\"right_shoulder\",\"right_elbow\"],[\"right_elbow\",\"right_wrist\"],[\"right_shoulder\",\"right_hip\"],[\"right_hip\",\"right_knee\"],[\"right_knee\",\"right_ankle\"]].map((function(t){var e=t[0],i=t[1];return[Ne[e],Ne[i]]})),Ke=De.map((function(t){return t[1]})),je=De.map((function(t){return t[0]}));function He(t,e,i){return t<e?e:t>i?i:t}function qe(t,e,i,n){return{y:He(Math.round(t.y/e),0,i-1),x:He(Math.round(t.x/e),0,n-1)}}function Ue(t,e){return{x:t.x+e.x,y:t.y+e.y}}function Xe(t,e,i,n,r,o,a,s){void 0===s&&(s=2);for(var l=n.shape,u=l[0],h=l[1],c={y:e.y,x:e.x},p=Ue(c,function(t,e,i){var n=i.shape[2]/2;return{y:i.get(e.y,e.x,t),x:i.get(e.y,e.x,n+t)}}(t,qe(c,o,u,h),a)),f=0;f<s;f++){var d=qe(p,o,u,h),m=Ve(d.y,d.x,i,r);p=Ue({x:d.x*o,y:d.y*o},{x:m.x,y:m.y})}var g=qe(p,o,u,h),y=n.get(g.y,g.x,i);return{y:p.y,x:p.x,name:D[i],score:y}}function We(t,e,i,n,r,o){var a=e.shape[2],s=Ke.length,l=new Array(a),u=t.part,h=t.score,c=Le(u,n,i);l[u.id]={score:h,name:D[u.id],y:c.y,x:c.x};for(var p=s-1;p>=0;--p){var f=Ke[p],d=je[p];l[f]&&!l[d]&&(l[d]=Xe(p,l[f],d,e,i,n,o))}for(p=0;p<s;++p){f=je[p],d=Ke[p];l[f]&&!l[d]&&(l[d]=Xe(p,l[f],d,e,i,n,r))}return l}function Ye(t,e,i){return i.reduce((function(i,n,r){var o=n.y,a=n.x,s=n.score;return Be(t,e,{y:o,x:a},r)||(i+=s),i}),0)/i.length}function Ge(t,e,i,n,r,o,a,s){return void 0===a&&(a=.5),void 0===s&&(s=20),L(this,void 0,void 0,(function(){var l,u,h,c,p,f,d,m,g,y,v,x;return B(this,(function(w){switch(w.label){case 0:return[4,ze([t,e,i,n])];case 1:for(l=w.sent(),u=l[0],h=l[1],c=l[2],p=l[3],f=[],d=function(t,e,i){for(var n=i.shape,r=n[0],o=n[1],a=n[2],s=new Re(r*o*a,(function(t){return t.score})),l=0;l<r;++l)for(var u=0;u<o;++u)for(var h=0;h<a;++h){var c=i.get(l,u,h);c<t||Ee(h,c,l,u,e,i)&&s.enqueue({score:c,part:{heatmapY:l,heatmapX:u,id:h}})}return s}(a,1,u),m=s*s;f.length<o&&!d.empty();)g=d.dequeue(),y=Le(g.part,r,h),Be(f,m,y,g.part.id)||(v=We(g,u,h,r,c,p),x=Ye(f,m,v),f.push({keypoints:v,score:x}));return[2,f]}}))}))}function Qe(t){var e=t.shape,i=e[0],n=e[1],o=e[2];return r((function(){var e,s,l=S(t,[i*n,o]),h=C(l,0),c=u(k(h,I(n,\"int32\")),1),p=u((e=h,s=n,r((function(){var t=k(e,I(s,\"int32\"));return y(e,a(t,I(s,\"int32\")))}))),1);return M([c,p],1)}))}function Ze(t,e,i){return r((function(){var n=function(t,e){for(var i=[],n=0;n<D.length;n++){var r=t.get(n,0).valueOf(),o=t.get(n,1).valueOf(),a=$e(r,o,n,e),l=a.x,u=a.y;i.push(u),i.push(l)}return s(i,[D.length,2])}(t,i);return o(h(a(t.toTensor(),I(e,\"int32\")),\"float32\"),n)}))}function $e(t,e,i,n){return{y:n.get(t,e,i),x:n.get(t,e,i+D.length)}}function Je(t,e,i){return L(this,void 0,void 0,(function(){var n,r,o,a,s,l,u,h,c,p;return B(this,(function(f){switch(f.label){case 0:return n=0,r=Qe(t),[4,Promise.all([t.buffer(),e.buffer(),r.buffer()])];case 1:return o=f.sent(),a=o[0],s=o[1],l=o[2],[4,(u=Ze(l,i,s)).buffer()];case 2:return h=f.sent(),c=Array.from(function(t,e){for(var i=e.shape[0],n=new Float32Array(i),r=0;r<i;r++){var o=e.get(r,0),a=e.get(r,1);n[r]=t.get(o,a,r)}return n}(a,l)),p=c.map((function(t,e){return n+=t,{y:h.get(e,0),x:h.get(e,1),score:t,name:D[e]}})),r.dispose(),u.dispose(),[2,{keypoints:p,score:n/p.length}]}}))}))}function ti(t,e){return(t-1)%e==0}var ei=\"https://storage.googleapis.com/tfjs-models/savedmodel/posenet/mobilenet/\",ii=\"https://storage.googleapis.com/tfjs-models/savedmodel/posenet/resnet50/\";function ni(t,e){return function(t,e){return(t-1)%e==0}(t,e)?t:Math.floor(t/e)*e+1}var ri=function(){function t(t,e){this.posenetModel=t;var i=this.posenetModel.inputs[0].shape;n.assert(-1===i[1]&&-1===i[2],(function(){return\"Input shape [\"+i[1]+\", \"+i[2]+\"] must both be equal to or -1\"}));var r,o,a=(r=e.inputResolution,o=e.outputStride,{height:ni(r.height,o),width:ni(r.width,o)});!function(t){n.assert(Pe.indexOf(t)>=0,(function(){return\"outputStride of \"+t+\" is invalid. It must be either 8 or 16.\"}))}(e.outputStride),function(t,e){n.assert(ti(t.height,e),(function(){return\"height of \"+t.height+\" is invalid for output stride \"+e+\".\"})),n.assert(ti(t.width,e),(function(){return\"width of \"+t.width+\" is invalid for output stride \"+e+\".\"}))}(a,e.outputStride),this.inputResolution=a,this.outputStride=e.outputStride,this.architecture=e.architecture}return t.prototype.estimatePoses=function(t,e){return void 0===e&&(e=Oe),L(this,void 0,void 0,(function(){var i,n,r,a,s,l,u,h,c,d,m,g,y,v,x;return B(this,(function(w){switch(w.label){case 0:return i=function(t){var e=t;if(null==e.maxPoses&&(e.maxPoses=1),e.maxPoses<=0)throw new Error(\"Invalid maxPoses \"+e.maxPoses+\". Should be > 0.\");if(e.maxPoses>1){if((e=V(V({},Ae),e)).scoreThreshold<0||e.scoreThreshold>1)throw new Error(\"Invalid scoreThreshold \"+e.scoreThreshold+\". Should be in range [0.0, 1.0]\");if(e.nmsRadius<=0)throw new Error(\"Invalid nmsRadius \"+e.nmsRadius+\".\")}return e}(e),null==t?[2,[]]:(this.maxPoses=i.maxPoses,n=ft(t,{outputTensorSize:this.inputResolution,keepAspectRatio:!0,borderMode:\"replicate\"}),r=n.imageTensor,a=n.padding,s=\"ResNet50\"===this.architecture?o(r,Ie):pt(r,[-1,1]),l=this.posenetModel.predict(s),\"ResNet50\"===this.architecture?(u=p(l[2],[0]),h=p(l[3],[0]),c=p(l[0],[0]),d=p(l[1],[0])):(u=p(l[0],[0]),h=p(l[1],[0]),c=p(l[2],[0]),d=p(l[3],[0])),m=P(h),1!==this.maxPoses?[3,2]:[4,Je(m,u,this.outputStride)]);case 1:return y=w.sent(),g=[y],[3,4];case 2:return[4,Ge(m,u,c,d,this.outputStride,this.maxPoses,i.scoreThreshold,i.nmsRadius)];case 3:g=w.sent(),w.label=4;case 4:return v=it(t),x=function(t,e,i,n){var r=e.height,o=e.width,a=r/(i.height*(1-n.top-n.bottom)),s=o/(i.width*(1-n.left-n.right)),l=-n.top*i.height,u=-n.left*i.width;if(1===s&&1===a&&0===l&&0===u)return t;for(var h=0,c=t;h<c.length;h++)for(var p=0,f=c[h].keypoints;p<f.length;p++){var d=f[p];d.x=(d.x+u)*s,d.y=(d.y+l)*a}return t}(g,v,this.inputResolution,a),i.flipHorizontal&&(x=function(t,e){for(var i=0,n=t;i<n.length;i++)for(var r=0,o=n[i].keypoints;r<o.length;r++){var a=o[r];a.x=e.width-1-a.x}return t}(x,v)),r.dispose(),s.dispose(),f(l),u.dispose(),h.dispose(),c.dispose(),d.dispose(),m.dispose(),[2,x]}}))}))},t.prototype.dispose=function(){this.posenetModel.dispose()},t.prototype.reset=function(){},t}();function oi(t){return void 0===t&&(t=Me),L(this,void 0,void 0,(function(){var e,i,n,r,o;return B(this,(function(a){switch(a.label){case 0:return\"ResNet50\"!==(e=function(t){var e=t||Me;if(null==e.architecture&&(e.architecture=\"MobileNetV1\"),Se.indexOf(e.architecture)<0)throw new Error(\"Invalid architecture \"+e.architecture+\". Should be one of \"+Se);if(null==e.inputResolution&&(e.inputResolution={height:257,width:257}),null==e.outputStride&&(e.outputStride=16),Te[e.architecture].indexOf(e.outputStride)<0)throw new Error(\"Invalid outputStride \"+e.outputStride+\". Should be one of \"+Te[e.architecture]+\" for architecture \"+e.architecture+\".\");if(null==e.multiplier&&(e.multiplier=1),Fe[e.architecture].indexOf(e.multiplier)<0)throw new Error(\"Invalid multiplier \"+e.multiplier+\". Should be one of \"+Fe[e.architecture]+\" for architecture \"+e.architecture+\".\");if(null==e.quantBytes&&(e.quantBytes=4),_e.indexOf(e.quantBytes)<0)throw new Error(\"Invalid quantBytes \"+e.quantBytes+\". Should be one of \"+_e+\" for architecture \"+e.architecture+\".\");if(\"MobileNetV1\"===e.architecture&&32===e.outputStride&&1!==e.multiplier)throw new Error(\"When using an output stride of 32, you must select 1 as the multiplier.\");return e}(t)).architecture?[3,2]:(s=e.outputStride,l=e.quantBytes,u=\"model-stride\"+s+\".json\",i=4===l?ii+\"float/\"+u:ii+\"quant\"+l+\"/\"+u,[4,R(e.modelUrl||i)]);case 1:return n=a.sent(),[2,new ri(n,e)];case 2:return r=function(t,e,i){var n={1:\"100\",.75:\"075\",.5:\"050\"},r=\"model-stride\"+t+\".json\";return 4===i?ei+\"float/\"+n[e]+\"/\"+r:ei+\"quant\"+i+\"/\"+n[e]+\"/\"+r}(e.outputStride,e.multiplier,e.quantBytes),[4,R(e.modelUrl||r)];case 3:return o=a.sent(),[2,new ri(o,e)]}var s,l,u}))}))}function ai(t,e){return L(this,void 0,void 0,(function(){var i,n;return B(this,(function(r){switch(t){case oe.PoseNet:return[2,oi(e)];case oe.BlazePose:if(n=void 0,null!=(i=e)){if(\"tfjs\"===i.runtime)return[2,ne(e)];if(\"mediapipe\"===i.runtime)return[2,et(e)];n=i.runtime}throw new Error(\"Expect modelConfig.runtime to be either 'tfjs' or 'mediapipe', but got \"+n);case oe.MoveNet:return[2,be(e)];default:throw new Error(t+\" is not a supported model name.\")}}))}))}var si={keypointsToNormalizedKeypoints:Ot},li={modelType:{SINGLEPOSE_LIGHTNING:\"SinglePose.Lightning\",SINGLEPOSE_THUNDER:\"SinglePose.Thunder\",MULTIPOSE_LIGHTNING:\"MultiPose.Lightning\"}};export{oe as SupportedModels,re as TrackerType,si as calculators,ai as createDetector,li as movenet,he as util};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nconst ENV = env();\n\n/** Whether to keep intermediate tensors. */\nENV.registerFlag('KEEP_INTERMEDIATE_TENSORS', () => false, debugValue => {\n  if (debugValue) {\n    console.warn(\n        'Keep intermediate tensors is ON. This will print the values of all ' +\n        'intermediate tensors during model inference. Not all models ' +\n        'support this mode. For details, check e2e/benchmarks/ ' +\n        'model_config.js. This significantly impacts performance.');\n  }\n});\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\n/* tslint:disable */\n\n/** Properties of an Any. */\nexport declare interface IAny {\n  /** Any typeUrl */\n  typeUrl?: (string|null);\n\n  /** Any value */\n  value?: (Uint8Array|null);\n}\n\n/** DataType enum. */\nexport enum DataType {\n  // Not a legal value for DataType.  Used to indicate a DataType field\n  // has not been set.\n  DT_INVALID = 0,\n\n  // Data types that all computation devices are expected to be\n  // capable to support.\n  DT_FLOAT = 1,\n  DT_DOUBLE = 2,\n  DT_INT32 = 3,\n  DT_UINT8 = 4,\n  DT_INT16 = 5,\n  DT_INT8 = 6,\n  DT_STRING = 7,\n  DT_COMPLEX64 = 8,  // Single-precision complex\n  DT_INT64 = 9,\n  DT_BOOL = 10,\n  DT_QINT8 = 11,     // Quantized int8\n  DT_QUINT8 = 12,    // Quantized uint8\n  DT_QINT32 = 13,    // Quantized int32\n  DT_BFLOAT16 = 14,  // Float32 truncated to 16 bits.  Only for cast ops.\n  DT_QINT16 = 15,    // Quantized int16\n  DT_QUINT16 = 16,   // Quantized uint16\n  DT_UINT16 = 17,\n  DT_COMPLEX128 = 18,  // Double-precision complex\n  DT_HALF = 19,\n  DT_RESOURCE = 20,\n  DT_VARIANT = 21,  // Arbitrary C++ data types\n  DT_UINT32 = 22,\n  DT_UINT64 = 23,\n\n  // Do not use!  These are only for parameters.  Every enum above\n  // should have a corresponding value below (verified by types_test).\n  DT_FLOAT_REF = 101,\n  DT_DOUBLE_REF = 102,\n  DT_INT32_REF = 103,\n  DT_UINT8_REF = 104,\n  DT_INT16_REF = 105,\n  DT_INT8_REF = 106,\n  DT_STRING_REF = 107,\n  DT_COMPLEX64_REF = 108,\n  DT_INT64_REF = 109,\n  DT_BOOL_REF = 110,\n  DT_QINT8_REF = 111,\n  DT_QUINT8_REF = 112,\n  DT_QINT32_REF = 113,\n  DT_BFLOAT16_REF = 114,\n  DT_QINT16_REF = 115,\n  DT_QUINT16_REF = 116,\n  DT_UINT16_REF = 117,\n  DT_COMPLEX128_REF = 118,\n  DT_HALF_REF = 119,\n  DT_RESOURCE_REF = 120,\n  DT_VARIANT_REF = 121,\n  DT_UINT32_REF = 122,\n  DT_UINT64_REF = 123,\n}\n\n/** Properties of a TensorShape. */\nexport declare interface ITensorShape {\n  /** TensorShape dim */\n  dim?: (TensorShape.IDim[]|null);\n\n  /** TensorShape unknownRank */\n  unknownRank?: (boolean|null);\n}\n\nexport namespace TensorShape {\n  /** Properties of a Dim. */\n  export declare interface IDim {\n    /** Dim size */\n    size?: (number|string|null);\n\n    /** Dim name */\n    name?: (string|null);\n  }\n}\n\n/** Properties of a Tensor. */\nexport declare interface ITensor {\n  /** Tensor dtype */\n  dtype?: (DataType|null);\n\n  /** Tensor tensorShape */\n  tensorShape?: (ITensorShape|null);\n\n  /** Tensor versionNumber */\n  versionNumber?: (number|null);\n\n  /** Tensor tensorContent */\n  tensorContent?: (Uint8Array|null);\n\n  /** Tensor floatVal */\n  floatVal?: (number[]|null);\n\n  /** Tensor doubleVal */\n  doubleVal?: (number[]|null);\n\n  /** Tensor intVal */\n  intVal?: (number[]|null);\n\n  /** Tensor stringVal */\n  stringVal?: (Uint8Array[]|null);\n\n  /** Tensor scomplexVal */\n  scomplexVal?: (number[]|null);\n\n  /** Tensor int64Val */\n  int64Val?: ((number | string)[]|null);\n\n  /** Tensor boolVal */\n  boolVal?: (boolean[]|null);\n\n  /** Tensor uint32Val */\n  uint32Val?: (number[]|null);\n\n  /** Tensor uint64Val */\n  uint64Val?: ((number | string)[]|null);\n}\n\n/** Properties of an AttrValue. */\nexport declare interface IAttrValue {\n  /** AttrValue list */\n  list?: (AttrValue.IListValue|null);\n\n  /** AttrValue s */\n  s?: (string|null);\n\n  /** AttrValue i */\n  i?: (number|string|null);\n\n  /** AttrValue f */\n  f?: (number|null);\n\n  /** AttrValue b */\n  b?: (boolean|null);\n\n  /** AttrValue type */\n  type?: (DataType|null);\n\n  /** AttrValue shape */\n  shape?: (ITensorShape|null);\n\n  /** AttrValue tensor */\n  tensor?: (ITensor|null);\n\n  /** AttrValue placeholder */\n  placeholder?: (string|null);\n\n  /** AttrValue func */\n  func?: (INameAttrList|null);\n}\n\nexport namespace AttrValue {\n  /** Properties of a ListValue. */\n  export declare interface IListValue {\n    /** ListValue s */\n    s?: (string[]|null);\n\n    /** ListValue i */\n    i?: ((number | string)[]|null);\n\n    /** ListValue f */\n    f?: (number[]|null);\n\n    /** ListValue b */\n    b?: (boolean[]|null);\n\n    /** ListValue type */\n    type?: (DataType[]|null);\n\n    /** ListValue shape */\n    shape?: (ITensorShape[]|null);\n\n    /** ListValue tensor */\n    tensor?: (ITensor[]|null);\n\n    /** ListValue func */\n    func?: (INameAttrList[]|null);\n  }\n}\n\n/** Properties of a NameAttrList. */\nexport declare interface INameAttrList {\n  /** NameAttrList name */\n  name?: (string|null);\n\n  /** NameAttrList attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a NodeDef. */\nexport declare interface INodeDef {\n  /** NodeDef name */\n  name?: (string|null);\n\n  /** NodeDef op */\n  op?: (string|null);\n\n  /** NodeDef input */\n  input?: (string[]|null);\n\n  /** NodeDef device */\n  device?: (string|null);\n\n  /** NodeDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a VersionDef. */\nexport declare interface IVersionDef {\n  /** VersionDef producer */\n  producer?: (number|null);\n\n  /** VersionDef minConsumer */\n  minConsumer?: (number|null);\n\n  /** VersionDef badConsumers */\n  badConsumers?: (number[]|null);\n}\n\n/** Properties of a GraphDef. */\nexport declare interface IGraphDef {\n  /** GraphDef node */\n  node?: (INodeDef[]|null);\n\n  /** GraphDef versions */\n  versions?: (IVersionDef|null);\n\n  /** GraphDef library */\n  library?: (IFunctionDefLibrary|null);\n}\n\n/** Properties of a CollectionDef. */\nexport declare interface ICollectionDef {\n  /** CollectionDef nodeList */\n  nodeList?: (CollectionDef.INodeList|null);\n\n  /** CollectionDef bytesList */\n  bytesList?: (CollectionDef.IBytesList|null);\n\n  /** CollectionDef int64List */\n  int64List?: (CollectionDef.IInt64List|null);\n\n  /** CollectionDef floatList */\n  floatList?: (CollectionDef.IFloatList|null);\n\n  /** CollectionDef anyList */\n  anyList?: (CollectionDef.IAnyList|null);\n}\n\nexport namespace CollectionDef {\n  /** Properties of a NodeList. */\n  export declare interface INodeList {\n    /** NodeList value */\n    value?: (string[]|null);\n  }\n\n  /** Properties of a BytesList. */\n  export declare interface IBytesList {\n    /** BytesList value */\n    value?: (Uint8Array[]|null);\n  }\n\n  /** Properties of an Int64List. */\n  export declare interface IInt64List {\n    /** Int64List value */\n    value?: ((number | string)[]|null);\n  }\n\n  /** Properties of a FloatList. */\n  export declare interface IFloatList {\n    /** FloatList value */\n    value?: (number[]|null);\n  }\n\n  /** Properties of an AnyList. */\n  export declare interface IAnyList {\n    /** AnyList value */\n    value?: (IAny[]|null);\n  }\n}\n\n/** Properties of a SaverDef. */\nexport declare interface ISaverDef {\n  /** SaverDef filenameTensorName */\n  filenameTensorName?: (string|null);\n\n  /** SaverDef saveTensorName */\n  saveTensorName?: (string|null);\n\n  /** SaverDef restoreOpName */\n  restoreOpName?: (string|null);\n\n  /** SaverDef maxToKeep */\n  maxToKeep?: (number|null);\n\n  /** SaverDef sharded */\n  sharded?: (boolean|null);\n\n  /** SaverDef keepCheckpointEveryNHours */\n  keepCheckpointEveryNHours?: (number|null);\n\n  /** SaverDef version */\n  version?: (SaverDef.CheckpointFormatVersion|null);\n}\n\nexport namespace SaverDef {\n  /** CheckpointFormatVersion enum. */\n  export enum CheckpointFormatVersion {'LEGACY' = 0, 'V1' = 1, 'V2' = 2}\n}\n\n/** Properties of a TensorInfo. */\nexport declare interface ITensorInfo {\n  /** TensorInfo name */\n  name?: (string|null);\n\n  /** TensorInfo cooSparse */\n  cooSparse?: (TensorInfo.ICooSparse|null);\n\n  /** TensorInfo dtype */\n  dtype?: (DataType|string|null);\n\n  /** TensorInfo tensorShape */\n  tensorShape?: (ITensorShape|null);\n\n  /** Resource id tensor was originally assigned to.  */\n  resourceId?: (number|null);\n}\n\nexport namespace TensorInfo {\n  /** Properties of a CooSparse. */\n  export declare interface ICooSparse {\n    /** CooSparse valuesTensorName */\n    valuesTensorName?: (string|null);\n\n    /** CooSparse indicesTensorName */\n    indicesTensorName?: (string|null);\n\n    /** CooSparse denseShapeTensorName */\n    denseShapeTensorName?: (string|null);\n  }\n}\n\n/** Properties of a SignatureDef. */\nexport declare interface ISignatureDef {\n  /** SignatureDef inputs */\n  inputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef outputs */\n  outputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef methodName */\n  methodName?: (string|null);\n}\n\n/** Properties of an AssetFileDef. */\nexport declare interface IAssetFileDef {\n  /** AssetFileDef tensorInfo */\n  tensorInfo?: (ITensorInfo|null);\n\n  /** AssetFileDef filename */\n  filename?: (string|null);\n}\n\n/** Properties of an OpDef. */\nexport declare interface IOpDef {\n  /** OpDef name */\n  name?: (string|null);\n\n  /** OpDef inputArg */\n  inputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef outputArg */\n  outputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef attr */\n  attr?: (OpDef.IAttrDef[]|null);\n\n  /** OpDef deprecation */\n  deprecation?: (OpDef.IOpDeprecation|null);\n\n  /** OpDef summary */\n  summary?: (string|null);\n\n  /** OpDef description */\n  description?: (string|null);\n\n  /** OpDef isCommutative */\n  isCommutative?: (boolean|null);\n\n  /** OpDef isAggregate */\n  isAggregate?: (boolean|null);\n\n  /** OpDef isStateful */\n  isStateful?: (boolean|null);\n\n  /** OpDef allowsUninitializedInput */\n  allowsUninitializedInput?: (boolean|null);\n}\n\nexport namespace OpDef {\n  /** Properties of an ArgDef. */\n  export declare interface IArgDef {\n    /** ArgDef name */\n    name?: (string|null);\n\n    /** ArgDef description */\n    description?: (string|null);\n\n    /** ArgDef type */\n    type?: (DataType|null);\n\n    /** ArgDef typeAttr */\n    typeAttr?: (string|null);\n\n    /** ArgDef numberAttr */\n    numberAttr?: (string|null);\n\n    /** ArgDef typeListAttr */\n    typeListAttr?: (string|null);\n\n    /** ArgDef isRef */\n    isRef?: (boolean|null);\n  }\n\n  /** Properties of an AttrDef. */\n  export declare interface IAttrDef {\n    /** AttrDef name */\n    name?: (string|null);\n\n    /** AttrDef type */\n    type?: (string|null);\n\n    /** AttrDef defaultValue */\n    defaultValue?: (IAttrValue|null);\n\n    /** AttrDef description */\n    description?: (string|null);\n\n    /** AttrDef hasMinimum */\n    hasMinimum?: (boolean|null);\n\n    /** AttrDef minimum */\n    minimum?: (number|string|null);\n\n    /** AttrDef allowedValues */\n    allowedValues?: (IAttrValue|null);\n  }\n\n  /** Properties of an OpDeprecation. */\n  export declare interface IOpDeprecation {\n    /** OpDeprecation version */\n    version?: (number|null);\n\n    /** OpDeprecation explanation */\n    explanation?: (string|null);\n  }\n}\n\n/** Properties of an OpList. */\nexport declare interface IOpList {\n  /** OpList op */\n  op?: (IOpDef[]|null);\n}\n\n/** Properties of a MetaGraphDef. */\nexport declare interface IMetaGraphDef {\n  /** MetaGraphDef metaInfoDef */\n  metaInfoDef?: (MetaGraphDef.IMetaInfoDef|null);\n\n  /** MetaGraphDef graphDef */\n  graphDef?: (IGraphDef|null);\n\n  /** MetaGraphDef saverDef */\n  saverDef?: (ISaverDef|null);\n\n  /** MetaGraphDef collectionDef */\n  collectionDef?: ({[k: string]: ICollectionDef}|null);\n\n  /** MetaGraphDef signatureDef */\n  signatureDef?: ({[k: string]: ISignatureDef}|null);\n\n  /** MetaGraphDef assetFileDef */\n  assetFileDef?: (IAssetFileDef[]|null);\n}\n\nexport namespace MetaGraphDef {\n  /** Properties of a MetaInfoDef. */\n  export declare interface IMetaInfoDef {\n    /** MetaInfoDef metaGraphVersion */\n    metaGraphVersion?: (string|null);\n\n    /** MetaInfoDef strippedOpList */\n    strippedOpList?: (IOpList|null);\n\n    /** MetaInfoDef anyInfo */\n    anyInfo?: (IAny|null);\n\n    /** MetaInfoDef tags */\n    tags?: (string[]|null);\n\n    /** MetaInfoDef tensorflowVersion */\n    tensorflowVersion?: (string|null);\n\n    /** MetaInfoDef tensorflowGitVersion */\n    tensorflowGitVersion?: (string|null);\n  }\n}\n\n/** Properties of a SavedModel. */\nexport declare interface ISavedModel {\n  /** SavedModel savedModelSchemaVersion */\n  savedModelSchemaVersion?: (number|string|null);\n\n  /** SavedModel metaGraphs */\n  metaGraphs?: (IMetaGraphDef[]|null);\n}\n\n/** Properties of a FunctionDefLibrary. */\nexport declare interface IFunctionDefLibrary {\n  /** FunctionDefLibrary function */\n  'function'?: (IFunctionDef[]|null);\n\n  /** FunctionDefLibrary gradient */\n  gradient?: (IGradientDef[]|null);\n}\n\n/** Properties of a FunctionDef. */\nexport declare interface IFunctionDef {\n  /** FunctionDef signature */\n  signature?: (IOpDef|null);\n\n  /** FunctionDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n\n  /** FunctionDef nodeDef */\n  nodeDef?: (INodeDef[]|null);\n\n  /** FunctionDef ret */\n  ret?: ({[k: string]: string}|null);\n}\n\n/** Properties of a GradientDef. */\nexport declare interface IGradientDef {\n  /** GradientDef functionName */\n  functionName?: (string|null);\n\n  /** GradientDef gradientFunc */\n  gradientFunc?: (string|null);\n}\n", "\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpExecutor, OpMapper} from '../types';\n\nconst CUSTOM_OPS: {[key: string]: OpMapper} = {};\n\n/**\n * Register an Op for graph model executor. This allows you to register\n * TensorFlow custom op or override existing op.\n *\n * Here is an example of registering a new MatMul Op.\n * ```js\n * const customMatmul = (node) =>\n *    tf.matMul(\n *        node.inputs[0], node.inputs[1],\n *        node.attrs['transpose_a'], node.attrs['transpose_b']);\n *\n * tf.registerOp('MatMul', customMatmul);\n * ```\n * The inputs and attrs of the node object are based on the TensorFlow op\n * registry.\n *\n * @param name The Tensorflow Op name.\n * @param opFunc An op function which is called with the current graph node\n * during execution and needs to return a tensor or a list of tensors. The node\n * has the following attributes:\n *    - attr: A map from attribute name to its value\n *    - inputs: A list of input tensors\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function registerOp(name: string, opFunc: OpExecutor) {\n  const opMapper: OpMapper = {\n    tfOpName: name,\n    category: 'custom',\n    inputs: [],\n    attrs: [],\n    customExecutor: opFunc\n  };\n\n  CUSTOM_OPS[name] = opMapper;\n}\n\n/**\n * Retrieve the OpMapper object for the registered op.\n *\n * @param name The Tensorflow Op name.\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function getRegisteredOp(name: string): OpMapper {\n  return CUSTOM_OPS[name];\n}\n\n/**\n * Deregister the Op for graph model executor.\n *\n * @param name The Tensorflow Op name.\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function deregisterOp(name: string) {\n  delete CUSTOM_OPS[name];\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {clone, Tensor, util} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {ResourceManager} from '../../executor/resource_manager';\nimport {Node, ValueType} from '../types';\n\nexport function getParamValue(\n    paramName: string, node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext, resourceManager?: ResourceManager): ValueType {\n  const inputParam = node.inputParams[paramName];\n  if (inputParam && inputParam.inputIndexStart !== undefined) {\n    const start = inputParam.inputIndexStart;\n    const end = inputParam.inputIndexEnd === 0 ?\n        undefined :\n        (inputParam.inputIndexEnd === undefined ? start + 1 :\n                                                  inputParam.inputIndexEnd);\n    if (inputParam.type === 'tensor') {\n      return getTensor(\n          node.inputNames[inputParam.inputIndexStart], tensorMap, context,\n          resourceManager);\n    }\n    if (inputParam.type === 'tensors') {\n      const inputs = node.inputNames.slice(start, end);\n\n      return inputs.map(\n          name => getTensor(name, tensorMap, context, resourceManager));\n    }\n    const tensor = getTensor(\n        node.inputNames.slice(start)[0], tensorMap, context, resourceManager);\n    const data = tensor.dataSync();\n    return inputParam.type === 'number' ?\n        data[0] :\n        util.toNestedArray(tensor.shape, data);\n  }\n  const attrParam = node.attrParams[paramName];\n  return attrParam && attrParam.value;\n}\n\n/**\n * Retrieve the tensor from tensorsMap based on input name.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function getTensor(\n    name: string, tensorsMap: NamedTensorsMap, context: ExecutionContext,\n    resourceManager?: ResourceManager): Tensor {\n  const [nodeName, index] = parseNodeName(name);\n\n  if (resourceManager != null) {\n    const tensor = resourceManager.getHashTableHandleByName(nodeName);\n    if (tensor != null) {\n      return tensor;\n    }\n  }\n\n  const contextId = context.currentContextIds.find(contextId => {\n    return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];\n  });\n\n  return contextId !== undefined ?\n      tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] :\n      undefined;\n}\n\n/**\n * Retrieve the tensors based on input name for current context.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensorsForCurrentContenxt(\n    name: string, tensorsMap: NamedTensorsMap,\n    context: ExecutionContext): Tensor[] {\n  return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];\n}\n\n/**\n * Returns the node name, outputName and index from the Node input name.\n * @param inputName The input name of the node, in format of\n * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is\n * default to 0.\n * If the input name contains output name i.e. StringSplit:indices:0, it will\n * return ['StringSplit', 0, 'indices'].\n */\nexport function getNodeNameAndIndex(\n    inputName: string, context?: ExecutionContext): [string, number, string] {\n  const [nodeName, index, outputName] = parseNodeName(inputName);\n\n  return [\n    getNodeNameWithContextId(nodeName, context && context.currentContextId),\n    index, outputName\n  ];\n}\n\nfunction getNodeNameWithContextId(name: string, contextId?: string): string {\n  return !!contextId ? `${name}-${contextId}` : name;\n}\n\nexport function parseNodeName(name: string): [string, number, string] {\n  const parts = name.split(':');\n  if (parts.length === 1) {\n    return [name, 0, undefined];\n  }\n\n  const nodeName = parts[0];\n  const outputName = parts.length === 3 ? parts[1] : undefined;\n  const index = Number(parts[parts.length - 1]);\n  return [nodeName, index, outputName];\n}\n\nexport function split(arr: number[], size: number) {\n  const res = [];\n  for (let i = 0; i < arr.length; i += size) {\n    res.push(arr.slice(i, i + size));\n  }\n  return res;\n}\nexport function getPadding(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): ValueType {\n  let pad = getParamValue('pad', node, tensorMap, context);\n  if (pad === 'explicit') {\n    // This is 1d array, we need to convert it to 2d array\n    pad = getParamValue('explicitPaddings', node, tensorMap, context);\n    const explicitPadding: [\n      [number, number], [number, number], [number, number], [number, number]\n    ] = [[0, 0], [0, 0], [0, 0], [0, 0]];\n    for (let i = 0; i < 4; i++) {\n      explicitPadding[i][0] = (pad as number[])[i * 2];\n      explicitPadding[i][1] = (pad as number[])[i * 2 + 1];\n    }\n    return explicitPadding;\n  }\n  return pad;\n}\n\n/**\n *  Reuse the tensor if it is marked as keep, otherwise clone the tensor to\n *  avoid disposal. This is important for TensorArray and TensorList ops, since\n *  internally they use a tensor as the id for TensorArray and TensorList, and\n * to simplify lookup, they also use Tensor.id as the key to the internal map.\n * These id tensors have been marked as kept in the backend, we need avoid clone\n * them in order to create new Tensor.id.\n * @param tensor\n */\nexport function cloneTensor(tensor: Tensor): Tensor {\n  return tensor.kept ? tensor : clone(tensor);\n}\n", "\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Add',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'AddV2',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'AddN',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'end': 0,\n        'name': 'tensors',\n        'type': 'tensors'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'BiasAdd',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Sub',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'RealDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Div',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'DivNoNan',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FloorDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Mul',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Maximum',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Minimum',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Pow',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'SquaredDifference',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Mod',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FloorMod',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  }\n];\n", "\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Abs',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Acos',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Asin',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Atan',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Atan2',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'y',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Ceil',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'ClipByValue',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'clipValueMin',\n        'type': 'number'\n      },\n      {\n        'start': 2,\n        'name': 'clipValueMax',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Complex',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'real',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'imag',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'ComplexAbs',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Cos',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Cosh',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Elu',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Exp',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Floor',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Log',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Imag',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'Tout',\n        'name': 'outputType',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Neg',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Real',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'Tout',\n        'name': 'outputType',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Prelu',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'alpha',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Relu',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Relu6',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Selu',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Sigmoid',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Sin',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Sinh',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Sqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Rsqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Square',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Tan',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Tanh',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Sign',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Round',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Expm1',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Log1p',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reciprocal',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Softplus',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Asinh',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Acosh',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Atanh',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Erf',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axes',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool',\n        'notSupported': true\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LeakyRelu',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 0.2\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'IsNan',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  }\n];\n", "\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'EmptyTensorList',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'elementShape',\n        'type': 'shape'\n      },\n      {\n        'start': 1,\n        'name': 'maxNumElements',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'element_dtype',\n        'name': 'elementDType',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LoopCond',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'pred',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Switch',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'data',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'pred',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Merge',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'end': 0,\n        'name': 'tensors',\n        'type': 'tensors'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Enter',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensor',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'frame_name',\n        'name': 'frameName',\n        'type': 'string'\n      },\n      {\n        'tfName': 'is_constant',\n        'name': 'isConstant',\n        'type': 'bool'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Exit',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensor',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'NextIteration',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensor',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayV3',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'size',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'dtype',\n        'name': 'dtype',\n        'type': 'dtype'\n      },\n      {\n        'tfName': 'element_shape',\n        'name': 'elementShape',\n        'type': 'shape'\n      },\n      {\n        'tfName': 'dynamic_size',\n        'name': 'dynamicSize',\n        'type': 'bool'\n      },\n      {\n        'tfName': 'clear_after_read',\n        'name': 'clearAfterRead',\n        'type': 'bool'\n      },\n      {\n        'tfName': 'identical_element_shapes',\n        'name': 'identicalElementShapes',\n        'type': 'bool'\n      },\n      {\n        'tfName': 'tensor_array_name',\n        'name': 'name',\n        'type': 'string'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayWriteV3',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorArrayId',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'index',\n        'type': 'number'\n      },\n      {\n        'start': 2,\n        'name': 'tensor',\n        'type': 'tensor'\n      },\n      {\n        'start': 3,\n        'name': 'flowIn',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayReadV3',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorArrayId',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'index',\n        'type': 'number'\n      },\n      {\n        'start': 2,\n        'name': 'flowIn',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'dtype',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayGatherV3',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorArrayId',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'indices',\n        'type': 'number[]'\n      },\n      {\n        'start': 2,\n        'name': 'flowIn',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'dtype',\n        'name': 'dtype',\n        'type': 'dtype'\n      },\n      {\n        'tfName': 'element_shape',\n        'name': 'elementShape',\n        'type': 'shape'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayScatterV3',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorArrayId',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'indices',\n        'type': 'number[]'\n      },\n      {\n        'start': 2,\n        'name': 'tensor',\n        'type': 'tensor'\n      },\n      {\n        'start': 3,\n        'name': 'flowIn',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayConcatV3',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorArrayId',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'flowIn',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'dtype',\n        'name': 'dtype',\n        'type': 'dtype'\n      },\n      {\n        'tfName': 'element_shape_except0',\n        'name': 'elementShapeExcept0',\n        'type': 'shape',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArraySplitV3',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorArrayId',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'tensor',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'lengths',\n        'type': 'number[]'\n      },\n      {\n        'start': 3,\n        'name': 'flowIn',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArraySizeV3',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorArrayId',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'flowIn',\n        'type': 'number'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayCloseV3',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorArrayId',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'StatelessIf',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'cond',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'end': 0,\n        'name': 'args',\n        'type': 'tensors'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'then_branch',\n        'name': 'thenBranch',\n        'type': 'func'\n      },\n      {\n        'tfName': 'else_branch',\n        'name': 'elseBranch',\n        'type': 'func'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'If',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'cond',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'end': 0,\n        'name': 'args',\n        'type': 'tensors'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'then_branch',\n        'name': 'thenBranch',\n        'type': 'func'\n      },\n      {\n        'tfName': 'else_branch',\n        'name': 'elseBranch',\n        'type': 'func'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'StatelessWhile',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'end': 0,\n        'name': 'args',\n        'type': 'tensors'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'cond',\n        'name': 'cond',\n        'type': 'func'\n      },\n      {\n        'tfName': 'body',\n        'name': 'body',\n        'type': 'func'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'While',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'end': 0,\n        'name': 'args',\n        'type': 'tensors'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'cond',\n        'name': 'cond',\n        'type': 'func'\n      },\n      {\n        'tfName': 'body',\n        'name': 'body',\n        'type': 'func'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorListScatter',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensor',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'indices',\n        'type': 'number[]'\n      },\n      {\n        'start': 2,\n        'name': 'elementShape',\n        'type': 'shape'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'element_dtype',\n        'name': 'elementDType',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorListScatterV2',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensor',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'indices',\n        'type': 'number[]'\n      },\n      {\n        'start': 2,\n        'name': 'elementShape',\n        'type': 'shape'\n      },\n      {\n        'start': 3,\n        'name': 'numElements',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'element_dtype',\n        'name': 'elementDType',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorListGather',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorListId',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'indices',\n        'type': 'number[]'\n      },\n      {\n        'start': 2,\n        'name': 'elementShape',\n        'type': 'shape'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'element_dtype',\n        'name': 'elementDType',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorListGetItem',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorListId',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'index',\n        'type': 'number'\n      },\n      {\n        'start': 2,\n        'name': 'elementShape',\n        'type': 'shape'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'element_dtype',\n        'name': 'elementDType',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorListSetItem',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorListId',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'index',\n        'type': 'number'\n      },\n      {\n        'start': 2,\n        'name': 'tensor',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'element_dtype',\n        'name': 'elementDType',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorListReserve',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'elementShape',\n        'type': 'shape'\n      },\n      {\n        'start': 1,\n        'name': 'numElements',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'element_dtype',\n        'name': 'elementDType',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorListFromTensor',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensor',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'elementShape',\n        'type': 'shape'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'element_dtype',\n        'name': 'elementDType',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorListStack',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorListId',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'elementShape',\n        'type': 'shape'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'element_dtype',\n        'name': 'elementDType',\n        'type': 'dtype'\n      },\n      {\n        'tfName': 'num_elements',\n        'name': 'numElements',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorListSplit',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensor',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'elementShape',\n        'type': 'shape'\n      },\n      {\n        'start': 2,\n        'name': 'lengths',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'element_dtype',\n        'name': 'elementDType',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorListConcat',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorListId',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'element_shape',\n        'name': 'elementShape',\n        'type': 'shape'\n      },\n      {\n        'tfName': 'element_dtype',\n        'name': 'elementDType',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorListConcatV2',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorListId',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'element_shape',\n        'name': 'elementShape',\n        'type': 'shape'\n      },\n      {\n        'tfName': 'element_dtype',\n        'name': 'elementDType',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorListPopBack',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorListId',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'elementShape',\n        'type': 'shape'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'element_dtype',\n        'name': 'elementDType',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorListPushBack',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorListId',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'tensor',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'element_dtype',\n        'name': 'elementDType',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorListLength',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorListId',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorListResize',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorListId',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'size',\n        'type': 'number'\n      }\n    ]\n  }\n]\n;\n", "\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'AvgPool',\n    'category': 'convolution',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'strides',\n        'name': 'strides',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'padding',\n        'name': 'pad',\n        'type': 'string'\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {\n        'tfName': 'ksize',\n        'name': 'kernelSize',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool',\n    'category': 'convolution',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'strides',\n        'name': 'strides',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'padding',\n        'name': 'pad',\n        'type': 'string'\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {\n        'tfName': 'ksize',\n        'name': 'kernelSize',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': [],\n        'notSupported': true\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'MaxPoolWithArgmax',\n    'category': 'convolution',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'strides',\n        'name': 'strides',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'padding',\n        'name': 'pad',\n        'type': 'string'\n      },\n      {\n        'tfName': 'ksize',\n        'name': 'kernelSize',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'include_batch_in_index',\n        'name': 'includeBatchInIndex',\n        'type': 'bool'\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'AvgPool3D',\n    'category': 'convolution',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'strides',\n        'name': 'strides',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'padding',\n        'name': 'pad',\n        'type': 'string'\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {\n        'tfName': 'ksize',\n        'name': 'kernelSize',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool3D',\n    'category': 'convolution',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'strides',\n        'name': 'strides',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'padding',\n        'name': 'pad',\n        'type': 'string'\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {\n        'tfName': 'ksize',\n        'name': 'kernelSize',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv1D',\n    'category': 'convolution',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'filter',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'stride',\n        'name': 'stride',\n        'type': 'number'\n      },\n      {\n        'tfName': 'padding',\n        'name': 'pad',\n        'type': 'string'\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NWC'\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'dilation',\n        'name': 'dilation',\n        'type': 'number',\n        'defaultValue': 1\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv2D',\n    'category': 'convolution',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'filter',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'strides',\n        'name': 'strides',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'padding',\n        'name': 'pad',\n        'type': 'string'\n      },\n      {\n        'tfName': 'useCudnnOnGpu',\n        'name': 'useCudnnOnGpu',\n        'type': 'bool'\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': '_FusedConv2D',\n    'category': 'convolution',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'filter',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'end': 0,\n        'name': 'args',\n        'type': 'tensors'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'num_args',\n        'name': 'numArgs',\n        'type': 'number'\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'strides',\n        'name': 'strides',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'padding',\n        'name': 'pad',\n        'type': 'string'\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'use_cudnn_on_gpu',\n        'name': 'useCudnnOnGpu',\n        'type': 'bool',\n        'defaultValue': true\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'defaultValue': [\n          1,\n          1,\n          1,\n          1\n        ]\n      },\n      {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.0001\n      },\n      {\n        'tfName': 'leakyrelu_alpha',\n        'name': 'leakyreluAlpha',\n        'type': 'number',\n        'defaultValue': 0.2\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv2DBackpropInput',\n    'category': 'convolution',\n    'inputs': [\n      {\n        'start': 2,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'filter',\n        'type': 'tensor'\n      },\n      {\n        'start': 0,\n        'name': 'outputShape',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'strides',\n        'name': 'strides',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'padding',\n        'name': 'pad',\n        'type': 'string'\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2d',\n    'category': 'convolution',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'input',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'filter',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'strides',\n        'name': 'strides',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'padding',\n        'name': 'pad',\n        'type': 'string'\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2dNative',\n    'category': 'convolution',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'input',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'filter',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'strides',\n        'name': 'strides',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'padding',\n        'name': 'pad',\n        'type': 'string'\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedDepthwiseConv2dNative',\n    'category': 'convolution',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'filter',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'end': 0,\n        'name': 'args',\n        'type': 'tensors'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'num_args',\n        'name': 'numArgs',\n        'type': 'number'\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'strides',\n        'name': 'strides',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'padding',\n        'name': 'pad',\n        'type': 'string'\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'defaultValue': [\n          1,\n          1,\n          1,\n          1\n        ]\n      },\n      {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv3D',\n    'category': 'convolution',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'filter',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'strides',\n        'name': 'strides',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'padding',\n        'name': 'pad',\n        'type': 'string'\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Dilation2D',\n    'category': 'convolution',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'filter',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'strides',\n        'name': 'strides',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'rates',\n        'name': 'dilations',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'padding',\n        'name': 'pad',\n        'type': 'string'\n      }\n    ]\n  }\n]\n;\n", "\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Fill',\n    'category': 'creation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'shape',\n        'type': 'number[]'\n      },\n      {\n        'start': 1,\n        'name': 'value',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LinSpace',\n    'category': 'creation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'start',\n        'type': 'number'\n      },\n      {\n        'start': 1,\n        'name': 'stop',\n        'type': 'number'\n      },\n      {\n        'start': 2,\n        'name': 'num',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'OneHot',\n    'category': 'creation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'indices',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'depth',\n        'type': 'number'\n      },\n      {\n        'start': 2,\n        'name': 'onValue',\n        'type': 'number',\n        'defaultValue': 1\n      },\n      {\n        'start': 3,\n        'name': 'offValue',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'axis',\n        'name': 'axis',\n        'type': 'number',\n        'notSupported': true\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Ones',\n    'category': 'creation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'shape',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'OnesLike',\n    'category': 'creation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'dtype',\n        'name': 'dtype',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'RandomStandardNormal',\n    'category': 'creation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'shape',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'seed',\n        'name': 'seed',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {\n        'tfName': 'dtype',\n        'name': 'dtype',\n        'type': 'dtype'\n      },\n      {\n        'tfName': 'T',\n        'name': 'T',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'RandomUniform',\n    'category': 'creation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'shape',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'minval',\n        'name': 'minval',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'maxval',\n        'name': 'maxval',\n        'type': 'number',\n        'defaultValue': 1\n      },\n      {\n        'tfName': 'dtype',\n        'name': 'dtype',\n        'type': 'dtype'\n      },\n      {\n        'tfName': 'seed',\n        'name': 'seed',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {\n        'tfName': 'T',\n        'name': 'T',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Range',\n    'category': 'creation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'start',\n        'type': 'number'\n      },\n      {\n        'start': 1,\n        'name': 'stop',\n        'type': 'number'\n      },\n      {\n        'start': 2,\n        'name': 'step',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'Tidx',\n        'name': 'dtype',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TruncatedNormal',\n    'category': 'creation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'shape',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'means',\n        'name': 'mean',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'stddev',\n        'name': 'stdDev',\n        'type': 'number',\n        'defaultValue': 1\n      },\n      {\n        'tfName': 'seed',\n        'name': 'seed',\n        'type': 'number'\n      },\n      {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {\n        'tfName': 'dtype',\n        'name': 'dtype',\n        'type': 'dtype'\n      },\n      {\n        'tfName': 'T',\n        'name': 'T',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Zeros',\n    'category': 'creation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'shape',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'ZerosLike',\n    'category': 'creation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Multinomial',\n    'category': 'creation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'logits',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'numSamples',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'seed',\n        'name': 'seed',\n        'type': 'number'\n      },\n      {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number'\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype'\n      },\n      {\n        'tfName': 'output_dtype',\n        'name': 'output_dtype',\n        'type': 'dtype'\n      }\n    ]\n  }\n]\n;\n", "\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'NonMaxSuppressionV2',\n    'category': 'dynamic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'boxes',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'scores',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'maxOutputSize',\n        'type': 'number'\n      },\n      {\n        'start': 3,\n        'name': 'iouThreshold',\n        'type': 'number'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV3',\n    'category': 'dynamic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'boxes',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'scores',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'maxOutputSize',\n        'type': 'number'\n      },\n      {\n        'start': 3,\n        'name': 'iouThreshold',\n        'type': 'number'\n      },\n      {\n        'start': 4,\n        'name': 'scoreThreshold',\n        'type': 'number'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV4',\n    'category': 'dynamic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'boxes',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'scores',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'maxOutputSize',\n        'type': 'number'\n      },\n      {\n        'start': 3,\n        'name': 'iouThreshold',\n        'type': 'number'\n      },\n      {\n        'start': 4,\n        'name': 'scoreThreshold',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'T_threshold',\n        'name': 'threshold',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'pad_to_max_output_size',\n        'name': 'padToMaxOutputSize',\n        'type': 'bool'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV5',\n    'category': 'dynamic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'boxes',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'scores',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'maxOutputSize',\n        'type': 'number'\n      },\n      {\n        'start': 3,\n        'name': 'iouThreshold',\n        'type': 'number'\n      },\n      {\n        'start': 4,\n        'name': 'scoreThreshold',\n        'type': 'number'\n      },\n      {\n        'start': 5,\n        'name': 'softNmsSigma',\n        'type': 'number'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Where',\n    'category': 'dynamic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'condition',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'ListDiff',\n    'category': 'dynamic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'y',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  }\n];\n", "\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'LowerBound',\n    'category': 'evaluation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'sortedSequence',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'values',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TopKV2',\n    'category': 'evaluation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'k',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'sorted',\n        'name': 'sorted',\n        'type': 'bool'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'UpperBound',\n    'category': 'evaluation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'sortedSequence',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'values',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Unique',\n    'category': 'evaluation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'UniqueV2',\n    'category': 'evaluation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number'\n      }\n    ]\n  }\n]\n;\n", "\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'PlaceholderWithDefault',\n    'category': 'graph',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'default',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'shape',\n        'name': 'shape',\n        'type': 'shape'\n      },\n      {\n        'tfName': 'dtype',\n        'name': 'dtype',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Placeholder',\n    'category': 'graph',\n    'attrs': [\n      {\n        'tfName': 'shape',\n        'name': 'shape',\n        'type': 'shape'\n      },\n      {\n        'tfName': 'dtype',\n        'name': 'dtype',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Const',\n    'category': 'graph'\n  },\n  {\n    'tfOpName': 'Identity',\n    'category': 'graph',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'IdentityN',\n    'category': 'graph',\n    'inputs': [\n      {\n        'start': 0,\n        'end': 0,\n        'name': 'x',\n        'type': 'tensors'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Snapshot',\n    'category': 'graph',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Rank',\n    'category': 'graph',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Size',\n    'category': 'graph',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Shape',\n    'category': 'graph',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'ShapeN',\n    'category': 'graph',\n    'inputs': [\n      {\n        'start': 0,\n        'end': 0,\n        'name': 'x',\n        'type': 'tensors'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Print',\n    'category': 'graph',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'data',\n        'type': 'tensors'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'message',\n        'name': 'message',\n        'type': 'string'\n      },\n      {\n        'tfName': 'first_n',\n        'name': 'firstN',\n        'type': 'number',\n        'notSupported': true\n      },\n      {\n        'tfName': 'summarize',\n        'name': 'summarize',\n        'type': 'number',\n        'defaultValue': 3\n      }\n    ]\n  },\n  {\n    'tfOpName': 'NoOp',\n    'category': 'graph',\n    'inputs': []\n  },\n  {\n    'tfOpName': 'StopGradient',\n    'category': 'graph',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FakeQuantWithMinMaxVars',\n    'category': 'graph',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'min',\n        'name': 'min',\n        'type': 'number'\n      },\n      {\n        'tfName': 'max',\n        'name': 'max',\n        'type': 'number'\n      }\n    ]\n  }\n];\n", "\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'HashTable',\n    'category': 'hash_table',\n    'inputs': [],\n    'attrs': [\n      {\n        'tfName': 'shared_name',\n        'name': 'sharedName',\n        'type': 'string'\n      },\n      {\n        'tfName': 'use_node_name_sharing',\n        'name': 'useNodeNameSharing',\n        'type': 'bool'\n      },\n      {\n        'tfName': 'key_dtype',\n        'name': 'keyDType',\n        'type': 'dtype'\n      },\n      {\n        'tfName': 'value_dtype',\n        'name': 'valueDType',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'HashTableV2',\n    'category': 'hash_table',\n    'inputs': [],\n    'attrs': [\n      {\n        'tfName': 'shared_name',\n        'name': 'sharedName',\n        'type': 'string'\n      },\n      {\n        'tfName': 'use_node_name_sharing',\n        'name': 'useNodeNameSharing',\n        'type': 'bool'\n      },\n      {\n        'tfName': 'key_dtype',\n        'name': 'keyDType',\n        'type': 'dtype'\n      },\n      {\n        'tfName': 'value_dtype',\n        'name': 'valueDType',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableImport',\n    'category': 'hash_table',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tableHandle',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'keys',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'values',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'Tin',\n        'name': 'tIn',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'Tout',\n        'name': 'tOut',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableImportV2',\n    'category': 'hash_table',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tableHandle',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'keys',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'values',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'Tin',\n        'name': 'tIn',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'Tout',\n        'name': 'tOut',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableFind',\n    'category': 'hash_table',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tableHandle',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'keys',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'defaultValue',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'Tin',\n        'name': 'tIn',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'Tout',\n        'name': 'tOut',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableFindV2',\n    'category': 'hash_table',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tableHandle',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'keys',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'defaultValue',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'Tin',\n        'name': 'tIn',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'Tout',\n        'name': 'tOut',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableSize',\n    'category': 'hash_table',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tableHandle',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableSizeV2',\n    'category': 'hash_table',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tableHandle',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'InitializeTable',\n    'category': 'hash_table',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tableHandle',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'keys',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'values',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'InitializeTableV2',\n    'category': 'hash_table',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tableHandle',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'keys',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'values',\n        'type': 'tensor'\n      }\n    ]\n  }\n]\n;\n", "\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ResizeBilinear',\n    'category': 'image',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'images',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'size',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'align_corners',\n        'name': 'alignCorners',\n        'type': 'bool'\n      },\n      {\n        'tfName': 'half_pixel_centers',\n        'name': 'halfPixelCenters',\n        'type': 'bool'\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'ResizeNearestNeighbor',\n    'category': 'image',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'images',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'size',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'align_corners',\n        'name': 'alignCorners',\n        'type': 'bool'\n      },\n      {\n        'tfName': 'half_pixel_centers',\n        'name': 'halfPixelCenters',\n        'type': 'bool'\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'CropAndResize',\n    'category': 'image',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'image',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'boxes',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'boxInd',\n        'type': 'tensor'\n      },\n      {\n        'start': 3,\n        'name': 'cropSize',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'method',\n        'name': 'method',\n        'type': 'string'\n      },\n      {\n        'tfName': 'extrapolation_value',\n        'name': 'extrapolationValue',\n        'type': 'number'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'ImageProjectiveTransformV3',\n    'category': 'image',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'images',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'transforms',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'outputShape',\n        'type': 'number[]'\n      },\n      {\n        'start': 3,\n        'name': 'fillValue',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'interpolation',\n        'name': 'interpolation',\n        'type': 'string'\n      },\n      {\n        'tfName': 'fill_mode',\n        'name': 'fillMode',\n        'type': 'string'\n      }\n    ]\n  }\n];\n", "\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Equal',\n    'category': 'logical',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'NotEqual',\n    'category': 'logical',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Greater',\n    'category': 'logical',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'GreaterEqual',\n    'category': 'logical',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Less',\n    'category': 'logical',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LessEqual',\n    'category': 'logical',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LogicalAnd',\n    'category': 'logical',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LogicalNot',\n    'category': 'logical',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LogicalOr',\n    'category': 'logical',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Select',\n    'category': 'logical',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'condition',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'SelectV2',\n    'category': 'logical',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'condition',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  }\n];\n", "\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': '_FusedMatMul',\n    'category': 'matrices',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'end': 0,\n        'name': 'args',\n        'type': 'tensors'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'num_args',\n        'name': 'numArgs',\n        'type': 'number'\n      },\n      {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.0001\n      },\n      {\n        'tfName': 'transpose_a',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'transpose_b',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'leakyrelu_alpha',\n        'name': 'leakyreluAlpha',\n        'type': 'number',\n        'defaultValue': 0.2\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'MatMul',\n    'category': 'matrices',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'transpose_a',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'transpose_b',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMul',\n    'category': 'matrices',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'adj_x',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'adj_y',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMulV2',\n    'category': 'matrices',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'adj_x',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'adj_y',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Transpose',\n    'category': 'matrices',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'perm',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Einsum',\n    'category': 'matrices',\n    'inputs': [\n      {\n        'start': 0,\n        'end': 0,\n        'name': 'tensors',\n        'type': 'tensors'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'equation',\n        'name': 'equation',\n        'type': 'string'\n      },\n      {\n        'tfName': 'N',\n        'name': 'n',\n        'type': 'number',\n        'defaultValue': 2\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype'\n      }\n    ]\n  }\n]\n;\n", "\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'EuclideanNorm',\n    'category': 'normalization',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool',\n        'defaultValue': false\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNorm',\n    'category': 'normalization',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'scale',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'offset',\n        'type': 'tensor'\n      },\n      {\n        'start': 3,\n        'name': 'mean',\n        'type': 'tensor'\n      },\n      {\n        'start': 4,\n        'name': 'variance',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV2',\n    'category': 'normalization',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'scale',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'offset',\n        'type': 'tensor'\n      },\n      {\n        'start': 3,\n        'name': 'mean',\n        'type': 'tensor'\n      },\n      {\n        'start': 4,\n        'name': 'variance',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV3',\n    'category': 'normalization',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'scale',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'offset',\n        'type': 'tensor'\n      },\n      {\n        'start': 3,\n        'name': 'mean',\n        'type': 'tensor'\n      },\n      {\n        'start': 4,\n        'name': 'variance',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LRN',\n    'category': 'normalization',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'depth_radius',\n        'name': 'radius',\n        'type': 'number',\n        'defaultValue': 5\n      },\n      {\n        'tfName': 'bias',\n        'name': 'bias',\n        'type': 'number',\n        'defaultValue': 1\n      },\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 1\n      },\n      {\n        'tfName': 'beta',\n        'name': 'beta',\n        'type': 'number',\n        'defaultValue': 0.5\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Softmax',\n    'category': 'normalization',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LogSoftmax',\n    'category': 'normalization',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'normalization',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'sparseIndices',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'outputShape',\n        'type': 'number[]'\n      },\n      {\n        'start': 2,\n        'name': 'sparseValues',\n        'type': 'tensor'\n      },\n      {\n        'start': 3,\n        'name': 'defaultValue',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'validate_indices',\n        'name': 'validateIndices',\n        'type': 'bool',\n        'defaultValue': true,\n        'notSupported': true\n      }\n    ]\n  }\n]\n;\n", "\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Bincount',\n    'category': 'reduction',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'size',\n        'type': 'number'\n      },\n      {\n        'start': 2,\n        'name': 'weights',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'DenseBincount',\n    'category': 'reduction',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'size',\n        'type': 'number'\n      },\n      {\n        'start': 2,\n        'name': 'weights',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'binary_output',\n        'name': 'binaryOutput',\n        'type': 'bool'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Max',\n    'category': 'reduction',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Mean',\n    'category': 'reduction',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Min',\n    'category': 'reduction',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Sum',\n    'category': 'reduction',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'All',\n    'category': 'reduction',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Any',\n    'category': 'reduction',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'ArgMax',\n    'category': 'reduction',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'ArgMin',\n    'category': 'reduction',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'reduction',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Cumprod',\n    'category': 'reduction',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'exclusive',\n        'name': 'exclusive',\n        'type': 'bool'\n      },\n      {\n        'tfName': 'reverse',\n        'name': 'reverse',\n        'type': 'bool'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Cumsum',\n    'category': 'reduction',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'exclusive',\n        'name': 'exclusive',\n        'type': 'bool'\n      },\n      {\n        'tfName': 'reverse',\n        'name': 'reverse',\n        'type': 'bool'\n      }\n    ]\n  }\n]\n;\n", "\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ConcatV2',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'end': -1,\n        'name': 'tensors',\n        'type': 'tensors'\n      },\n      {\n        'start': -1,\n        'name': 'axis',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'N',\n        'name': 'n',\n        'type': 'number',\n        'defaultValue': 2\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Concat',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 1,\n        'end': 0,\n        'name': 'tensors',\n        'type': 'tensors'\n      },\n      {\n        'start': 0,\n        'name': 'axis',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'N',\n        'name': 'n',\n        'type': 'number',\n        'defaultValue': 2\n      }\n    ]\n  },\n  {\n    'tfOpName': 'GatherV2',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'indices',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'axis',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'batch_dims',\n        'name': 'batchDims',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Gather',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'indices',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'validate_indices',\n        'name': 'validateIndices',\n        'type': 'bool',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reverse',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'dims',\n        'type': 'bool[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'ReverseV2',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Slice',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'begin',\n        'type': 'number[]'\n      },\n      {\n        'start': 2,\n        'name': 'size',\n        'type': 'number[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'StridedSlice',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'begin',\n        'type': 'number[]'\n      },\n      {\n        'start': 2,\n        'name': 'end',\n        'type': 'number[]'\n      },\n      {\n        'start': 3,\n        'name': 'strides',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'begin_mask',\n        'name': 'beginMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'end_mask',\n        'name': 'endMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'new_axis_mask',\n        'name': 'newAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'ellipsis_mask',\n        'name': 'ellipsisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'shrink_axis_mask',\n        'name': 'shrinkAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Pack',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'end': 0,\n        'name': 'tensors',\n        'type': 'tensors'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'axis',\n        'name': 'axis',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Unpack',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensor',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'axis',\n        'name': 'axis',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'num',\n        'name': 'num',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Tile',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'reps',\n        'type': 'number[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Split',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'axis',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'start': 1,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'num_split',\n        'name': 'numOrSizeSplits',\n        'type': 'number',\n        'defaultValue': 1\n      }\n    ]\n  },\n  {\n    'tfOpName': 'SplitV',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'numOrSizeSplits',\n        'type': 'number[]'\n      },\n      {\n        'start': 2,\n        'name': 'axis',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'ScatterNd',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'indices',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'values',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'shape',\n        'type': 'number[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'GatherNd',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'indices',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'sparseIndices',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'outputShape',\n        'type': 'number[]'\n      },\n      {\n        'start': 2,\n        'name': 'sparseValues',\n        'type': 'tensor'\n      },\n      {\n        'start': 3,\n        'name': 'defaultValue',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'validate_indices',\n        'name': 'validateIndices',\n        'type': 'bool',\n        'defaultValue': false,\n        'notSupported': true\n      }\n    ]\n  }\n];\n", "\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'SparseFillEmptyRows',\n    'category': 'sparse',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'indices',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'values',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'denseShape',\n        'type': 'tensor'\n      },\n      {\n        'start': 3,\n        'name': 'defaultValue',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'SparseReshape',\n    'category': 'sparse',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'inputIndices',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'inputShape',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'newShape',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'SparseSegmentMean',\n    'category': 'sparse',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'data',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'indices',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'segmentIds',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'SparseSegmentSum',\n    'category': 'sparse',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'data',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'indices',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'segmentIds',\n        'type': 'tensor'\n      }\n    ]\n  }\n];\n", "\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'FFT',\n    'category': 'spectral',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'IFFT',\n    'category': 'spectral',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'RFFT',\n    'category': 'spectral',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'IRFFT',\n    'category': 'spectral',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  }\n];\n", "\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'StringNGrams',\n    'category': 'string',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'data',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'dataSplits',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'separator',\n        'name': 'separator',\n        'type': 'string'\n      },\n      {\n        'tfName': 'ngram_widths',\n        'name': 'nGramWidths',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'left_pad',\n        'name': 'leftPad',\n        'type': 'string'\n      },\n      {\n        'tfName': 'right_pad',\n        'name': 'rightPad',\n        'type': 'string'\n      },\n      {\n        'tfName': 'pad_width',\n        'name': 'padWidth',\n        'type': 'number'\n      },\n      {\n        'tfName': 'preserve_short_sequences',\n        'name': 'preserveShortSequences',\n        'type': 'bool'\n      }\n    ],\n    'outputs': [\n      'ngrams',\n      'ngrams_splits'\n    ]\n  },\n  {\n    'tfOpName': 'StringSplit',\n    'category': 'string',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'input',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'delimiter',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'skip_empty',\n        'name': 'skipEmpty',\n        'type': 'bool'\n      }\n    ],\n    'outputs': [\n      'indices',\n      'values',\n      'shape'\n    ]\n  },\n  {\n    'tfOpName': 'StringToHashBucketFast',\n    'category': 'string',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'input',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'num_buckets',\n        'name': 'numBuckets',\n        'type': 'number'\n      }\n    ]\n  }\n];\n", "\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Cast',\n    'category': 'transformation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'SrcT',\n        'name': 'sdtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'DstT',\n        'name': 'dtype',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'ExpandDims',\n    'category': 'transformation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'MirrorPad',\n    'category': 'transformation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'padding',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'mode',\n        'name': 'mode',\n        'type': 'string'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Pad',\n    'category': 'transformation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'padding',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'constant_value',\n        'name': 'constantValue',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'PadV2',\n    'category': 'transformation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'padding',\n        'type': 'number[]'\n      },\n      {\n        'start': 2,\n        'name': 'constantValue',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reshape',\n    'category': 'transformation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'shape',\n        'type': 'number[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Squeeze',\n    'category': 'transformation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'axis',\n        'tfDeprecatedName': 'squeeze_dims',\n        'name': 'axis',\n        'type': 'number[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'SpaceToBatchND',\n    'category': 'transformation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'blockShape',\n        'type': 'number[]'\n      },\n      {\n        'start': 2,\n        'name': 'paddings',\n        'type': 'number[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'BatchToSpaceND',\n    'category': 'transformation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'blockShape',\n        'type': 'number[]'\n      },\n      {\n        'start': 2,\n        'name': 'crops',\n        'type': 'number[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'DepthToSpace',\n    'category': 'transformation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'block_size',\n        'name': 'blockSize',\n        'type': 'number'\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'BroadcastTo',\n    'category': 'transformation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'shape',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': []\n  },\n  {\n    'tfOpName': 'BroadcastArgs',\n    'category': 'transformation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 's0',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 's1',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': []\n  }\n];\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, env} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\n\nimport {getRegisteredOp} from './custom_op/register';\nimport {getNodeNameAndIndex} from './executors/utils';\nimport * as arithmetic from './op_list/arithmetic';\nimport * as basicMath from './op_list/basic_math';\nimport * as control from './op_list/control';\nimport * as convolution from './op_list/convolution';\nimport * as creation from './op_list/creation';\nimport * as dynamic from './op_list/dynamic';\nimport * as evaluation from './op_list/evaluation';\nimport * as graph from './op_list/graph';\nimport * as hashTable from './op_list/hash_table';\nimport * as image from './op_list/image';\nimport * as logical from './op_list/logical';\nimport * as matrices from './op_list/matrices';\nimport * as normalization from './op_list/normalization';\nimport * as reduction from './op_list/reduction';\nimport * as sliceJoin from './op_list/slice_join';\nimport * as sparse from './op_list/sparse';\nimport * as spectral from './op_list/spectral';\nimport * as string from './op_list/string';\nimport * as transformation from './op_list/transformation';\nimport {Graph, InputParamValue, Node, OpMapper, ParamValue} from './types';\n\nexport class OperationMapper {\n  private static _instance: OperationMapper;\n\n  private opMappers: {[key: string]: OpMapper};\n\n  // Singleton instance for the mapper\n  public static get Instance() {\n    return this._instance || (this._instance = new this());\n  }\n\n  // Loads the op mapping from the JSON file.\n  private constructor() {\n    const ops = [\n      arithmetic, basicMath, control, convolution, creation, dynamic,\n      evaluation, graph, hashTable, image, logical, matrices, normalization,\n      reduction, sliceJoin, sparse, spectral, string, transformation\n    ];\n    const mappersJson: OpMapper[] = [].concat(...ops.map(op => op.json));\n\n    this.opMappers = mappersJson.reduce<{[key: string]: OpMapper}>(\n        (map, mapper: OpMapper) => {\n          map[mapper.tfOpName] = mapper;\n          return map;\n        },\n        {});\n  }\n\n  // Converts the model inference graph from Tensorflow GraphDef to local\n  // representation for TensorFlow.js API\n  transformGraph(\n      graph: tensorflow.IGraphDef,\n      signature: tensorflow.ISignatureDef = {}): Graph {\n    const tfNodes = graph.node;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    const initNodes: Node[] = [];\n    const nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n      map[node.name] = this.mapNode(node);\n      if (node.op.startsWith('Placeholder')) {\n        placeholders.push(map[node.name]);\n      } else if (node.op === 'Const') {\n        weights.push(map[node.name]);\n      } else if (node.input == null || node.input.length === 0) {\n        initNodes.push(map[node.name]);\n      }\n      return map;\n    }, {});\n\n    let inputs: Node[] = [];\n    const outputs: Node[] = [];\n    let inputNodeNameToKey: {[key: string]: string} = {};\n    let outputNodeNameToKey: {[key: string]: string} = {};\n    if (signature != null) {\n      inputNodeNameToKey = this.mapSignatureEntries(signature.inputs);\n      outputNodeNameToKey = this.mapSignatureEntries(signature.outputs);\n    }\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach((name, index) => {\n        const [nodeName, , outputName] = getNodeNameAndIndex(name);\n        const inputNode = nodes[nodeName];\n        if (inputNode.outputs != null) {\n          const outputIndex = inputNode.outputs.indexOf(outputName);\n          if (outputIndex !== -1) {\n            const inputName = `${nodeName}:${outputIndex}`;\n            // update the input name to use the mapped output index directly.\n            node.inputNames[index] = inputName;\n          }\n        }\n        node.inputs.push(inputNode);\n        inputNode.children.push(node);\n      });\n    });\n\n    // if signature has not outputs set, add any node that does not have\n    // outputs.\n    if (Object.keys(outputNodeNameToKey).length === 0) {\n      allNodes.forEach(key => {\n        const node = nodes[key];\n        if (node.children.length === 0) {\n          outputs.push(node);\n        }\n      });\n    } else {\n      Object.keys(outputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node != null) {\n          node.signatureKey = outputNodeNameToKey[name];\n          outputs.push(node);\n        }\n      });\n    }\n\n    if (Object.keys(inputNodeNameToKey).length > 0) {\n      Object.keys(inputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node) {\n          node.signatureKey = inputNodeNameToKey[name];\n          inputs.push(node);\n        }\n      });\n    } else {\n      inputs = placeholders;\n    }\n\n    let functions = {};\n    if (graph.library != null && graph.library.function != null) {\n      functions = graph.library.function.reduce((functions, func) => {\n        functions[func.signature.name] = this.mapFunction(func);\n        return functions;\n      }, {} as {[key: string]: Graph});\n    }\n\n    const result: Graph =\n        {nodes, inputs, outputs, weights, placeholders, signature, functions};\n\n    if (initNodes.length > 0) {\n      result.initNodes = initNodes;\n    }\n\n    return result;\n  }\n\n  private mapSignatureEntries(entries: {[k: string]: tensorflow.ITensorInfo}) {\n    return Object.keys(entries || {})\n        .reduce<{[key: string]: string}>((prev, curr) => {\n          prev[entries[curr].name] = curr;\n          return prev;\n        }, {});\n  }\n\n  private mapNode(node: tensorflow.INodeDef): Node {\n    // Unsupported ops will cause an error at run-time (not parse time), since\n    // they may not be used by the actual execution subgraph.\n    const mapper =\n        getRegisteredOp(node.op) || this.opMappers[node.op] || {} as OpMapper;\n    if (node.attr == null) {\n      node.attr = {};\n    }\n\n    const newNode: Node = {\n      name: node.name,\n      op: node.op,\n      category: mapper.category,\n      inputNames:\n          (node.input ||\n           []).map(input => input.startsWith('^') ? input.slice(1) : input),\n      inputs: [],\n      children: [],\n      inputParams: {},\n      attrParams: {},\n      rawAttrs: node.attr,\n      outputs: mapper.outputs\n    };\n\n    if (mapper.inputs != null) {\n      newNode.inputParams =\n          mapper.inputs.reduce<{[key: string]: InputParamValue}>(\n              (map, param) => {\n                map[param.name] = {\n                  type: param.type,\n                  inputIndexStart: param.start,\n                  inputIndexEnd: param.end\n                };\n                return map;\n              },\n              {});\n    }\n    if (mapper.attrs != null) {\n      newNode.attrParams =\n          mapper.attrs.reduce<{[key: string]: ParamValue}>((map, param) => {\n            const type = param.type;\n            let value = undefined;\n            switch (param.type) {\n              case 'string':\n                value = getStringParam(\n                    node.attr, param.tfName, param.defaultValue as string);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string);\n                }\n                break;\n              case 'string[]':\n                value = getStringArrayParam(\n                    node.attr, param.tfName, param.defaultValue as string[]);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string[]);\n                }\n                break;\n              case 'number':\n                value = getNumberParam(\n                    node.attr, param.tfName,\n                    (param.defaultValue || 0) as number);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumberParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number);\n                }\n                break;\n              case 'number[]':\n                value = getNumericArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumericArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'bool':\n                value = getBoolParam(\n                    node.attr, param.tfName, param.defaultValue as boolean);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean);\n                }\n                break;\n              case 'bool[]':\n                value = getBoolArrayParam(\n                    node.attr, param.tfName, param.defaultValue as boolean[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean[]);\n                }\n                break;\n              case 'shape':\n                value = getTensorShapeParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'shape[]':\n                value = getTensorShapeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[][]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[][]);\n                }\n                break;\n              case 'dtype':\n                value = getDtypeParam(\n                    node.attr, param.tfName, param.defaultValue as DataType);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType);\n                }\n                break;\n              case 'dtype[]':\n                value = getDtypeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as DataType[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType[]);\n                }\n                break;\n              case 'func':\n                value = getFuncParam(\n                    node.attr, param.tfName, param.defaultValue as string);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getFuncParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string);\n                }\n                break;\n              case 'tensor':\n              case 'tensors':\n                break;\n              default:\n                throw new Error(\n                    `Unsupported param type: ${param.type} for op: ${node.op}`);\n            }\n            map[param.name] = {value, type};\n            return map;\n          }, {});\n    }\n    return newNode;\n  }\n\n  // map the TFunctionDef to TFJS graph object\n  private mapFunction(functionDef: tensorflow.IFunctionDef): Graph {\n    const tfNodes = functionDef.nodeDef;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    let nodes: {[key: string]: Node} = {};\n    if (tfNodes != null) {\n      nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n        map[node.name] = this.mapNode(node);\n        if (node.op === 'Const') {\n          weights.push(map[node.name]);\n        }\n        return map;\n      }, {});\n    }\n    const inputs: Node[] = [];\n    const outputs: Node[] = [];\n\n    functionDef.signature.inputArg.forEach(arg => {\n      const [nodeName, ] = getNodeNameAndIndex(arg.name);\n      const node: Node = {\n        name: nodeName,\n        op: 'Placeholder',\n        inputs: [],\n        inputNames: [],\n        category: 'graph',\n        inputParams: {},\n        attrParams: {dtype: {value: parseDtypeParam(arg.type), type: 'dtype'}},\n        children: []\n      };\n      node.signatureKey = arg.name;\n      inputs.push(node);\n      nodes[nodeName] = node;\n    });\n\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach((name, index) => {\n        const [nodeName, , outputName] = getNodeNameAndIndex(name);\n        const inputNode = nodes[nodeName];\n        if (inputNode.outputs != null) {\n          const outputIndex = inputNode.outputs.indexOf(outputName);\n          if (outputIndex !== -1) {\n            const inputName = `${nodeName}:${outputIndex}`;\n            // update the input name to use the mapped output index directly.\n            node.inputNames[index] = inputName;\n          }\n        }\n        node.inputs.push(inputNode);\n        inputNode.children.push(node);\n      });\n    });\n\n    const returnNodeMap = functionDef.ret;\n\n    functionDef.signature.outputArg.forEach(output => {\n      const [nodeName, index] = getNodeNameAndIndex(returnNodeMap[output.name]);\n      const node = nodes[nodeName];\n      if (node != null) {\n        node.defaultOutput = index;\n        outputs.push(node);\n      }\n    });\n\n    const signature = this.mapArgsToSignature(functionDef);\n    return {nodes, inputs, outputs, weights, placeholders, signature};\n  }\n\n  private mapArgsToSignature(functionDef: tensorflow.IFunctionDef):\n      tensorflow.ISignatureDef {\n    return {\n      methodName: functionDef.signature.name,\n      inputs: functionDef.signature.inputArg.reduce(\n          (map, arg) => {\n            map[arg.name] = this.mapArgToTensorInfo(arg);\n            return map;\n          },\n          {} as {[key: string]: tensorflow.ITensorInfo}),\n      outputs: functionDef.signature.outputArg.reduce(\n          (map, arg) => {\n            map[arg.name] = this.mapArgToTensorInfo(arg, functionDef.ret);\n            return map;\n          },\n          {} as {[key: string]: tensorflow.ITensorInfo}),\n    };\n  }\n\n  private mapArgToTensorInfo(\n      arg: tensorflow.OpDef.IArgDef,\n      nameMap?: {[key: string]: string}): tensorflow.ITensorInfo {\n    let name = arg.name;\n    if (nameMap != null) {\n      name = nameMap[name];\n    }\n    return {name, dtype: arg.type};\n  }\n}\n\nexport function decodeBase64(text: string): string {\n  const global = env().global;\n  if (typeof global.atob !== 'undefined') {\n    return global.atob(text);\n  } else if (typeof Buffer !== 'undefined') {\n    return new Buffer(text, 'base64').toString();\n  } else {\n    throw new Error(\n        'Unable to decode base64 in this environment. ' +\n        'Missing built-in atob() or Buffer()');\n  }\n}\n\nexport function parseStringParam(s: []|string, keepCase: boolean): string {\n  const value =\n      Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);\n  return keepCase ? value : value.toLowerCase();\n}\n\nexport function getStringParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string,\n    keepCase = false): string {\n  const param = attrs[name];\n  if (param != null) {\n    return parseStringParam(param.s, keepCase);\n  }\n  return def;\n}\n\nexport function getBoolParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean): boolean {\n  const param = attrs[name];\n  return param ? param.b : def;\n}\n\nexport function getNumberParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number): number {\n  const param = attrs[name] || {};\n  const value =\n      param['i'] != null ? param['i'] : (param['f'] != null ? param['f'] : def);\n  return (typeof value === 'number') ? value : parseInt(value, 10);\n}\n\nexport function parseDtypeParam(value: string|tensorflow.DataType): DataType {\n  if (typeof (value) === 'string') {\n    // tslint:disable-next-line:no-any\n    value = tensorflow.DataType[value as any];\n  }\n  switch (value) {\n    case tensorflow.DataType.DT_FLOAT:\n    case tensorflow.DataType.DT_HALF:\n      return 'float32';\n    case tensorflow.DataType.DT_INT32:\n    case tensorflow.DataType.DT_INT64:\n    case tensorflow.DataType.DT_INT8:\n    case tensorflow.DataType.DT_UINT8:\n      return 'int32';\n    case tensorflow.DataType.DT_BOOL:\n      return 'bool';\n    case tensorflow.DataType.DT_DOUBLE:\n      return 'float32';\n    case tensorflow.DataType.DT_STRING:\n      return 'string';\n    default:\n      // Unknown dtype error will happen at runtime (instead of parse time),\n      // since these nodes might not be used by the actual subgraph execution.\n      return null;\n  }\n}\n\nexport function getFuncParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: string): string {\n  const param = attrs[name];\n  if (param && param.func) {\n    return param.func.name;\n  }\n  return def;\n}\n\nexport function getDtypeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType): DataType {\n  const param = attrs[name];\n  if (param && param.type) {\n    return parseDtypeParam(param.type);\n  }\n  return def;\n}\n\nexport function getDtypeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType[]): DataType[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.type) {\n    return param.list.type.map(v => parseDtypeParam(v));\n  }\n  return def;\n}\n\nexport function parseTensorShapeParam(shape: tensorflow.ITensorShape): number[]|\n    undefined {\n  if (shape.unknownRank) {\n    return undefined;\n  }\n  if (shape.dim != null) {\n    return shape.dim.map(\n        dim =>\n            (typeof dim.size === 'number') ? dim.size : parseInt(dim.size, 10));\n  }\n  return [];\n}\n\nexport function getTensorShapeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def?: number[]): number[]|undefined {\n  const param = attrs[name];\n  if (param && param.shape) {\n    return parseTensorShapeParam(param.shape);\n  }\n  return def;\n}\n\nexport function getNumericArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[]): number[] {\n  const param = attrs[name];\n  if (param) {\n    return ((param.list.f && param.list.f.length ? param.list.f :\n                                                   param.list.i) ||\n            [])\n        .map(v => (typeof v === 'number') ? v : parseInt(v, 10));\n  }\n  return def;\n}\n\nexport function getStringArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string[],\n    keepCase = false): string[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.s) {\n    return param.list.s.map((v) => {\n      return parseStringParam(v, keepCase);\n    });\n  }\n  return def;\n}\n\nexport function getTensorShapeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[][]): number[][] {\n  const param = attrs[name];\n  if (param && param.list && param.list.shape) {\n    return param.list.shape.map((v) => {\n      return parseTensorShapeParam(v);\n    });\n  }\n  return def;\n}\n\nexport function getBoolArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean[]): boolean[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.b) {\n    return param.list.b;\n  }\n  return def;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {getTensor} from '../executors/utils';\nimport {getBoolArrayParam, getBoolParam, getDtypeArrayParam, getDtypeParam, getNumberParam, getNumericArrayParam, getStringArrayParam, getStringParam, getTensorShapeArrayParam, getTensorShapeParam} from '../operation_mapper';\nimport {GraphNode, Node, ValueType} from '../types';\n\n/**\n * Helper class for lookup inputs and params for nodes in the model graph.\n */\nexport class NodeValueImpl implements GraphNode {\n  public readonly inputs: Tensor[] = [];\n  public readonly attrs: {[key: string]: ValueType} = {};\n  constructor(\n      private node: Node, private tensorMap: NamedTensorsMap,\n      private context: ExecutionContext) {\n    this.inputs = node.inputNames.map(name => this.getInput(name));\n    if (node.rawAttrs != null) {\n      this.attrs = Object.keys(node.rawAttrs)\n                       .reduce((attrs: {[key: string]: ValueType}, key) => {\n                         attrs[key] = this.getAttr(key);\n                         return attrs;\n                       }, {});\n    }\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getInput(name: string): Tensor {\n    return getTensor(name, this.tensorMap, this.context);\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getAttr(name: string, defaultValue?: ValueType): ValueType {\n    const value = this.node.rawAttrs[name];\n    if (value.tensor != null) {\n      return getTensor(name, this.tensorMap, this.context);\n    }\n    if (value.i != null || value.f != null) {\n      return getNumberParam(this.node.rawAttrs, name, defaultValue as number);\n    }\n    if (value.s != null) {\n      return getStringParam(this.node.rawAttrs, name, defaultValue as string);\n    }\n    if (value.b != null) {\n      return getBoolParam(this.node.rawAttrs, name, defaultValue as boolean);\n    }\n    if (value.shape != null) {\n      return getTensorShapeParam(\n          this.node.rawAttrs, name, defaultValue as number[]);\n    }\n    if (value.type != null) {\n      return getDtypeParam(this.node.rawAttrs, name, defaultValue as DataType);\n    }\n    if (value.list != null) {\n      if (value.list.i != null || value.list.f != null) {\n        return getNumericArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[]);\n      }\n      if (value.list.s != null) {\n        return getStringArrayParam(\n            this.node.rawAttrs, name, defaultValue as string[]);\n      }\n      if (value.list.shape != null) {\n        return getTensorShapeArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[][]);\n      }\n      if (value.list.b != null) {\n        return getBoolArrayParam(\n            this.node.rawAttrs, name, defaultValue as boolean[]);\n      }\n      if (value.list.type != null) {\n        return getDtypeArrayParam(\n            this.node.rawAttrs, name, defaultValue as DataType[]);\n      }\n    }\n\n    return defaultValue;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * This file exports ops used by the converters executors. By default it\n * re-exports all ops. In a custom build this is aliased to a file that will\n * only exports ops for a given model.json.\n */\nexport * from './ops';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext, ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'BiasAdd':\n        case 'AddV2':\n        case 'Add': {\n          return [ops.add(\n              (getParamValue('a', node, tensorMap, context) as Tensor),\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'AddN': {\n          return [ops.addN((\n              getParamValue('tensors', node, tensorMap, context) as Tensor[]))];\n        }\n        case 'FloorMod':\n        case 'Mod':\n          return [ops.mod(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        case 'Mul':\n          return [ops.mul(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        case 'RealDiv':\n        case 'Div': {\n          return [ops.div(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'DivNoNan': {\n          return [ops.divNoNan(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'FloorDiv': {\n          return [ops.floorDiv(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Sub': {\n          return [ops.sub(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Minimum': {\n          return [ops.minimum(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Maximum': {\n          return [ops.maximum(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Pow': {\n          return [ops.pow(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'SquaredDifference': {\n          return [ops.squaredDifference(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'arithmetic';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext, ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'Abs':\n        case 'ComplexAbs':\n          return [ops.abs(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Acos':\n          return [ops.acos(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Acosh':\n          return [ops.acosh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Asin':\n          return [ops.asin(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Asinh':\n          return [ops.asinh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Atan':\n          return [ops.atan(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Atan2':\n          return [ops.atan2(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('y', node, tensorMap, context) as Tensor)];\n        case 'Atanh':\n          return [ops.atanh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Ceil':\n          return [ops.ceil(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Complex':\n          return [ops.complex(\n              getParamValue('real', node, tensorMap, context) as Tensor,\n              getParamValue('imag', node, tensorMap, context) as Tensor)];\n        case 'Cos':\n          return [ops.cos(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Cosh':\n          return [ops.cosh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Elu':\n          return [ops.elu(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Erf':\n          return [ops.erf(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Exp':\n          return [ops.exp(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Expm1': {\n          return [ops.expm1(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Floor':\n          return [ops.floor(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Log':\n          return [ops.log(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Log1p': {\n          return [ops.log1p(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Imag':\n          return [ops.imag(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n\n        case 'Neg':\n          return [ops.neg(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Reciprocal': {\n          return [ops.reciprocal(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Real':\n          return [ops.real(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Relu':\n          return [ops.relu(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Round': {\n          return [ops.round(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Selu':\n          return [ops.selu(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Sigmoid':\n          return [ops.sigmoid(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Sin':\n          return [ops.sin(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Sign': {\n          return [ops.sign(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Sinh': {\n          return [ops.sinh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Softplus': {\n          return [ops.softplus(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Sqrt': {\n          return [ops.sqrt(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Square': {\n          return [ops.square(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Tanh': {\n          return [ops.tanh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Tan':\n          return [ops.tan(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'ClipByValue':\n          return [ops.clipByValue(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('clipValueMin', node, tensorMap, context) as number,\n              getParamValue('clipValueMax', node, tensorMap, context) as\n                  number)];\n        case 'Relu6':\n          return [ops.relu6(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Rsqrt':\n          return [ops.rsqrt(\n              getTensor(node.inputNames[0], tensorMap, context))];\n        case 'Prod':\n          return [ops.prod(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('axes', node, tensorMap, context) as number[])];\n        case 'LeakyRelu':\n          return [ops.leakyRelu(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('alpha', node, tensorMap, context) as number)];\n        case 'Prelu':\n          return [ops.prelu(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('alpha', node, tensorMap, context) as Tensor)];\n        case 'IsNan':\n          return [ops.isNaN(\n              getTensor(node.inputNames[0], tensorMap, context))];\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'basic_math';\n", "\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * This differs from util.assertShapesMatch in that it allows values of\n * negative one, an undefined size of a dimensinon, in a shape to match\n * anything.\n */\n\nimport {Tensor, util} from '@tensorflow/tfjs-core';\n\n/**\n * Used by TensorList and TensorArray to verify if elementShape matches, support\n * negative value as the dim shape.\n * @param shapeA\n * @param shapeB\n * @param errorMessagePrefix\n */\nexport function assertShapesMatchAllowUndefinedSize(\n    shapeA: number|number[], shapeB: number|number[],\n    errorMessagePrefix = ''): void {\n  // constant shape means unknown rank\n  if (typeof shapeA === 'number' || typeof shapeB === 'number') {\n    return;\n  }\n  util.assert(\n      shapeA.length === shapeB.length,\n      () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n  for (let i = 0; i < shapeA.length; i++) {\n    const dim0 = shapeA[i];\n    const dim1 = shapeB[i];\n    util.assert(\n        dim0 < 0 || dim1 < 0 || dim0 === dim1,\n        () =>\n            errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n  }\n}\n\nexport function fullDefinedShape(elementShape: number|number[]): boolean {\n  if (typeof elementShape === 'number' || elementShape.some(dim => dim < 0)) {\n    return false;\n  }\n  return true;\n}\n/**\n * Generate the output element shape from the list elementShape, list tensors\n * and input param.\n * @param listElementShape\n * @param tensors\n * @param elementShape\n */\nexport function inferElementShape(\n    listElementShape: number|number[], tensors: Tensor[],\n    elementShape: number|number[]): number[] {\n  let partialShape = mergeElementShape(listElementShape, elementShape);\n  const notfullDefinedShape = !fullDefinedShape(partialShape);\n  if (notfullDefinedShape && tensors.length === 0) {\n    throw new Error(\n        `Tried to calculate elements of an empty list` +\n        ` with non-fully-defined elementShape: ${partialShape}`);\n  }\n  if (notfullDefinedShape) {\n    tensors.forEach(tensor => {\n      partialShape = mergeElementShape(tensor.shape, partialShape);\n    });\n  }\n  if (!fullDefinedShape(partialShape)) {\n    throw new Error(`Non-fully-defined elementShape: ${partialShape}`);\n  }\n  return partialShape as number[];\n}\n\nexport function mergeElementShape(\n    elementShapeA: number|number[], elementShapeB: number|number[]): number|\n    number[] {\n  if (typeof elementShapeA === 'number') {\n    return elementShapeB;\n  }\n  if (typeof elementShapeB === 'number') {\n    return elementShapeA;\n  }\n\n  if (elementShapeA.length !== elementShapeB.length) {\n    throw new Error(`Incompatible ranks during merge: ${elementShapeA} vs. ${\n        elementShapeB}`);\n  }\n\n  const result: number[] = [];\n  for (let i = 0; i < elementShapeA.length; ++i) {\n    const dim0 = elementShapeA[i];\n    const dim1 = elementShapeB[i];\n    if (dim0 >= 0 && dim1 >= 0 && dim0 !== dim1) {\n      throw new Error(`Incompatible shape during merge: ${elementShapeA} vs. ${\n          elementShapeB}`);\n    }\n    result[i] = dim0 >= 0 ? dim0 : dim1;\n  }\n  return result;\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, keep, reshape, scalar, slice, stack, Tensor, tensor, tidy, unstack} from '@tensorflow/tfjs-core';\n\nimport {assertShapesMatchAllowUndefinedSize} from './tensor_utils';\n\nexport interface TensorWithState {\n  tensor?: Tensor;\n  written?: boolean;\n  read?: boolean;\n  cleared?: boolean;\n}\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\nexport class TensorArray {\n  private tensors: TensorWithState[] = [];\n  private closed_ = false;\n  readonly idTensor: Tensor;\n  constructor(\n      readonly name: string, readonly dtype: DataType, private maxSize: number,\n      private elementShape: number[], readonly identicalElementShapes: boolean,\n      readonly dynamicSize: boolean, readonly clearAfterRead: boolean) {\n    this.idTensor = scalar(0);\n    keep(this.idTensor);\n  }\n\n  get id() {\n    return this.idTensor.id;\n  }\n\n  get closed() {\n    return this.closed_;\n  }\n\n  /**\n   * Dispose the tensors and idTensor and mark the TensoryArray as closed.\n   */\n  clearAndClose(keepIds?: Set<number>) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.tensor.id)) {\n        tensor.tensor.dispose();\n      }\n    });\n    this.tensors = [];\n    this.closed_ = true;\n    this.idTensor.dispose();\n  }\n\n  size(): number {\n    return this.tensors.length;\n  }\n\n  /**\n   * Read the value at location index in the TensorArray.\n   * @param index Number the index to read from.\n   */\n  read(index: number): Tensor {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || index >= this.size()) {\n      throw new Error(`Tried to read from index ${index}, but array size is: ${\n          this.size()}`);\n    }\n\n    const tensorWithState = this.tensors[index];\n    if (tensorWithState.cleared) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not read index ${\n              index} twice because it was cleared after a previous read ` +\n          `(perhaps try setting clear_after_read = false?).`);\n    }\n\n    if (this.clearAfterRead) {\n      tensorWithState.cleared = true;\n    }\n\n    tensorWithState.read = true;\n    return tensorWithState.tensor;\n  }\n\n  /**\n   * Helper method to read multiple tensors from the specified indices.\n   */\n  readMany(indices: number[]): Tensor[] {\n    return indices.map(index => this.read(index));\n  }\n\n  /**\n   * Write value into the index of the TensorArray.\n   * @param index number the index to write to.\n   * @param tensor\n   */\n  write(index: number, tensor: Tensor) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n      throw new Error(`Tried to write to index ${\n          index}, but array is not resizeable and size is: ${this.maxSize}`);\n    }\n\n    const t = this.tensors[index] || {};\n\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray ${\n          this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${\n          tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n    }\n\n    // Set the shape for the first time write to unknow shape tensor array\n    if (this.size() === 0 &&\n        (this.elementShape == null || this.elementShape.length === 0)) {\n      this.elementShape = tensor.shape;\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape,\n        `TensorArray ${this.name}: Could not write to TensorArray index ${\n            index}.`);\n\n    if (t.read) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been read.`);\n    }\n\n    if (t.written) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been written.`);\n    }\n\n    t.tensor = tensor;\n    keep(tensor);\n    t.written = true;\n\n    this.tensors[index] = t;\n  }\n\n  /**\n   * Helper method to write multiple tensors to the specified indices.\n   */\n  writeMany(indices: number[], tensors: Tensor[]) {\n    if (indices.length !== tensors.length) {\n      throw new Error(\n          `TensorArray ${this.name}: could not write multiple tensors,` +\n          `because the index size: ${\n              indices.length} is not the same as tensors size: ${\n              tensors.length}.`);\n    }\n\n    indices.forEach((i, index) => this.write(i, tensors[index]));\n  }\n\n  /**\n   * Return selected values in the TensorArray as a packed Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size(). If not specified returns\n   *    all tensors in the original order.\n   * @param [dtype]\n   */\n  gather(indices?: number[], dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but gather requested dtype ${dtype}`);\n    }\n\n    if (!indices) {\n      indices = [];\n      for (let i = 0; i < this.size(); i++) {\n        indices.push(i);\n      }\n    } else {\n      indices = indices.slice(0, this.size());\n    }\n\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    // Read all the PersistentTensors into a vector to keep track of\n    // their memory.\n    const tensors = this.readMany(indices);\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n\n    return stack(tensors, 0);\n  }\n\n  /**\n   * Return the values in the TensorArray as a concatenated Tensor.\n   */\n  concat(dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but concat requested dtype ${dtype}`);\n    }\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    const indices = [];\n    for (let i = 0; i < this.size(); i++) {\n      indices.push(i);\n    }\n    // Collect all the tensors from the tensors array.\n    const tensors = this.readMany(indices);\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape,\n        `TensorArray shape mismatch: tensor array shape (${\n            this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n\n    return concat(tensors, 0);\n  }\n\n  /**\n   * Scatter the values of a Tensor in specific indices of a TensorArray.\n   * @param indices nummber[] values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size().\n   * @param tensor Tensor input tensor.\n   */\n  scatter(indices: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n\n    if (indices.length !== tensor.shape[0]) {\n      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n          indices.length} vs. ${tensor.shape[0]}`);\n    }\n\n    const maxIndex = Math.max(...indices);\n\n    if (!this.dynamicSize && maxIndex >= this.maxSize) {\n      throw new Error(\n          `Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n    }\n\n    this.writeMany(indices, unstack(tensor, 0));\n  }\n\n  /**\n   * Split the values of a Tensor into the TensorArray.\n   * @param length number[] with the lengths to use when splitting value along\n   *    its first dimension.\n   * @param tensor Tensor, the tensor to split.\n   */\n  split(length: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n      totalLength += len;\n      return totalLength;\n    });\n\n    if (totalLength !== tensor.shape[0]) {\n      throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n\n    if (!this.dynamicSize && length.length !== this.maxSize) {\n      throw new Error(\n          `TensorArray's size is not equal to the size of lengths (${\n              this.maxSize} vs. ${length.length}), ` +\n          'and the TensorArray is not marked as dynamically resizeable');\n    }\n\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors: Tensor[] = [];\n    tidy(() => {\n      tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n      for (let i = 0; i < length.length; ++i) {\n        const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n        const indices = [0, previousLength, 0];\n        const sizes = [1, length[i], elementPerRow];\n        tensors[i] = reshape(slice(tensor, indices, sizes), this.elementShape);\n      }\n      return tensors;\n    });\n    const indices = [];\n    for (let i = 0; i < length.length; i++) {\n      indices[i] = i;\n    }\n    this.writeMany(indices, tensors);\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, keep, reshape, scalar, slice, stack, Tensor, tensor, tidy, unstack} from '@tensorflow/tfjs-core';\n\nimport {assertShapesMatchAllowUndefinedSize, inferElementShape, mergeElementShape} from './tensor_utils';\n\n/**\n * TensorList stores a container of `tf.Tensor` objects, which are accessible\n * via tensors field.\n *\n * In order to get a copy of the underlying list, use the copy method:\n * ```\n *    TensorList b = a.copy();\n *    b.tensors().pushBack(t);  // This does not modify a.tensors().\n * ```\n *\n * Note that this is not a deep copy: the memory locations of the underlying\n * tensors will still point to the same locations of the corresponding tensors\n * in the original.\n */\n\nexport class TensorList {\n  readonly idTensor: Tensor;\n  maxNumElements: number;\n\n  get id() {\n    return this.idTensor.id;\n  }\n  /**\n   *\n   * @param tensors list of tensors\n   * @param elementShape shape of each tensor, this can be a single number (any\n   * shape is allowed) or partial shape (dim = -1).\n   * @param elementDtype data type of each tensor\n   * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1\n   *   meaning that the size of `tensors` is unbounded.\n   */\n  constructor(\n      readonly tensors: Tensor[], readonly elementShape: number|number[],\n      readonly elementDtype: DataType, maxNumElements = -1) {\n    if (tensors != null) {\n      tensors.forEach(tensor => {\n        if (elementDtype !== tensor.dtype) {\n          throw new Error(`Invalid data types; op elements ${\n              elementDtype}, but list elements ${tensor.dtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(\n            elementShape, tensor.shape, 'TensorList shape mismatch: ');\n\n        keep(tensor);\n      });\n    }\n    this.idTensor = scalar(0);\n    this.maxNumElements = maxNumElements;\n    keep(this.idTensor);\n  }\n\n  /**\n   * Get a new TensorList containing a copy of the underlying tensor container.\n   */\n  copy(): TensorList {\n    return new TensorList(\n        [...this.tensors], this.elementShape, this.elementDtype);\n  }\n\n  /**\n   * Dispose the tensors and idTensor and clear the tensor list.\n   */\n  clearAndClose(keepIds?: Set<number>) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.id)) {\n        tensor.dispose();\n      }\n    });\n    this.tensors.length = 0;\n    this.idTensor.dispose();\n  }\n  /**\n   * The size of the tensors in the tensor list.\n   */\n  size() {\n    return this.tensors.length;\n  }\n\n  /**\n   * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)\n   * tf.Tensor.\n   * @param elementShape shape of each tensor\n   * @param elementDtype data type of each tensor\n   * @param numElements the number of elements to stack\n   */\n  stack(elementShape: number[], elementDtype: DataType, numElements = -1):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (numElements !== -1 && this.tensors.length !== numElements) {\n      throw new Error(`Operation expected a list with ${\n          numElements} elements but got a list with ${\n          this.tensors.length} elements.`);\n    }\n    assertShapesMatchAllowUndefinedSize(\n        elementShape, this.elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    return tidy(() => {\n      const reshapedTensors =\n          this.tensors.map(tensor => reshape(tensor, outputElementShape));\n      return stack(reshapedTensors, 0);\n    });\n  }\n\n  /**\n   * Pop a tensor from the end of the list.\n   * @param elementShape shape of the tensor\n   * @param elementDtype data type of the tensor\n   */\n  popBack(elementShape: number[], elementDtype: DataType): Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (this.size() === 0) {\n      throw new Error('Trying to pop from an empty list.');\n    }\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    const tensor = this.tensors.pop();\n    tensor.kept = false;\n\n    assertShapesMatchAllowUndefinedSize(\n        tensor.shape, elementShape, 'TensorList shape mismatch: ');\n\n    return reshape(tensor, outputElementShape);\n  }\n\n  /**\n   * Push a tensor to the end of the list.\n   * @param tensor Tensor to be pushed.\n   */\n  pushBack(tensor: Tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        tensor.shape, this.elementShape, 'TensorList shape mismatch: ');\n\n    if (this.maxNumElements === this.size()) {\n      throw new Error(`Trying to push element into a full list.`);\n    }\n    keep(tensor);\n    this.tensors.push(tensor);\n  }\n\n  /**\n   * Update the size of the list.\n   * @param size the new size of the list.\n   */\n  resize(size: number) {\n    if (size < 0) {\n      throw new Error(\n          `TensorListResize expects size to be non-negative. Got: ${size}`);\n    }\n\n    if (this.maxNumElements !== -1 && size > this.maxNumElements) {\n      throw new Error(`TensorListResize input size ${\n          size} is greater maxNumElement ${this.maxNumElements}.`);\n    }\n\n    const destTensorList: TensorList = new TensorList(\n        [], this.elementShape, this.elementDtype, this.maxNumElements);\n    destTensorList.tensors.length = size;\n    for (let i = 0; i < Math.min(this.tensors.length, size); ++i) {\n      destTensorList.tensors[i] = this.tensors[i];\n    }\n    return destTensorList;\n  }\n\n  /**\n   * Retrieve the element at the provided index\n   * @param elementShape shape of the tensor\n   * @param elementDtype dtype of the tensor\n   * @param elementIndex index of the tensor\n   */\n  getItem(elementIndex: number, elementShape: number[], elementDtype: DataType):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (elementIndex < 0 || elementIndex > this.tensors.length) {\n      throw new Error(`Trying to access element ${\n          elementIndex} in a list with ${this.tensors.length} elements.`);\n    }\n\n    if (this.tensors[elementIndex] == null) {\n      throw new Error(`element at index ${elementIndex} is null.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.tensors[elementIndex].shape, elementShape,\n        'TensorList shape mismatch: ');\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    return reshape(this.tensors[elementIndex], outputElementShape);\n  }\n\n  /**\n   * Set the tensor at the index\n   * @param elementIndex index of the tensor\n   * @param tensor the tensor to be inserted into the list\n   */\n  setItem(elementIndex: number, tensor: Tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (elementIndex < 0 ||\n        this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {\n      throw new Error(`Trying to set element ${\n          elementIndex} in a list with max ${this.maxNumElements} elements.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape, 'TensorList shape mismatch: ');\n    keep(tensor);\n\n    // dispose the previous value if it is replacing.\n    if (this.tensors[elementIndex] != null) {\n      this.tensors[elementIndex].kept = false;\n    }\n\n    this.tensors[elementIndex] = tensor;\n  }\n\n  /**\n   * Return selected values in the TensorList as a stacked Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param indices indices of tensors to gather\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  gather(indices: number[], elementDtype: DataType, elementShape: number[]):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, elementShape, 'TensorList shape mismatch: ');\n\n    // When indices is greater than the size of the list, indices beyond the\n    // size of the list are ignored.\n    indices = indices.slice(0, this.size());\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    if (indices.length === 0) {\n      return tensor([], [0].concat(outputElementShape));\n    }\n\n    return tidy(() => {\n      const tensors =\n          indices.map(i => reshape(this.tensors[i], outputElementShape));\n      return stack(tensors, 0);\n    });\n  }\n\n  /**\n   * Return the values in the TensorList as a concatenated Tensor.\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  concat(elementDtype: DataType, elementShape: number[]): Tensor {\n    if (!!elementDtype && elementDtype !== this.elementDtype) {\n      throw new Error(`TensorList dtype is ${\n          this.elementDtype} but concat requested dtype ${elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(outputElementShape));\n    }\n    return tidy(() => {\n      const tensors = this.tensors.map(t => reshape(t, outputElementShape));\n      return concat(tensors, 0);\n    });\n  }\n}\n\n/**\n * Creates a TensorList which, when stacked, has the value of tensor.\n * @param tensor from tensor\n * @param elementShape output tensor element shape\n */\nexport function fromTensor(\n    tensor: Tensor, elementShape: number[], elementDtype: DataType) {\n  const dtype = tensor.dtype;\n  if (tensor.shape.length < 1) {\n    throw new Error(\n        `Tensor must be at least a vector, but saw shape: ${tensor.shape}`);\n  }\n  if (tensor.dtype !== elementDtype) {\n    throw new Error(`Invalid data types; op elements ${\n        tensor.dtype}, but list elements ${elementDtype}`);\n  }\n  const tensorElementShape = tensor.shape.slice(1);\n  assertShapesMatchAllowUndefinedSize(\n      tensorElementShape, elementShape, 'TensorList shape mismatch: ');\n  const tensorList: Tensor[] = unstack(tensor);\n  return new TensorList(tensorList, elementShape, dtype);\n}\n\n/**\n * Return a TensorList of the given size with empty elements.\n * @param elementShape the shape of the future elements of the list\n * @param elementDtype the desired type of elements in the list\n * @param numElements the number of elements to reserve\n * @param maxNumElements the maximum number of elements in th list\n */\nexport function reserve(\n    elementShape: number[], elementDtype: DataType, numElements: number,\n    maxNumElements: number) {\n  return new TensorList([], elementShape, elementDtype, maxNumElements);\n}\n\n/**\n * Put tensors at specific indices of a stacked tensor into a TensorList.\n * @param indices list of indices on how to scatter the tensor.\n * @param tensor input tensor.\n * @param elementShape the shape of the future elements of the list\n * @param numElements the number of elements to scatter\n */\nexport function scatter(\n    tensor: Tensor, indices: number[], elementShape: number[],\n    numElements?: number): TensorList {\n  if (indices.length !== tensor.shape[0]) {\n    throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n        indices.length} vs. ${tensor.shape[0]}`);\n  }\n\n  const maxIndex = Math.max(...indices);\n\n  if (numElements != null && numElements !== -1 && maxIndex >= numElements) {\n    throw new Error(\n        `Max index must be < array size (${maxIndex}  vs. ${numElements})`);\n  }\n\n  const list = new TensorList([], elementShape, tensor.dtype, numElements);\n  const tensors = unstack(tensor, 0);\n  indices.forEach((value, index) => {\n    list.setItem(value, tensors[index]);\n  });\n  return list;\n}\n\n/**\n * Split the values of a Tensor into a TensorList.\n * @param length the lengths to use when splitting value along\n *    its first dimension.\n * @param tensor the tensor to split.\n * @param elementShape the shape of the future elements of the list\n */\nexport function split(\n    tensor: Tensor, length: number[], elementShape: number[]) {\n  let totalLength = 0;\n  const cumulativeLengths = length.map(len => {\n    totalLength += len;\n    return totalLength;\n  });\n\n  if (totalLength !== tensor.shape[0]) {\n    throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n  }\n\n  const shapeWithoutFirstDim = tensor.shape.slice(1);\n  const outputElementShape =\n      mergeElementShape(shapeWithoutFirstDim, elementShape);\n  const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n  const tensors: Tensor[] = tidy(() => {\n    const tensors = [];\n    tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n    for (let i = 0; i < length.length; ++i) {\n      const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n      const indices = [0, previousLength, 0];\n      const sizes = [1, length[i], elementPerRow];\n      tensors[i] = reshape(\n          slice(tensor, indices, sizes), outputElementShape as number[]);\n    }\n    tensor.dispose();\n    return tensors;\n  });\n\n  const list = new TensorList([], elementShape, tensor.dtype, length.length);\n\n  for (let i = 0; i < tensors.length; i++) {\n    list.setItem(i, tensors[i]);\n  }\n  return list;\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, scalar, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {TensorArray} from '../../executor/tensor_array';\nimport {fromTensor, reserve, scatter, split} from '../../executor/tensor_list';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {cloneTensor, getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'If':\n    case 'StatelessIf': {\n      const thenFunc =\n          getParamValue('thenBranch', node, tensorMap, context) as string;\n      const elseFunc =\n          getParamValue('elseBranch', node, tensorMap, context) as string;\n      const cond = getParamValue('cond', node, tensorMap, context) as Tensor;\n      const args = getParamValue('args', node, tensorMap, context) as Tensor[];\n      const condValue = await cond.data();\n      if (condValue[0]) {\n        return context.functionMap[thenFunc].executeFunctionAsync(\n            args, context.tensorArrayMap, context.tensorListMap);\n      } else {\n        return context.functionMap[elseFunc].executeFunctionAsync(\n            args, context.tensorArrayMap, context.tensorListMap);\n      }\n    }\n    case 'While':\n    case 'StatelessWhile': {\n      const bodyFunc =\n          getParamValue('body', node, tensorMap, context) as string;\n      const condFunc =\n          getParamValue('cond', node, tensorMap, context) as string;\n      const args = getParamValue('args', node, tensorMap, context) as Tensor[];\n\n      // Calculate the condition of the loop\n      const condResult =\n          (await context.functionMap[condFunc].executeFunctionAsync(\n              args, context.tensorArrayMap, context.tensorListMap));\n      const argIds = args.map(tensor => tensor.id);\n      let condValue = await condResult[0].data();\n      // Dispose the intermediate tensors for condition function\n      condResult.forEach(tensor => {\n        if (!tensor.kept && argIds.indexOf(tensor.id) === -1) {\n          tensor.dispose();\n        }\n      });\n\n      let result: Tensor[] = args;\n\n      while (condValue[0]) {\n        // Record the previous result for intermediate tensor tracking\n        const origResult = result;\n        // Execution the body of the loop\n        result = await context.functionMap[bodyFunc].executeFunctionAsync(\n            result, context.tensorArrayMap, context.tensorListMap);\n        const resultIds = result.map(tensor => tensor.id);\n\n        // Dispose the intermediate tensor for body function that is not global\n        // kept, not input/output of the body function\n        origResult.forEach(tensor => {\n          if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n              resultIds.indexOf(tensor.id) === -1) {\n            tensor.dispose();\n          }\n        });\n\n        // Recalcuate the condition of the loop using the latest results.\n        const condResult =\n            (await context.functionMap[condFunc].executeFunctionAsync(\n                result, context.tensorArrayMap, context.tensorListMap));\n        condValue = await condResult[0].data();\n        // Dispose the intermediate tensors for condition function\n        condResult.forEach(tensor => {\n          if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n              resultIds.indexOf(tensor.id) === -1) {\n            tensor.dispose();\n          }\n        });\n      }\n      return result;\n    }\n    case 'LoopCond': {\n      const pred = getParamValue('pred', node, tensorMap, context) as Tensor;\n      return [cloneTensor(pred)];\n    }\n    case 'Switch': {\n      const pred = getParamValue('pred', node, tensorMap, context) as Tensor;\n      let data = getParamValue('data', node, tensorMap, context) as Tensor;\n      if (!data.kept) {\n        data = cloneTensor(data);\n      }\n      // Outputs nodes :0 => false, :1 => true\n      return (await pred.data())[0] ? [undefined, data] : [data, undefined];\n    }\n    case 'Merge': {\n      const inputName = node.inputNames.find(\n          name => getTensor(name, tensorMap, context) !== undefined);\n      if (inputName) {\n        const data = getTensor(inputName, tensorMap, context);\n        return [cloneTensor(data)];\n      }\n      return undefined;\n    }\n    case 'Enter': {\n      const frameId =\n          getParamValue('frameName', node, tensorMap, context) as string;\n      const data = getParamValue('tensor', node, tensorMap, context) as Tensor;\n      context.enterFrame(frameId);\n      return [cloneTensor(data)];\n    }\n    case 'Exit': {\n      const data = getParamValue('tensor', node, tensorMap, context) as Tensor;\n      context.exitFrame();\n      return [cloneTensor(data)];\n    }\n    case 'NextIteration': {\n      const data = getParamValue('tensor', node, tensorMap, context) as Tensor;\n      context.nextIteration();\n      return [cloneTensor(data)];\n    }\n    case 'TensorArrayV3': {\n      const size = getParamValue('size', node, tensorMap, context) as number;\n      const dtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const dynamicSize =\n          getParamValue('dynamicSize', node, tensorMap, context) as boolean;\n      const clearAfterRead =\n          getParamValue('clearAfterRead', node, tensorMap, context) as boolean;\n      const identicalElementShapes =\n          getParamValue('identicalElementShapes', node, tensorMap, context) as\n          boolean;\n      const name = getParamValue('name', node, tensorMap, context) as string;\n      const tensorArray = new TensorArray(\n          name, dtype, size, elementShape, identicalElementShapes, dynamicSize,\n          clearAfterRead);\n      context.addTensorArray(tensorArray);\n      return [tensorArray.idTensor, scalar(1.0)];\n    }\n    case 'TensorArrayWriteV3': {\n      const id =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const index = getParamValue('index', node, tensorMap, context) as number;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const writeTensorArray = context.getTensorArray(id.id);\n      writeTensorArray.write(index, writeTensor);\n      return [writeTensorArray.idTensor];\n    }\n    case 'TensorArrayReadV3': {\n      const readId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const readIndex =\n          getParamValue('index', node, tensorMap, context) as number;\n      const readTensorArray = context.getTensorArray(readId.id);\n      return [readTensorArray.read(readIndex)];\n    }\n    case 'TensorArrayGatherV3': {\n      const gatherId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const gatherIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const gatherDtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      const gatherTensorArray = context.getTensorArray(gatherId.id);\n      return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n    }\n    case 'TensorArrayScatterV3': {\n      const scatterId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const scatterIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const scatterTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const scatterTensorArray = context.getTensorArray(scatterId.id);\n      scatterTensorArray.scatter(scatterIndices, scatterTensor);\n      return [scatterTensorArray.idTensor];\n    }\n    case 'TensorArrayConcatV3': {\n      const concatId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const concatTensorArray = context.getTensorArray(concatId.id);\n      const concatDtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      return [concatTensorArray.concat(concatDtype)];\n    }\n    case 'TensorArraySplitV3': {\n      const splitId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const splitTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const lengths =\n          getParamValue('lengths', node, tensorMap, context) as number[];\n      const splitTensorArray = context.getTensorArray(splitId.id);\n      splitTensorArray.split(lengths, splitTensor);\n      return [splitTensorArray.idTensor];\n    }\n    case 'TensorArraySizeV3': {\n      const sizeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const sizeTensorArray = context.getTensorArray(sizeId.id);\n      return [scalar(sizeTensorArray.size(), 'int32')];\n    }\n    case 'TensorArrayCloseV3': {\n      const closeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const closeTensorArray = context.getTensorArray(closeId.id);\n      closeTensorArray.clearAndClose();\n      return [closeTensorArray.idTensor];\n    }\n    case 'TensorListSetItem': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const index = getParamValue('index', node, tensorMap, context) as number;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(idTensor.id);\n      tensorList.setItem(index, writeTensor);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListGetItem': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const readIndex =\n          getParamValue('index', node, tensorMap, context) as number;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n\n      const elementDType =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.getItem(readIndex, elementShape, elementDType)];\n    }\n    case 'TensorListScatterV2':\n    case 'TensorListScatter': {\n      const scatterIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const scatterTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const numElements =\n          getParamValue('numElements', node, tensorMap, context) as number;\n      const tensorList =\n          scatter(scatterTensor, scatterIndices, elementShape, numElements);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListReserve':\n    case 'EmptyTensorList': {\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      let numElementsParam;\n\n      if (node.op === 'TensorListReserve') {\n        numElementsParam = 'numElements';\n      } else {\n        numElementsParam = 'maxNumElements';\n      }\n\n      const numElements =\n          getParamValue(numElementsParam, node, tensorMap, context) as number;\n      const maxNumElements = node.op === 'TensorListReserve' ? -1 : numElements;\n      const tensorList =\n          reserve(elementShape, elementDtype, numElements, maxNumElements);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListGather': {\n      const gatherId =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const gatherIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = context.getTensorList(gatherId.id);\n      return [tensorList.gather(gatherIndices, elementDtype, elementShape)];\n    }\n    case 'TensorListStack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const numElements =\n          getParamValue('numElements', node, tensorMap, context) as number;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.stack(elementShape, elementDtype, numElements)];\n    }\n    case 'TensorListFromTensor': {\n      const tensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = fromTensor(tensor, elementShape, elementDtype);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListConcat':\n    case 'TensorListConcatV2': {\n      const concatId =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(concatId.id);\n      const concatDtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      return [tensorList.concat(concatDtype, elementShape)];\n    }\n    case 'TensorListPushBack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(idTensor.id);\n      tensorList.pushBack(writeTensor);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListPopBack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDType =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.popBack(elementShape, elementDType)];\n    }\n    case 'TensorListSplit': {\n      const splitTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const lengths =\n          getParamValue('lengths', node, tensorMap, context) as number[];\n\n      const tensorList = split(splitTensor, lengths, elementShape);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListLength': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [scalar(tensorList.size(), 'int32')];\n    }\n    case 'TensorListResize': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const size = getParamValue('size', node, tensorMap, context) as number;\n\n      const srcTensorList = context.getTensorList(idTensor.id);\n      const destTensorList = srcTensorList.resize(size);\n      context.addTensorList(destTensorList);\n      return [destTensorList.idTensor];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'control';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Rank, Tensor, Tensor3D, Tensor4D, Tensor5D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getPadding, getParamValue} from './utils';\n\nfunction fusedConvAndDepthWiseParams(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) {\n  const [extraOp, activationFunc] =\n      (getParamValue('fusedOps', node, tensorMap, context) as string[]);\n\n  const isBiasAdd = extraOp === 'biasadd';\n  const noBiasAdd = !isBiasAdd;\n  const isPrelu = activationFunc === 'prelu';\n  const isBatchNorm = extraOp === 'fusedbatchnorm';\n\n  const numArgs =\n      (getParamValue('numArgs', node, tensorMap, context) as number);\n  if (isBiasAdd) {\n    if (isPrelu && numArgs !== 2) {\n      throw new Error(\n          'FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu ' +\n          'must have two extra arguments: bias and alpha.');\n    }\n    if (!isPrelu && isBiasAdd && numArgs !== 1) {\n      throw new Error(\n          'FusedConv2d and DepthwiseConv2d with BiasAdd must have ' +\n          'one extra argument: bias.');\n    }\n  }\n  if (isBatchNorm) {\n    throw new Error(\n        'FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported');\n  }\n  const stride = getParamValue('strides', node, tensorMap, context) as number[];\n  const pad = getPadding(node, tensorMap, context);\n  const dataFormat =\n      (getParamValue('dataFormat', node, tensorMap, context) as string)\n          .toUpperCase();\n  const dilations =\n      getParamValue('dilations', node, tensorMap, context) as number[];\n  let [biasArg, preluArg] =\n      getParamValue('args', node, tensorMap, context) as Tensor[];\n  if (noBiasAdd) {\n    preluArg = biasArg;\n    biasArg = undefined;\n  }\n  const leakyreluAlpha =\n      getParamValue('leakyreluAlpha', node, tensorMap, context) as number;\n\n  return {\n    stride,\n    pad,\n    dataFormat,\n    dilations,\n    biasArg,\n    preluArg,\n    activationFunc,\n    leakyreluAlpha\n  };\n}\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext, ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'Conv1D': {\n          const stride =\n              getParamValue('stride', node, tensorMap, context) as number;\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilation =\n              getParamValue('dilation', node, tensorMap, context) as number;\n          return [ops.conv1d(\n              getParamValue('x', node, tensorMap, context) as Tensor3D,\n              getParamValue('filter', node, tensorMap, context) as Tensor3D,\n              stride, pad as 'valid' | 'same', dataFormat as 'NWC' | 'NCW',\n              dilation)];\n        }\n        case 'Conv2D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getPadding(node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          return [ops.conv2d(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor4D,\n              [stride[1], stride[2]], pad as 'valid' | 'same',\n              dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n        }\n        case '_FusedConv2D': {\n          const {\n            stride,\n            pad,\n            dataFormat,\n            dilations,\n            biasArg,\n            preluArg,\n            activationFunc,\n            leakyreluAlpha\n          } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n\n          return [ops.fused.conv2d({\n            x: getParamValue('x', node, tensorMap, context) as Tensor3D |\n                Tensor4D,\n            filter: getParamValue('filter', node, tensorMap, context) as\n                Tensor4D,\n            strides: [stride[1], stride[2]],\n            pad: pad as 'valid' | 'same',\n            dataFormat: dataFormat as 'NHWC' | 'NCHW',\n            dilations: [dilations[1], dilations[2]],\n            bias: biasArg,\n            activation: activationFunc as tfOps.fused.Activation,\n            preluActivationWeights: preluArg,\n            leakyreluAlpha\n          })];\n        }\n\n        case 'FusedDepthwiseConv2dNative': {\n          const {\n            stride,\n            pad,\n            dataFormat,\n            dilations,\n            biasArg,\n            preluArg,\n            activationFunc,\n            leakyreluAlpha,\n          } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n\n          return [ops.fused.depthwiseConv2d({\n            x: getParamValue('x', node, tensorMap, context) as Tensor3D |\n                Tensor4D,\n            filter: getParamValue('filter', node, tensorMap, context) as\n                Tensor4D,\n            strides: [stride[1], stride[2]],\n            pad: pad as 'valid' | 'same',\n            dataFormat: dataFormat as 'NHWC' | 'NCHW',\n            dilations: [dilations[1], dilations[2]],\n            bias: biasArg,\n            activation: activationFunc as tfOps.fused.Activation,\n            preluActivationWeights: preluArg,\n            leakyreluAlpha\n          })];\n        }\n        case 'Conv2DBackpropInput':\n        case 'Conv2dTranspose': {\n          const shape = getParamValue(\n                            'outputShape', node, tensorMap,\n                            context) as [number, number, number] |\n              [number, number, number, number];\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getPadding(node, tensorMap, context);\n          return [ops.conv2dTranspose(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor4D,\n              shape, [stride[1], stride[2]], pad as 'valid' | 'same')];\n        }\n        case 'DepthwiseConv2dNative':\n        case 'DepthwiseConv2d': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getPadding(node, tensorMap, context);\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n\n          return [ops.depthwiseConv2d(\n              getParamValue('input', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor4D,\n              [stride[1], stride[2]], pad as 'valid' | 'same',\n              dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n        }\n        case 'Conv3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          return [ops.conv3d(\n              getParamValue('x', node, tensorMap, context) as Tensor4D |\n                  Tensor<Rank.R5>,\n              getParamValue('filter', node, tensorMap, context) as\n                  Tensor<Rank.R5>,\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same',\n              dataFormat as 'NDHWC' | 'NCDHW',\n              [dilations[1], dilations[2], dilations[3]])];\n        }\n        case 'AvgPool': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [ops.avgPool(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same')];\n        }\n        case 'MaxPool': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [ops.maxPool(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same')];\n        }\n        case 'MaxPoolWithArgmax': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n          const includeBatchInIndex =\n              getParamValue('includeBatchInIndex', node, tensorMap, context) as\n              boolean;\n          const {result, indexes} = ops.maxPoolWithArgmax(\n              getParamValue('x', node, tensorMap, context) as Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same', includeBatchInIndex);\n          return [result, indexes];\n        }\n        case 'AvgPool3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [ops.avgPool3d(\n              getParamValue('x', node, tensorMap, context) as Tensor5D,\n              [kernelSize[1], kernelSize[2], kernelSize[3]],\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n        }\n\n        case 'MaxPool3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [ops.maxPool3d(\n              getParamValue('x', node, tensorMap, context) as Tensor5D,\n              [kernelSize[1], kernelSize[2], kernelSize[3]],\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n        }\n\n        case 'Dilation2D': {\n          const strides =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n\n          // strides: [1, stride_height, stride_width, 1].\n          const strideHeight = strides[1];\n          const strideWidth = strides[2];\n\n          // dilations: [1, dilation_height, dilation_width, 1].\n          const dilationHeight = dilations[1];\n          const dilationWidth = dilations[2];\n\n          return [ops.dilation2d(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor3D,\n              [strideHeight, strideWidth], pad as 'valid' | 'same',\n              [dilationHeight, dilationWidth], 'NHWC' /* dataFormat */)];\n        }\n\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'convolution';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor, Tensor1D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n     ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'Fill': {\n          const shape =\n              getParamValue('shape', node, tensorMap, context) as number[];\n          const dtype =\n              getParamValue('dtype', node, tensorMap, context) as DataType;\n          const value =\n              getParamValue('value', node, tensorMap, context) as number;\n          return [ops.fill(shape, value, dtype)];\n        }\n        case 'LinSpace': {\n          const start =\n              getParamValue('start', node, tensorMap, context) as number;\n          const stop =\n              getParamValue('stop', node, tensorMap, context) as number;\n          const num = getParamValue('num', node, tensorMap, context) as number;\n          return [ops.linspace(start, stop, num)];\n        }\n        case 'Multinomial': {\n          const logits =\n              getParamValue('logits', node, tensorMap, context) as Tensor1D;\n          const numSamples =\n              getParamValue('numSamples', node, tensorMap, context) as number;\n          const seed =\n              getParamValue('seed', node, tensorMap, context) as number;\n          return [ops.multinomial(logits, numSamples, seed)];\n        }\n        case 'OneHot': {\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor1D;\n          const depth =\n              getParamValue('depth', node, tensorMap, context) as number;\n          const onValue =\n              getParamValue('onValue', node, tensorMap, context) as number;\n          const offValue =\n              getParamValue('offValue', node, tensorMap, context) as number;\n          const dtype =\n              getParamValue('dtype', node, tensorMap, context) as DataType;\n          return [ops.oneHot(indices, depth, onValue, offValue, dtype)];\n        }\n        case 'Ones': {\n          return [ops.ones(\n              getParamValue('shape', node, tensorMap, context) as number[],\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'OnesLike': {\n          return [ops.onesLike(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'RandomStandardNormal': {\n          return [ops.randomStandardNormal(\n              getParamValue('shape', node, tensorMap, context) as number[],\n              getParamValue('dtype', node, tensorMap, context) as 'float32' |\n                  'int32',\n              getParamValue('seed', node, tensorMap, context) as number)];\n        }\n        case 'RandomUniform': {\n          return [ops.randomUniform(\n              // tslint:disable-next-line:no-any\n              getParamValue('shape', node, tensorMap, context) as any,\n              getParamValue('minval', node, tensorMap, context) as number,\n              getParamValue('maxval', node, tensorMap, context) as number,\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'Range': {\n          const start =\n              getParamValue('start', node, tensorMap, context) as number;\n          const stop =\n              getParamValue('stop', node, tensorMap, context) as number;\n          const step =\n              getParamValue('step', node, tensorMap, context) as number;\n          return [ops.range(\n              start, stop, step,\n              getParamValue('dtype', node, tensorMap, context) as 'float32' |\n                  'int32')];\n        }\n        case 'TruncatedNormal': {\n          const shape =\n              getParamValue('shape', node, tensorMap, context) as number[];\n          const mean =\n              getParamValue('mean', node, tensorMap, context) as number;\n          const stdDev =\n              getParamValue('stdDev', node, tensorMap, context) as number;\n          const seed =\n              getParamValue('seed', node, tensorMap, context) as number;\n          return [ops.truncatedNormal(\n              shape, mean, stdDev,\n              getParamValue('dtype', node, tensorMap, context) as 'float32' |\n                  'int32',\n              seed)];\n        }\n        case 'Zeros': {\n          return [ops.zeros(\n              getParamValue('shape', node, tensorMap, context) as number[],\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'ZerosLike': {\n          return [ops.zerosLike(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'creation';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D, Tensor2D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport { ResourceManager } from '../../executor/resource_manager';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nfunction nmsParams(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) {\n  const boxes = getParamValue('boxes', node, tensorMap, context) as Tensor;\n  const scores = getParamValue('scores', node, tensorMap, context) as Tensor;\n  const maxOutputSize =\n      getParamValue('maxOutputSize', node, tensorMap, context) as number;\n  const iouThreshold =\n      getParamValue('iouThreshold', node, tensorMap, context) as number;\n  const scoreThreshold =\n      getParamValue('scoreThreshold', node, tensorMap, context) as number;\n  const softNmsSigma =\n      getParamValue('softNmsSigma', node, tensorMap, context) as number;\n\n  return {\n    boxes,\n    scores,\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    softNmsSigma\n  };\n}\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext, resourceManager: ResourceManager,\n    ops = tfOps): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'NonMaxSuppressionV5': {\n      const {\n        boxes,\n        scores,\n        maxOutputSize,\n        iouThreshold,\n        scoreThreshold,\n        softNmsSigma\n      } = nmsParams(node, tensorMap, context);\n\n      const result = await ops.image.nonMaxSuppressionWithScoreAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold, softNmsSigma);\n\n      return [result.selectedIndices, result.selectedScores];\n    }\n    case 'NonMaxSuppressionV4': {\n      const {boxes, scores, maxOutputSize, iouThreshold, scoreThreshold} =\n          nmsParams(node, tensorMap, context);\n\n      const padToMaxOutputSize =\n          getParamValue('padToMaxOutputSize', node, tensorMap, context) as\n          boolean;\n\n      const result = await ops.image.nonMaxSuppressionPaddedAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold, padToMaxOutputSize);\n\n      return [result.selectedIndices, result.validOutputs];\n    }\n    case 'NonMaxSuppressionV3':\n    case 'NonMaxSuppressionV2': {\n      const {boxes, scores, maxOutputSize, iouThreshold, scoreThreshold} =\n          nmsParams(node, tensorMap, context);\n\n      return [await ops.image.nonMaxSuppressionAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold)];\n    }\n    case 'Where': {\n      const condition = ops.cast(\n          (getParamValue('condition', node, tensorMap, context) as Tensor),\n          'bool');\n      const result = [await ops.whereAsync(condition)];\n      condition.dispose();\n      return result;\n    }\n    case 'ListDiff': {\n      return ops.setdiff1dAsync(\n          getParamValue('x', node, tensorMap, context) as Tensor,\n          getParamValue('y', node, tensorMap, context) as Tensor);\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'dynamic';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n     ops = tfOps):\n        Tensor[] => {\n          switch (node.op) {\n            case 'LowerBound': {\n              const sortedSequence =\n                  getParamValue('sortedSequence', node, tensorMap, context) as\n                  Tensor;\n              const values =\n                  getParamValue('values', node, tensorMap, context) as Tensor;\n              return [ops.lowerBound(sortedSequence, values)];\n            }\n            case 'TopKV2': {\n              const x = getParamValue('x', node, tensorMap, context) as Tensor;\n              const k = getParamValue('k', node, tensorMap, context) as number;\n              const sorted =\n                  getParamValue('sorted', node, tensorMap, context) as boolean;\n              const result = ops.topk(x, k, sorted);\n              return [result.values, result.indices];\n            }\n            case 'UpperBound': {\n              const sortedSequence =\n                  getParamValue('sortedSequence', node, tensorMap, context) as\n                  Tensor;\n              const values =\n                  getParamValue('values', node, tensorMap, context) as Tensor;\n              return [ops.upperBound(sortedSequence, values)];\n            }\n            case 'Unique': {\n              const x = getParamValue('x', node, tensorMap, context) as Tensor;\n              const result = ops.unique(x);\n              return [result.values, result.indices];\n            }\n            case 'UniqueV2': {\n              const x = getParamValue('x', node, tensorMap, context) as Tensor;\n              const axis =\n                  getParamValue('axis', node, tensorMap, context) as number;\n              const result = ops.unique(x, axis);\n              return [result.values, result.indices];\n            }\n            default:\n              throw TypeError(`Node type ${node.op} is not implemented`);\n          }\n        };\n\nexport const CATEGORY = 'evaluation';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {cloneTensor, getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext, ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'Const': {\n          return tensorMap[node.name];\n        }\n        case 'PlaceholderWithDefault':\n          const def =\n              getParamValue('default', node, tensorMap, context) as Tensor;\n          return [getTensor(node.name, tensorMap, context) || def];\n        case 'Placeholder':\n          return [getTensor(node.name, tensorMap, context)];\n        case 'Identity':\n        case 'StopGradient':\n        case 'FakeQuantWithMinMaxVars': {  // This op is currently ignored.\n          const data = getParamValue('x', node, tensorMap, context) as Tensor;\n          return [cloneTensor(data)];\n        }\n        case 'IdentityN':\n          return (getParamValue('x', node, tensorMap, context) as Tensor[])\n              .map((t: Tensor) => cloneTensor(t));\n        case 'Snapshot':\n          const snapshot =\n              (getParamValue('x', node, tensorMap, context) as Tensor);\n          return [cloneTensor(snapshot)];\n        case 'Shape':\n          return [ops.tensor1d(\n              (getParamValue('x', node, tensorMap, context) as Tensor).shape,\n              'int32')];\n        case 'ShapeN':\n          return (getParamValue('x', node, tensorMap, context) as Tensor[])\n              .map((t: Tensor) => ops.tensor1d(t.shape));\n        case 'Size':\n          return [ops.scalar(\n              (getParamValue('x', node, tensorMap, context) as Tensor).size,\n              'int32')];\n        case 'Rank':\n          return [ops.scalar(\n              (getParamValue('x', node, tensorMap, context) as Tensor).rank,\n              'int32')];\n        case 'NoOp':\n          return [ops.scalar(1)];\n        case 'Print':\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          const data =\n              getParamValue('data', node, tensorMap, context) as Tensor[];\n          const message =\n              getParamValue('message', node, tensorMap, context) as string;\n          const summarize =\n              getParamValue('summarize', node, tensorMap, context) as number;\n          console.warn(\n              'The graph has a tf.print() operation,' +\n              'usually used for debugging, which slows down performance.');\n          console.log(message);\n          for (let i = 0; i < data.length; i++) {\n            console.log(Array.prototype.slice.call(data[i].dataSync())\n                            .slice(0, summarize));\n          }\n          return [input];\n\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'graph';\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {DataType, keep, scalar, stack, Tensor, tidy, unstack, util} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\n/**\n * Hashtable contains a set of tensors, which can be accessed by key.\n */\nexport class HashTable {\n  readonly handle: Tensor;\n\n  // tslint:disable-next-line: no-any\n  private tensorMap: Map<any, Tensor>;\n\n  get id() {\n    return this.handle.id;\n  }\n\n  /**\n   * Constructor of HashTable. Creates a hash table.\n   *\n   * @param keyDType `dtype` of the table keys.\n   * @param valueDType `dtype` of the table values.\n   */\n  constructor(readonly keyDType: DataType, readonly valueDType: DataType) {\n    this.handle = scalar(0);\n    // tslint:disable-next-line: no-any\n    this.tensorMap = new Map<any, Tensor>();\n\n    keep(this.handle);\n  }\n\n  /**\n   * Dispose the tensors and handle and clear the hashtable.\n   */\n  clearAndClose() {\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n    this.handle.dispose();\n  }\n\n  /**\n   * The number of items in the hash table.\n   */\n  size(): number {\n    return this.tensorMap.size;\n  }\n\n  /**\n   * The number of items in the hash table as a rank-0 tensor.\n   */\n  tensorSize(): Tensor {\n    return tfOps.scalar(this.size(), 'int32');\n  }\n\n  /**\n   * Replaces the contents of the table with the specified keys and values.\n   * @param keys Keys to store in the hashtable.\n   * @param values Values to store in the hashtable.\n   */\n  async import(keys: Tensor, values: Tensor): Promise<Tensor> {\n    this.checkKeyAndValueTensor(keys, values);\n\n    // We only store the primitive values of the keys, this allows lookup\n    // to be O(1).\n    const $keys = await keys.data();\n\n    // Clear the hashTable before inserting new values.\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n\n    return tidy(() => {\n      const $values = unstack(values);\n\n      const keysLength = $keys.length;\n      const valuesLength = $values.length;\n\n      util.assert(\n          keysLength === valuesLength,\n          () => `The number of elements doesn't match, keys has ` +\n              `${keysLength} elements, the values has ${valuesLength} ` +\n              `elements.`);\n\n      for (let i = 0; i < keysLength; i++) {\n        const key = $keys[i];\n        const value = $values[i];\n\n        keep(value);\n        this.tensorMap.set(key, value);\n      }\n\n      return this.handle;\n    });\n  }\n\n  /**\n   * Looks up keys in a hash table, outputs the corresponding values.\n   *\n   * Performs batch lookups, for every element in the key tensor, `find`\n   * stacks the corresponding value into the return tensor.\n   *\n   * If an element is not present in the table, the given `defaultValue` is\n   * used.\n   *\n   * @param keys Keys to look up. Must have the same type as the keys of the\n   *     table.\n   * @param defaultValue The scalar `defaultValue` is the value output for keys\n   *     not present in the table. It must also be of the same type as the\n   *     table values.\n   */\n  async find(keys: Tensor, defaultValue: Tensor): Promise<Tensor> {\n    this.checkKeyAndValueTensor(keys, defaultValue);\n\n    const $keys = await keys.data();\n\n    return tidy(() => {\n      const result: Tensor[] = [];\n\n      for (let i = 0; i < $keys.length; i++) {\n        const key = $keys[i];\n\n        const value = this.findWithDefault(key, defaultValue);\n        result.push(value);\n      }\n\n      return stack(result);\n    });\n  }\n\n  // tslint:disable-next-line: no-any\n  private findWithDefault(key: any, defaultValue: Tensor): Tensor {\n    const result = this.tensorMap.get(key);\n\n    return result != null ? result : defaultValue;\n  }\n\n  private checkKeyAndValueTensor(key: Tensor, value: Tensor) {\n    if (key.dtype !== this.keyDType) {\n      throw new Error(\n          `Expect key dtype ${this.keyDType}, but got ` +\n          `${key.dtype}`);\n    }\n\n    if (value.dtype !== this.valueDType) {\n      throw new Error(\n          `Expect value dtype ${this.valueDType}, but got ` +\n          `${value.dtype}`);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {HashTable} from '../../executor/hash_table';\nimport {ResourceManager} from '../../executor/resource_manager';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n    resourceManager: ResourceManager): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'HashTable':\n    case 'HashTableV2': {\n      const existingTableHandle =\n          resourceManager.getHashTableHandleByName(node.name);\n      // Table is shared with initializer.\n      if (existingTableHandle != null) {\n        return [existingTableHandle];\n      } else {\n        const keyDType =\n            getParamValue('keyDType', node, tensorMap, context) as DataType;\n        const valueDType =\n            getParamValue('valueDType', node, tensorMap, context) as DataType;\n\n        const hashTable = new HashTable(keyDType, valueDType);\n        resourceManager.addHashTable(node.name, hashTable);\n        return [hashTable.handle];\n      }\n    }\n    case 'InitializeTable':\n    case 'InitializeTableV2':\n    case 'LookupTableImport':\n    case 'LookupTableImportV2': {\n      const handle = getParamValue(\n                         'tableHandle', node, tensorMap, context,\n                         resourceManager) as Tensor;\n      const keys = getParamValue('keys', node, tensorMap, context) as Tensor;\n      const values =\n          getParamValue('values', node, tensorMap, context) as Tensor;\n\n      const hashTable = resourceManager.getHashTableById(handle.id);\n\n      return [await hashTable.import(keys, values)];\n    }\n    case 'LookupTableFind':\n    case 'LookupTableFindV2': {\n      const handle = getParamValue(\n                         'tableHandle', node, tensorMap, context,\n                         resourceManager) as Tensor;\n      const keys = getParamValue('keys', node, tensorMap, context) as Tensor;\n      const defaultValue =\n          getParamValue('defaultValue', node, tensorMap, context) as Tensor;\n\n      const hashTable = resourceManager.getHashTableById(handle.id);\n      return [await hashTable.find(keys, defaultValue)];\n    }\n    case 'LookupTableSize':\n    case 'LookupTableSizeV2': {\n      const handle = getParamValue(\n                         'tableHandle', node, tensorMap, context,\n                         resourceManager) as Tensor;\n\n      const hashTable = resourceManager.getHashTableById(handle.id);\n      return [hashTable.tensorSize()];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'hash_table';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext, ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'ResizeBilinear': {\n          const images =\n              getParamValue('images', node, tensorMap, context) as Tensor;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number[];\n          const alignCorners =\n              getParamValue('alignCorners', node, tensorMap, context) as\n              boolean;\n          const halfPixelCenters =\n              getParamValue('halfPixelCenters', node, tensorMap, context) as\n              boolean;\n          return [ops.image.resizeBilinear(\n              images as Tensor3D | Tensor4D, [size[0], size[1]], alignCorners,\n              halfPixelCenters)];\n        }\n        case 'ResizeNearestNeighbor': {\n          const images =\n              getParamValue('images', node, tensorMap, context) as Tensor;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number[];\n          const alignCorners =\n              getParamValue('alignCorners', node, tensorMap, context) as\n              boolean;\n          const halfPixelCenters =\n              getParamValue('halfPixelCenters', node, tensorMap, context) as\n              boolean;\n          return [ops.image.resizeNearestNeighbor(\n              images as Tensor3D | Tensor4D, [size[0], size[1]], alignCorners,\n              halfPixelCenters)];\n        }\n        case 'CropAndResize': {\n          const image =\n              getParamValue('image', node, tensorMap, context) as Tensor;\n          const boxes =\n              getParamValue('boxes', node, tensorMap, context) as Tensor;\n          const boxInd =\n              getParamValue('boxInd', node, tensorMap, context) as Tensor;\n          const cropSize =\n              getParamValue('cropSize', node, tensorMap, context) as number[];\n          const method =\n              getParamValue('method', node, tensorMap, context) as string;\n          const extrapolationValue =\n              getParamValue('extrapolationValue', node, tensorMap, context) as\n              number;\n          return [ops.image.cropAndResize(\n              image as Tensor4D, boxes as Tensor2D, boxInd as Tensor1D,\n              cropSize as [number, number], method as 'bilinear' | 'nearest',\n              extrapolationValue)];\n        }\n        case 'ImageProjectiveTransformV3': {\n          const images =\n              getParamValue('images', node, tensorMap, context) as Tensor;\n          const transforms =\n              getParamValue('transforms', node, tensorMap, context) as Tensor;\n          const outputShape =\n              getParamValue('outputShape', node, tensorMap, context) as\n              number[];\n          const fillValue =\n              getParamValue('fillValue', node, tensorMap, context) as number;\n          const interpolation =\n              getParamValue('interpolation', node, tensorMap, context) as\n              string;\n          const fillMode =\n              getParamValue('fillMode', node, tensorMap, context) as string;\n          return [ops.image.transform(\n              images as Tensor4D,\n              transforms as Tensor2D,\n              interpolation.toLowerCase() as 'bilinear' | 'nearest',\n              fillMode.toLowerCase() as 'constant' | 'reflect' | 'wrap' | 'nearest',\n              fillValue,\n              outputShape as [number, number])];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'image';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext, ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'Equal': {\n          return [ops.equal(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'NotEqual': {\n          return [ops.notEqual(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Greater': {\n          return [ops.greater(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'GreaterEqual': {\n          return [ops.greaterEqual(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Less': {\n          return [ops.less(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'LessEqual': {\n          return [ops.lessEqual(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogicalAnd': {\n          return [ops.logicalAnd(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogicalNot': {\n          return [ops.logicalNot(\n              getParamValue('a', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogicalOr': {\n          return [ops.logicalOr(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Select':\n        case 'SelectV2': {\n          return [ops.where(\n              getParamValue('condition', node, tensorMap, context) as Tensor,\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'logical';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor2D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext, ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'BatchMatMul':\n        case 'BatchMatMulV2':\n        case 'MatMul':\n          return [ops.matMul(\n              getParamValue('a', node, tensorMap, context) as Tensor2D,\n              getParamValue('b', node, tensorMap, context) as Tensor2D,\n              getParamValue('transposeA', node, tensorMap, context) as boolean,\n              getParamValue('transposeB', node, tensorMap, context) as\n                  boolean)];\n\n        case 'Einsum':\n          return [ops.einsum(\n              getParamValue('equation', node, tensorMap, context) as string,\n              ...getParamValue('tensors', node, tensorMap, context) as\n                  Tensor[])];\n\n        case 'Transpose':\n          return [ops.transpose(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('perm', node, tensorMap, context) as number[])];\n\n        case '_FusedMatMul':\n          const [extraOp, activationFunc] =\n              (getParamValue('fusedOps', node, tensorMap, context) as string[]);\n\n          const isBiasAdd = extraOp === 'biasadd';\n          const isPrelu = activationFunc === 'prelu';\n\n          const numArgs =\n              (getParamValue('numArgs', node, tensorMap, context) as number);\n          const leakyreluAlpha =\n              getParamValue('leakyreluAlpha', node, tensorMap, context) as\n              number;\n\n          if (isBiasAdd) {\n            if (isPrelu && numArgs !== 2) {\n              throw new Error(\n                  'Fused MatMul with BiasAdd and Prelu must have two ' +\n                  'extra arguments: bias and alpha.');\n            }\n            if (!isPrelu && numArgs !== 1) {\n              throw new Error(\n                  'Fused MatMul with BiasAdd must have one extra argument: bias.');\n            }\n          }\n          const [biasArg, preluArg] =\n              getParamValue('args', node, tensorMap, context) as Tensor[];\n          return [ops.fused.matMul({\n            a: getParamValue('a', node, tensorMap, context) as Tensor2D,\n            b: getParamValue('b', node, tensorMap, context) as Tensor2D,\n            transposeA: getParamValue('transposeA', node, tensorMap, context) as\n                boolean,\n            transposeB: getParamValue('transposeB', node, tensorMap, context) as\n                boolean,\n            bias: biasArg,\n            activation: activationFunc as tfOps.fused.Activation,\n            preluActivationWeights: preluArg,\n            leakyreluAlpha\n          })];\n\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'matrices';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor, Tensor3D, Tensor4D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext, ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'EuclideanNorm':\n          return [ops.euclideanNorm(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('axis', node, tensorMap, context) as number[],\n              getParamValue('keepDims', node, tensorMap, context) as boolean)];\n        case 'FusedBatchNorm':\n        case 'FusedBatchNormV2': {\n          return [ops.batchNorm(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('mean', node, tensorMap, context) as Tensor,\n              getParamValue('variance', node, tensorMap, context) as Tensor,\n              getParamValue('offset', node, tensorMap, context) as Tensor,\n              getParamValue('scale', node, tensorMap, context) as Tensor,\n              getParamValue('epsilon', node, tensorMap, context) as number)];\n        }\n        case 'FusedBatchNormV3': {\n          return [ops.batchNorm(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('mean', node, tensorMap, context) as Tensor,\n              getParamValue('variance', node, tensorMap, context) as Tensor,\n              getParamValue('offset', node, tensorMap, context) as Tensor,\n              getParamValue('scale', node, tensorMap, context) as Tensor,\n              getParamValue('epsilon', node, tensorMap, context) as number)];\n        }\n        case 'LRN': {\n          return [ops.localResponseNormalization(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('radius', node, tensorMap, context) as number,\n              getParamValue('bias', node, tensorMap, context) as number,\n              getParamValue('alpha', node, tensorMap, context) as number,\n              getParamValue('beta', node, tensorMap, context) as number)];\n        }\n        case 'Softmax': {\n          return [ops.softmax(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogSoftmax': {\n          return [ops.logSoftmax(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'SparseToDense': {\n          return [ops.sparseToDense(\n              getParamValue('sparseIndices', node, tensorMap, context) as\n                  Tensor,\n              getParamValue('outputShape', node, tensorMap, context) as Tensor,\n              getParamValue('sparseValues', node, tensorMap, context) as\n                  number[],\n              getParamValue('defaultValue', node, tensorMap, context) as\n                  Scalar)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'normalization';\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n     ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'RaggedGather': {\n          const {\n            outputNestedSplits,\n            outputDenseValues,\n          } =\n              ops.raggedGather(\n                  getParamValue(\n                      'paramsNestedSplits', node, tensorMap, context) as\n                      Tensor[],\n                  getParamValue(\n                      'paramsDenseValues', node, tensorMap, context) as Tensor,\n                  getParamValue('indices', node, tensorMap, context) as Tensor,\n                  getParamValue('outputRaggedRank', node, tensorMap, context) as\n                      number);\n          return outputNestedSplits.concat(outputDenseValues);\n        }\n        case 'RaggedRange': {\n          const {rtNestedSplits, rtDenseValues} = ops.raggedRange(\n              getParamValue('starts', node, tensorMap, context) as Tensor,\n              getParamValue('limits', node, tensorMap, context) as Tensor,\n              getParamValue('splits', node, tensorMap, context) as Tensor);\n          return [rtNestedSplits, rtDenseValues];\n        }\n        case 'RaggedTensorToTensor': {\n          return [ops.raggedTensorToTensor(\n              getParamValue('shape', node, tensorMap, context) as Tensor,\n              getParamValue('values', node, tensorMap, context) as Tensor1D,\n              getParamValue('defaultValue', node, tensorMap, context) as Tensor,\n              getParamValue('rowPartitionTensors', node, tensorMap, context) as\n                  Tensor[],\n              getParamValue('rowPartitionTypes', node, tensorMap, context) as\n                  string[])];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'ragged';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D, Tensor2D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext, ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'Max': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [ops.max(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Mean': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [ops.mean(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Min': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [ops.min(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Sum': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [ops.sum(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'All': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [ops.all(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Any': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [ops.any(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'ArgMax': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          return [ops.argMax(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n        case 'ArgMin': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          return [ops.argMin(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n        case 'Prod': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [ops.prod(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Cumprod': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const exclusive =\n              getParamValue('exclusive', node, tensorMap, context) as boolean;\n          const reverse =\n              getParamValue('reverse', node, tensorMap, context) as boolean;\n          return [ops.cumprod(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              exclusive, reverse)];\n        }\n        case 'Cumsum': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const exclusive =\n              getParamValue('exclusive', node, tensorMap, context) as boolean;\n          const reverse =\n              getParamValue('reverse', node, tensorMap, context) as boolean;\n          return [ops.cumsum(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              exclusive, reverse)];\n        }\n        case 'Bincount':\n          const x = getParamValue('x', node, tensorMap, context) as Tensor1D;\n          const weights =\n              getParamValue('weights', node, tensorMap, context) as Tensor1D;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number;\n\n          return [ops.bincount(x, weights, size)];\n        case 'DenseBincount': {\n          const x = getParamValue('x', node, tensorMap, context) as Tensor1D |\n              Tensor2D;\n          const weights =\n              getParamValue('weights', node, tensorMap, context) as Tensor1D |\n              Tensor2D;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number;\n\n          const binaryOutput =\n              getParamValue('binaryOutput', node, tensorMap, context) as\n              boolean;\n\n          return [ops.denseBincount(x, weights, size, binaryOutput)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'reduction';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor, Tensor1D, tidy, util} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext, ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'ConcatV2':\n        case 'Concat': {\n          const n = getParamValue('n', node, tensorMap, context) as number;\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          let inputs =\n              getParamValue('tensors', node, tensorMap, context) as Tensor[];\n          inputs = inputs.slice(0, n);\n          return [ops.concat(inputs, axis)];\n        }\n        case 'Gather': {\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor1D;\n          return [ops.gather(input, ops.cast(indices, 'int32'), 0)];\n        }\n        case 'GatherV2': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const batchDims =\n              getParamValue('batchDims', node, tensorMap, context) as number;\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor1D;\n          return [ops.gather(\n              input, ops.cast(indices, 'int32'), axis, batchDims)];\n        }\n        case 'Reverse': {\n          const dims =\n              getParamValue('dims', node, tensorMap, context) as boolean[];\n          const axis = [];\n          for (let i = 0; i < dims.length; i++) {\n            if (dims[i]) {\n              axis.push(i);\n            }\n          }\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          return [ops.reverse(input, axis)];\n        }\n        case 'ReverseV2': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          return [ops.reverse(input, axis)];\n        }\n        case 'Slice': {\n          // tslint:disable-next-line:no-any\n          const begin = getParamValue('begin', node, tensorMap, context) as any;\n          // tslint:disable-next-line:no-any\n          const size = getParamValue('size', node, tensorMap, context) as any;\n          return [ops.slice(\n              getParamValue('x', node, tensorMap, context) as Tensor, begin,\n              size)];\n        }\n        case 'StridedSlice': {\n          const begin =\n              getParamValue('begin', node, tensorMap, context) as number[];\n          const end =\n              getParamValue('end', node, tensorMap, context) as number[];\n          const strides =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const beginMask =\n              getParamValue('beginMask', node, tensorMap, context) as number;\n          const endMask =\n              getParamValue('endMask', node, tensorMap, context) as number;\n          const ellipsisMask =\n              getParamValue('ellipsisMask', node, tensorMap, context) as number;\n          const newAxisMask =\n              getParamValue('newAxisMask', node, tensorMap, context) as number;\n          const shrinkAxisMask =\n              getParamValue('shrinkAxisMask', node, tensorMap, context) as\n              number;\n          const tensor = getParamValue('x', node, tensorMap, context) as Tensor;\n\n          return [ops.stridedSlice(\n              tensor, begin, end, strides, beginMask, endMask, ellipsisMask,\n              newAxisMask, shrinkAxisMask)];\n        }\n        case 'Pack': {\n          return tidy(() => {\n            const axis =\n                getParamValue('axis', node, tensorMap, context) as number;\n            const tensors =\n                getParamValue('tensors', node, tensorMap, context) as Tensor[];\n            // Reshape the tensors to the first tensor's shape if they don't\n            // match.\n            const shape = tensors[0].shape;\n            const squeezedShape = ops.squeeze(tensors[0]).shape;\n            const mapped = tensors.map(tensor => {\n              const sameShape = util.arraysEqual(tensor.shape, shape);\n              if (!sameShape &&\n                  !util.arraysEqual(\n                      ops.squeeze(tensor).shape, squeezedShape)) {\n                throw new Error('the input tensors shape does not match');\n              }\n              return sameShape ? tensor : ops.reshape(tensor, shape);\n            });\n            return [ops.stack(mapped, axis)];\n          });\n        }\n        case 'Unpack': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const tensor =\n              getParamValue('tensor', node, tensorMap, context) as Tensor;\n          return ops.unstack(tensor, axis);\n        }\n        case 'Tile': {\n          const reps =\n              getParamValue('reps', node, tensorMap, context) as number[];\n          return [ops.tile(\n              getParamValue('x', node, tensorMap, context) as Tensor, reps)];\n        }\n        case 'Split':\n        case 'SplitV': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const numOrSizeSplits =\n              getParamValue('numOrSizeSplits', node, tensorMap, context) as\n                  number |\n              number[];\n          const tensor = getParamValue('x', node, tensorMap, context) as Tensor;\n\n          return ops.split(tensor, numOrSizeSplits, axis);\n        }\n        case 'ScatterNd': {\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor;\n          const values =\n              getParamValue('values', node, tensorMap, context) as Tensor;\n          const shape =\n              getParamValue('shape', node, tensorMap, context) as number[];\n          return [ops.scatterND(indices, values, shape)];\n        }\n        case 'GatherNd': {\n          const x = getParamValue('x', node, tensorMap, context) as Tensor;\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor;\n          return [ops.gatherND(x, indices)];\n        }\n        case 'SparseToDense': {\n          const indices =\n              getParamValue('sparseIndices', node, tensorMap, context) as\n              Tensor;\n          const shape =\n              getParamValue('outputShape', node, tensorMap, context) as\n              number[];\n          const sparseValues =\n              getParamValue('sparseValues', node, tensorMap, context) as Tensor;\n          const defaultValue =\n              getParamValue('defaultValue', node, tensorMap, context) as Scalar;\n          return [ops.sparseToDense(\n              indices, sparseValues, shape,\n              sparseValues.dtype === defaultValue.dtype ?\n                  defaultValue :\n                  ops.cast(defaultValue, sparseValues.dtype))];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'slice_join';\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor, Tensor1D, Tensor2D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext, ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'SparseFillEmptyRows': {\n          const {\n            outputIndices,\n            outputValues,\n            emptyRowIndicator,\n            reverseIndexMap\n          } =\n              ops.sparse.sparseFillEmptyRows(\n                  getParamValue('indices', node, tensorMap, context) as\n                      Tensor2D,\n                  getParamValue('values', node, tensorMap, context) as Tensor1D,\n                  getParamValue('denseShape', node, tensorMap, context) as\n                      Tensor1D,\n                  getParamValue('defaultValue', node, tensorMap, context) as\n                      Scalar);\n          return [\n            outputIndices, outputValues, emptyRowIndicator, reverseIndexMap\n          ];\n        }\n        case 'SparseReshape': {\n          const {outputIndices, outputShape} = ops.sparse.sparseReshape(\n              getParamValue('inputIndices', node, tensorMap, context) as\n                  Tensor2D,\n              getParamValue('inputShape', node, tensorMap, context) as Tensor1D,\n              getParamValue('newShape', node, tensorMap, context) as Tensor1D);\n          return [outputIndices, outputShape];\n        }\n        case 'SparseSegmentMean': {\n          const outputData = ops.sparse.sparseSegmentMean(\n              getParamValue('data', node, tensorMap, context) as Tensor,\n              getParamValue('indices', node, tensorMap, context) as Tensor1D,\n              getParamValue('segmentIds', node, tensorMap, context) as\n                  Tensor1D);\n          return [outputData];\n        }\n        case 'SparseSegmentSum': {\n          const outputData = ops.sparse.sparseSegmentSum(\n              getParamValue('data', node, tensorMap, context) as Tensor,\n              getParamValue('indices', node, tensorMap, context) as Tensor1D,\n              getParamValue('segmentIds', node, tensorMap, context) as\n                  Tensor1D);\n          return [outputData];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'sparse';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n     ops = tfOps): Tensor[] => {\n          switch (node.op) {\n            case 'FFT': {\n              return [ops.fft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            case 'IFFT': {\n              return [ops.ifft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            case 'RFFT': {\n              return [ops.rfft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            case 'IRFFT': {\n              return [ops.irfft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            default:\n              throw TypeError(`Node type ${node.op} is not implemented`);\n          }\n        };\n\nexport const CATEGORY = 'spectral';\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor, Tensor1D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext, ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'StringNGrams': {\n          const {nGrams, nGramsSplits} = ops.string.stringNGrams(\n              getParamValue('data', node, tensorMap, context) as Tensor1D,\n              getParamValue('dataSplits', node, tensorMap, context) as Tensor,\n              getParamValue('separator', node, tensorMap, context) as string,\n              getParamValue('nGramWidths', node, tensorMap, context) as\n                  number[],\n              getParamValue('leftPad', node, tensorMap, context) as string,\n              getParamValue('rightPad', node, tensorMap, context) as string,\n              getParamValue('padWidth', node, tensorMap, context) as number,\n              getParamValue(\n                  'preserveShortSequences', node, tensorMap, context) as\n                  boolean);\n          return [nGrams, nGramsSplits];\n        }\n        case 'StringSplit': {\n          const {indices, values, shape} = ops.string.stringSplit(\n              getParamValue('input', node, tensorMap, context) as Tensor1D,\n              getParamValue('delimiter', node, tensorMap, context) as Scalar,\n              getParamValue('skipEmpty', node, tensorMap, context) as boolean);\n          return [indices, values, shape];\n        }\n        case 'StringToHashBucketFast': {\n          const output = ops.string.stringToHashBucketFast(\n              getParamValue('input', node, tensorMap, context) as Tensor,\n              getParamValue('numBuckets', node, tensorMap, context) as number);\n          return [output];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'string';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor4D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext, ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'Cast': {\n          return [ops.cast(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('dtype', node, tensorMap, context) as 'int32' |\n                  'float32' | 'bool')];\n        }\n        case 'ExpandDims': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          return [ops.expandDims(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n        case 'Squeeze': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          return [ops.squeeze(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n\n        case 'Reshape': {\n          return [ops.reshape(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('shape', node, tensorMap, context) as number[])];\n        }\n        case 'MirrorPad': {\n          return [ops.mirrorPad(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('padding', node, tensorMap, context) as\n                  Array<[number, number]>,\n              getParamValue('mode', node, tensorMap, context) as 'reflect' |\n                  'symmetric')];\n        }\n        case 'PadV2':\n        case 'Pad': {\n          return [ops.pad(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('padding', node, tensorMap, context) as\n                  Array<[number, number]>,\n              getParamValue('constantValue', node, tensorMap, context) as\n                  number)];\n        }\n        case 'SpaceToBatchND': {\n          const blockShape =\n              getParamValue('blockShape', node, tensorMap, context) as number[];\n          const paddings =\n              getParamValue('paddings', node, tensorMap, context) as number[][];\n          return [ops.spaceToBatchND(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              blockShape, paddings)];\n        }\n        case 'BatchToSpaceND': {\n          const blockShape =\n              getParamValue('blockShape', node, tensorMap, context) as number[];\n          const crops =\n              getParamValue('crops', node, tensorMap, context) as number[][];\n          return [ops.batchToSpaceND(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              blockShape, crops)];\n        }\n        case 'DepthToSpace': {\n          const blockSize =\n              getParamValue('blockSize', node, tensorMap, context) as number;\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as\n               string).toUpperCase() as 'NHWC' |\n              'NCHW';\n          return [ops.depthToSpace(\n              getParamValue('x', node, tensorMap, context) as Tensor4D,\n              blockSize, dataFormat)];\n        }\n        case 'BroadcastTo': {\n          return [ops.broadcastTo(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('shape', node, tensorMap, context) as number[])];\n        }\n        case 'BroadcastArgs': {\n          return [ops.broadcastArgs(\n              getParamValue('s0', node, tensorMap, context) as Tensor,\n              getParamValue('s1', node, tensorMap, context) as Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'transformation';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {ExecutionContext} from '../executor/execution_context';\nimport {ResourceManager} from '../executor/resource_manager';\n\nimport {NodeValueImpl} from './custom_op/node_value_impl';\nimport {getRegisteredOp} from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as hashTable from './executors/hash_table_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as ragged from './executors/ragged_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as sparse from './executors/sparse_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as string from './executors/string_executor';\nimport * as transformation from './executors/transformation_executor';\nimport {Node} from './types';\n\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function executeOp(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n    resourceManager?: ResourceManager, tidy = tfc.tidy): tfc.Tensor[]|\n    Promise<tfc.Tensor[]> {\n  const value =\n      ((node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) => {\n        switch (node.category) {\n          case 'arithmetic':\n            return tidy(() => arithmetic.executeOp(node, tensorMap, context));\n          case 'basic_math':\n            return tidy(() => basicMath.executeOp(node, tensorMap, context));\n          case 'control':\n            return control.executeOp(node, tensorMap, context);\n          case 'convolution':\n            return tidy(() => convolution.executeOp(node, tensorMap, context));\n          case 'creation':\n            return tidy(() => creation.executeOp(node, tensorMap, context));\n          case 'dynamic':\n            return dynamic.executeOp(node, tensorMap, context);\n          case 'evaluation':\n            return tidy(() => evaluation.executeOp(node, tensorMap, context));\n          case 'image':\n            return tidy(() => image.executeOp(node, tensorMap, context));\n          case 'graph':\n            return tidy(() => graph.executeOp(node, tensorMap, context));\n          case 'logical':\n            return tidy(() => logical.executeOp(node, tensorMap, context));\n          case 'matrices':\n            return tidy(() => matrices.executeOp(node, tensorMap, context));\n          case 'normalization':\n            return tidy(\n                () => normalization.executeOp(node, tensorMap, context));\n          case 'ragged':\n            return tidy(() => ragged.executeOp(node, tensorMap, context));\n          case 'reduction':\n            return tidy(() => reduction.executeOp(node, tensorMap, context));\n          case 'slice_join':\n            return tidy(() => sliceJoin.executeOp(node, tensorMap, context));\n          case 'sparse':\n            return tidy(() => sparse.executeOp(node, tensorMap, context));\n          case 'spectral':\n            return tidy(() => spectral.executeOp(node, tensorMap, context));\n          case 'string':\n            return tidy(() => string.executeOp(node, tensorMap, context));\n          case 'transformation':\n            return tidy(\n                () => transformation.executeOp(node, tensorMap, context));\n          case 'hash_table':\n            return hashTable.executeOp(\n                node, tensorMap, context, resourceManager);\n          case 'custom':\n            const opMapper = getRegisteredOp(node.op);\n            if (opMapper && opMapper.customExecutor) {\n              return opMapper.customExecutor(\n                  new NodeValueImpl(node, tensorMap, context));\n            } else {\n              throw TypeError(`Custom op ${node.op} is not registered.`);\n            }\n          default:\n            throw TypeError(\n                `Unknown op '${node.op}'. File an issue at ` +\n                `https://github.com/tensorflow/tfjs/issues so we can add it` +\n                `, or register a custom execution with tf.registerOp()`);\n        }\n      })(node, tensorMap, context);\n  if (tfc.util.isPromise(value)) {\n    return value.then((data) => [].concat(data));\n  }\n  return [].concat(value);\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap, TensorArrayMap, TensorListMap} from '../data/types';\n\nimport {TensorArray} from './tensor_array';\nimport {TensorList} from './tensor_list';\nimport {FunctionExecutor} from './types';\n\nexport interface ExecutionContextInfo {\n  id: number;           // the unique id of the context info\n  frameName: string;    // The frame name of the loop, this comes from\n                        // the TensorFlow NodeDef.\n  iterationId: number;  // The iteration id of the loop\n}\n\n/**\n * ExecutionContext captures the runtime environment of the node. It keeps\n * track of the current frame and iteration for the control flow ops.\n *\n * For example, typical Dynamic RNN model may contain loops, for which\n * TensorFlow will generate graphs with Enter/Exit nodes to control the\n * current execution frame, and NextIteration Nodes for iteration id increment.\n * For model with branch logic, TensorFLow will generate Switch/Merge ops.\n */\nexport class ExecutionContext {\n  private rootContext = {id: 0, frameName: '', iterationId: 0};\n  private contexts: ExecutionContextInfo[] = [this.rootContext];\n  private lastId = 0;\n  private _currentContextIds: string[];\n\n  constructor(\n      readonly weightMap: NamedTensorsMap = {},\n      readonly tensorArrayMap: TensorArrayMap = {},\n      readonly tensorListMap: TensorListMap = {},\n      readonly functionMap: {[key: string]: FunctionExecutor} = {}) {\n    this.generateCurrentContextIds();\n  }\n\n  private newFrame(id: number, frameName: string) {\n    return {id, frameName, iterationId: 0};\n  }\n\n  /**\n   * Set the current context\n   * @param contexts: ExecutionContextInfo[] the current path of execution\n   * frames\n   */\n  set currentContext(contexts: ExecutionContextInfo[]) {\n    if (this.contexts !== contexts) {\n      this.contexts = contexts;\n      this.generateCurrentContextIds();\n    }\n  }\n\n  get currentContext(): ExecutionContextInfo[] {\n    return this.contexts;\n  }\n\n  /**\n   * Returns the current context in string format.\n   */\n  get currentContextId(): string {\n    return this._currentContextIds[0];\n  }\n\n  /**\n   * Returns the current context and all parent contexts in string format.\n   * This allow access to the nodes in the current and parent frames.\n   */\n  get currentContextIds(): string[] {\n    return this._currentContextIds;\n  }\n\n  private generateCurrentContextIds() {\n    const names = [];\n    for (let i = 0; i < this.contexts.length - 1; i++) {\n      const contexts = this.contexts.slice(0, this.contexts.length - i);\n      names.push(this.contextIdforContexts(contexts));\n    }\n    names.push('');\n    this._currentContextIds = names;\n  }\n\n  private contextIdforContexts(contexts: ExecutionContextInfo[]) {\n    return contexts ?\n        contexts\n            .map(\n                context => (context.id === 0 && context.iterationId === 0) ?\n                    '' :\n                    `${context.frameName}-${context.iterationId}`)\n            .join('/') :\n        '';\n  }\n\n  /**\n   * Enter a new frame, a new context is pushed on the current context list.\n   * @param frameId new frame id\n   */\n  enterFrame(frameId: string) {\n    if (this.contexts) {\n      this.lastId++;\n      this.contexts = this.contexts.slice();\n      this.contexts.push(this.newFrame(this.lastId, frameId));\n      this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));\n    }\n  }\n\n  /**\n   * Exit the current frame, the last context is removed from the current\n   * context list.\n   */\n  exitFrame() {\n    if (this.contexts && this.contexts.length > 1) {\n      this.contexts = this.contexts.slice();\n      this.contexts.splice(-1);\n      this.currentContextIds.shift();\n    } else {\n      throw new Error('Cannot exit frame, the context is empty');\n    }\n  }\n\n  /**\n   * Enter the next iteration of a loop, the iteration id of last context is\n   * increased.\n   */\n  nextIteration() {\n    if (this.contexts && this.contexts.length > 0) {\n      this.contexts = this.contexts.slice();\n      this.lastId++;\n      const context =\n          Object.assign({}, this.contexts[this.contexts.length - 1]);\n      context.iterationId += 1;\n      context.id = this.lastId;\n      this.contexts.splice(-1, 1, context);\n      this._currentContextIds.splice(\n          0, 1, this.contextIdforContexts(this.contexts));\n    } else {\n      throw new Error('Cannot increase frame iteration, the context is empty');\n    }\n  }\n\n  getWeight(name: string): Tensor[] {\n    return this.weightMap[name];\n  }\n\n  addTensorArray(tensorArray: TensorArray) {\n    this.tensorArrayMap[tensorArray.id] = tensorArray;\n  }\n\n  getTensorArray(id: number): TensorArray {\n    return this.tensorArrayMap[id];\n  }\n\n  addTensorList(tensorList: TensorList) {\n    this.tensorListMap[tensorList.id] = tensorList;\n  }\n\n  getTensorList(id: number): TensorList {\n    return this.tensorListMap[id];\n  }\n\n  dispose(keepIds: Set<number>) {\n    for (const key in this.tensorArrayMap) {\n      this.tensorArrayMap[key].clearAndClose(keepIds);\n    }\n\n    for (const key in this.tensorListMap) {\n      this.tensorListMap[key].clearAndClose(keepIds);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NamedTensorMap} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {parseNodeName} from '../operations/executors/utils';\nimport {Graph, Node} from '../operations/types';\n\nexport interface ExecutionInfo {\n  inputs: NamedTensorMap;\n  outputs: Node[];\n  usedNodes: Set<string>;\n  missingInputs: string[];\n  dynamicNode: Node;\n  syncInputs: string[];\n}\n\n/**\n * Given graph inputs and desired outputs, find the minimal set of nodes\n * to execute in order to compute the outputs. In addition return other useful\n * info such:\n * - Missing inputs needed to compute the output.\n * - Whether the subgraph contains dynamic ops (control flow, dynamic shape).\n * - Alternative inputs in order to avoid async (dynamic op) execution.\n */\nexport function getExecutionSubgraph(\n    inputs: NamedTensorMap, outputs: Node[], weightMap: NamedTensorsMap,\n    initNodes?: Node[]): ExecutionInfo {\n  const usedNodes = new Set<string>();\n  const missingInputs: string[] = [];\n  let dynamicNode: Node = null;\n  let syncInputs: string[] = null;\n\n  // Start with the outputs, going backwards and find all the nodes that are\n  // needed to compute those outputs.\n  const seen = new Set<string>();\n  const inputNodeNames =\n      Object.keys(inputs).map(name => parseNodeName(name)[0]);\n\n  let initNodeNames: string[] = [];\n  if (initNodes != null) {\n    initNodeNames = initNodes.map(node => parseNodeName(node.name)[0]);\n  }\n\n  const frontier = [...outputs];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    if (isControlFlow(node) || isDynamicShape(node) || isHashTable(node)) {\n      if (dynamicNode == null) {\n        dynamicNode = node;\n        syncInputs = dynamicNode.children.map(child => child.name)\n                         .filter(name => usedNodes.has(name));\n      }\n    }\n    usedNodes.add(node.name);\n\n    // Weights are dead end since we already have their values.\n    if (weightMap[node.name] != null) {\n      continue;\n    }\n    // This node is a dead end since it's one of the user-provided inputs.\n    if (inputNodeNames.indexOf(node.name) !== -1) {\n      continue;\n    }\n    // This node is a dead end since it doesn't have any inputs.\n    if (initNodeNames.indexOf(node.name) !== -1) {\n      continue;\n    }\n    if (node.inputs.length === 0) {\n      missingInputs.push(node.name);\n      continue;\n    }\n    node.inputs.forEach(input => {\n      // Don't add to the frontier if it is already there.\n      if (seen.has(input.name)) {\n        return;\n      }\n      seen.add(input.name);\n      frontier.push(input);\n    });\n  }\n  return {inputs, outputs, usedNodes, missingInputs, dynamicNode, syncInputs};\n}\n\n/**\n * Given the execution info, return a list of nodes in topological order that\n * need to be executed to compute the output.\n */\nexport function getNodesInTopologicalOrder(\n    graph: Graph, weightMap: NamedTensorsMap,\n    executionInfo: ExecutionInfo): Node[] {\n  const {usedNodes, inputs} = executionInfo;\n  const frontier: Node[] = [];\n  const inputNodes = Object.keys(inputs)\n                         .map(name => parseNodeName(name)[0])\n                         .map(name => graph.nodes[name]);\n  const initNodes = graph.initNodes;\n\n  inputNodes.forEach(input => {\n    if (usedNodes.has(input.name)) {\n      frontier.push(input);\n    }\n  });\n  graph.weights.forEach(weight => {\n    if (usedNodes.has(weight.name)) {\n      frontier.push(weight);\n    }\n  });\n  if (initNodes != null) {\n    initNodes.forEach(node => {\n      if (usedNodes.has(node.name)) {\n        frontier.push(node);\n      }\n    });\n  }\n  const seen = new Set<string>();\n  const orderedNodes: Node[] = [];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    seen.add(node.name);\n    if (!weightMap[node.name]) {\n      orderedNodes.push(node);\n    }\n    node.children.forEach(child => {\n      if (!seen.has(child.name) && usedNodes.has(child.name) &&\n          child.inputs.every(input => seen.has(input.name))) {\n        frontier.push(child);\n      }\n    });\n  }\n  return orderedNodes;\n}\n\nconst CONTROL_FLOW_OPS = [\n  'Switch', 'Merge', 'Enter', 'Exit', 'NextIteration', 'StatelessIf',\n  'StatelessWhile', 'if', 'While'\n];\nconst DYNAMIC_SHAPE_OPS = [\n  'NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'NonMaxSuppressionV5', 'Where'\n];\nconst HASH_TABLE_OPS = [\n  'HashTable', 'HashTableV2', 'LookupTableImport', 'LookupTableImportV2',\n  'LookupTableFind', 'LookupTableFindV2', 'LookupTableSize', 'LookupTableSizeV2'\n];\n\nexport function isControlFlow(node: Node) {\n  return CONTROL_FLOW_OPS.indexOf(node.op) >= 0;\n}\n\nexport function isDynamicShape(node: Node) {\n  return DYNAMIC_SHAPE_OPS.indexOf(node.op) >= 0;\n}\n\nexport function isHashTable(node: Node) {\n  return HASH_TABLE_OPS.indexOf(node.op) >= 0;\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, env, keep, NamedTensorMap, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {ISignatureDef} from '../data/compiled_api';\nimport {NamedTensorsMap, TensorArrayMap, TensorInfo, TensorListMap} from '../data/types';\nimport {getNodeNameAndIndex, getParamValue, getTensor, getTensorsForCurrentContenxt, parseNodeName} from '../operations/executors/utils';\nimport {executeOp} from '../operations/operation_executor';\nimport {Graph, Node} from '../operations/types';\n\nimport {ExecutionContext, ExecutionContextInfo} from './execution_context';\nimport {getExecutionSubgraph, getNodesInTopologicalOrder, isControlFlow} from './model_analysis';\nimport {ResourceManager} from './resource_manager';\nimport {FunctionExecutor} from './types';\n\ninterface NodeWithContexts {\n  contexts: ExecutionContextInfo[];\n  node: Node;\n}\n\nexport class GraphExecutor implements FunctionExecutor {\n  private compiledMap: Map<string, Node[]> = new Map();\n  private _weightMap: NamedTensorsMap = {};\n  private _weightIds: number[];\n  private _signature: ISignatureDef;\n  private _inputs: Node[];\n  private _outputs: Node[];\n  private _initNodes: Node[];  // Internal init nodes to start initialization.\n  private SEPERATOR = ',';\n  private _functions: {[key: string]: Graph} = {};\n  private _functionExecutorMap: {[key: string]: FunctionExecutor} = {};\n  private _resourceManager: ResourceManager;\n  private clonedTensorsMap: NamedTensorsMap;\n  private keepIntermediateTensors = false;\n\n  get weightIds(): number[] {\n    return this.parent ? this.parent.weightIds : this._weightIds;\n  }\n\n  get functionExecutorMap(): {[key: string]: FunctionExecutor} {\n    return this.parent ? this.parent.functionExecutorMap :\n                         this._functionExecutorMap;\n  }\n\n  get weightMap(): NamedTensorsMap {\n    return this.parent ? this.parent.weightMap : this._weightMap;\n  }\n\n  set weightMap(weightMap: NamedTensorsMap) {\n    const weightIds = Object.keys(weightMap).map(\n        key => weightMap[key].map(tensor => tensor.id));\n    this._weightIds = [].concat(...weightIds);\n    this._weightMap = weightMap;\n  }\n\n  /**\n   * Set `ResourceManager` shared by executors of a model.\n   * @param resourceManager: `ResourceManager` of the `GraphModel`.\n   */\n  set resourceManager(resourceManager: ResourceManager) {\n    this._resourceManager = resourceManager;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this._inputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get outputs(): TensorInfo[] {\n    return this._outputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get inputNodes(): string[] {\n    return this._inputs.map(node => node.signatureKey || node.name);\n  }\n\n  get outputNodes(): string[] {\n    return this._outputs.map((node) => {\n      const name = node.signatureKey || node.name;\n      return node.defaultOutput ? (`${name}:${node.defaultOutput}`) : name;\n    });\n  }\n\n  get functions(): {[key: string]: ISignatureDef} {\n    return Object.keys(this._functions).reduce((map, key) => {\n      map[key] = this._functions[key].signature;\n      return map;\n    }, {} as {[key: string]: ISignatureDef});\n  }\n\n  /**\n   *\n   * @param graph Graph the model or function graph to be executed.\n   * @param parent When building function exector you need to set the parent\n   * executor. Since the weights and function executor maps are set at parant\n   * level, that function executor can access the function maps and weight maps\n   * through the parent.\n   */\n  constructor(private graph: Graph, private parent?: GraphExecutor) {\n    this._outputs = graph.outputs;\n    this._inputs = graph.inputs;\n    this._initNodes = graph.initNodes;\n    this._signature = graph.signature;\n    this._functions = graph.functions;\n    // create sub-graph executors\n    if (graph.functions != null) {\n      Object.keys(graph.functions).forEach(name => {\n        this._functionExecutorMap[name] =\n            new GraphExecutor(graph.functions[name], this);\n      });\n    }\n  }\n\n  private getCompilationKey(inputs: Node[], outputs: Node[]): string {\n    const sortedInputs = inputs.map(node => node.name).sort();\n    const sortedOutputs = outputs.map(node => node.name).sort();\n    return sortedInputs.join(this.SEPERATOR) + '--' +\n        sortedOutputs.join(this.SEPERATOR);\n  }\n\n  /**\n   * Compiles the inference graph and returns the minimal set of nodes that are\n   * required for execution, in the correct execution order.\n   */\n  private compile(inputs: NamedTensorMap, outputs: Node[]): Node[] {\n    const executionInfo =\n        getExecutionSubgraph(inputs, outputs, this.weightMap, this._initNodes);\n    const {missingInputs, dynamicNode, syncInputs} = executionInfo;\n    if (dynamicNode != null) {\n      throw new Error(\n          `This execution contains the node '${dynamicNode.name}', which has ` +\n          `the dynamic op '${dynamicNode.op}'. Please use ` +\n          `model.executeAsync() instead. Alternatively, to avoid the ` +\n          `dynamic ops, specify the inputs [${syncInputs}]`);\n    }\n\n    if (missingInputs.length > 0) {\n      const outNames = outputs.map(n => n.name);\n      const inNames = Object.keys(inputs);\n      throw new Error(\n          `Cannot compute the outputs [${outNames}] from the provided inputs ` +\n          `[${inNames}]. Missing the following inputs: [${missingInputs}]`);\n    }\n\n    return getNodesInTopologicalOrder(\n        this.graph, this.weightMap, executionInfo);\n  }\n\n  private cloneAndKeepTensor(tensor: Tensor) {\n    if (tensor == null) {\n      return null;\n    }\n    const clone = tensor.clone();\n    // Keep the clone because`model.execute()` may be called within\n    // a `tidy()`, but the user may inspect these tensors after the\n    // tidy.\n    keep(clone);\n    return clone;\n  }\n\n  private cloneTensorList(tensors: Tensor[]) {\n    if (!tensors) {\n      return null;\n    }\n    const clonedTensor = tensors.map(tensor => {\n      return this.cloneAndKeepTensor(tensor);\n    });\n    return clonedTensor;\n  }\n\n  private cloneTensorMap(tensorsMap: NamedTensorsMap): NamedTensorsMap {\n    return Object.fromEntries(\n        Object.entries(tensorsMap).map(([name, tensorsList]) => {\n          return [name, this.cloneTensorList(tensorsList)];\n        }));\n  }\n\n  /**\n   * Executes the inference for given input tensors.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs Optional. output node name from the Tensorflow model, if\n   * no outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   */\n  execute(inputs: NamedTensorMap, outputs?: string[]): Tensor[] {\n    // Dispose any tensors from a prior run to avoid leaking them.\n    this.disposeIntermediateTensors();\n    inputs = this.mapInputs(inputs);\n    const names = Object.keys(inputs).sort();\n    this.checkInputs(inputs);\n    this.checkInputShapeAndType(inputs);\n    outputs = this.mapOutputs(outputs);\n    this.checkOutputs(outputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodeNames = outputs.map(name => parseNodeName(name)[0]);\n    let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);\n    // If no outputs are specified, then use the default outputs of the model.\n    if (outputNodes.length === 0) {\n      outputNodes = this._outputs;\n    }\n\n    const compilationKey = this.getCompilationKey(inputNodes, outputNodes);\n\n    // Do nothing if the compiled graph cache contains the input.\n    let orderedNodes = this.compiledMap.get(compilationKey);\n    if (orderedNodes == null) {\n      orderedNodes = this.compile(inputs, outputNodes);\n      this.compiledMap.set(compilationKey, orderedNodes);\n    }\n\n    // Keep tensors if KEEP_INTERMEDIATE_TENSORS is on.\n    try {\n      this.keepIntermediateTensors = env().getBool('KEEP_INTERMEDIATE_TENSORS');\n    } catch (e) {\n      this.keepIntermediateTensors = false;\n      console.warn(e.message);\n    }\n    const tensorArrayMap: TensorArrayMap = {};\n    const tensorListMap: TensorListMap = {};\n\n    return tidy(() => {\n      const context = new ExecutionContext(\n          this.weightMap, tensorArrayMap, tensorListMap,\n          this.functionExecutorMap);\n      const tensorsMap: NamedTensorsMap = {...this.weightMap};\n      if (this.keepIntermediateTensors) {\n        this.clonedTensorsMap = this.cloneTensorMap(this.weightMap);\n      }\n\n      Object.keys(inputs).forEach(name => {\n        const [nodeName, index] = parseNodeName(name);\n        const tensors: Tensor[] = [];\n        tensors[index] = inputs[name];\n        tensorsMap[nodeName] = tensors;\n        if (this.keepIntermediateTensors) {\n          this.clonedTensorsMap[nodeName] = this.cloneTensorList(tensors);\n        }\n      });\n\n      const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n      const intermediateTensorConsumerCount: {[key: number]: number} = {};\n      for (let i = 0; i < orderedNodes.length; i++) {\n        const node = orderedNodes[i];\n        if (!tensorsMap[node.name]) {\n          const tensors =\n              executeOp(node, tensorsMap, context, this._resourceManager) as\n              Tensor[];\n          if (util.isPromise(tensors)) {\n            throw new Error(\n                `The execution of the op '${node.op}' returned a promise. ` +\n                `Please use model.executeAsync() instead.`);\n          }\n          tensorsMap[node.name] = tensors;\n          if (this.keepIntermediateTensors) {\n            this.clonedTensorsMap[node.name] = this.cloneTensorList(tensors);\n          }\n          this.checkTensorForDisposal(\n              node.name, node, tensorsMap, context, tensorsToKeep,\n              outputNodeNames, intermediateTensorConsumerCount);\n        }\n      }\n\n      // dispose the context for the root executor\n      if (this.parent == null) {\n        context.dispose(tensorsToKeep);\n      }\n\n      return outputs.map(name => getTensor(name, tensorsMap, context));\n    });\n  }\n\n  private getFrozenTensorIds(tensorMap: NamedTensorsMap): Set<number> {\n    const ids = [].concat.apply(\n        [],\n        Object.keys(tensorMap)\n            .map(key => tensorMap[key])\n            .map(tensors => tensors.map(tensor => tensor.id)));\n    return new Set(ids);\n  }\n\n  private checkTensorForDisposal(\n      nodeName: string, node: Node, tensorMap: NamedTensorsMap,\n      context: ExecutionContext, tensorsToKeep: Set<number>,\n      outputNames: string[],\n      intermediateTensorConsumerCount: {[key: string]: number}) {\n    // Skip output nodes and any control flow nodes, since its dependency is\n    // tricky to track correctly.\n    if (node.category === 'control' || outputNames.indexOf(nodeName) !== -1) {\n      return;\n    }\n\n    tensorMap[nodeName].forEach(tensor => {\n      if (tensor != null) {\n        intermediateTensorConsumerCount[tensor.id] =\n            (intermediateTensorConsumerCount[tensor.id] || 0) +\n            node.children.length;\n      }\n    });\n    node.inputs.forEach(input => {\n      // Skip any control flow nodes, since its dependency is tricky to track\n      // correctly.\n      if (input.category !== 'control') {\n        const tensors =\n            getTensorsForCurrentContenxt(input.name, tensorMap, context);\n        if (tensors != null) {\n          tensors.forEach(tensor => {\n            if (tensor && !tensor.kept && !tensorsToKeep.has(tensor.id)) {\n              const count = intermediateTensorConsumerCount[tensor.id];\n              if (count === 1) {\n                tensor.dispose();\n                delete intermediateTensorConsumerCount[tensor.id];\n              } else if (count != null) {\n                // only intermediate nodes has count set, inputs and weights\n                // are not.\n                intermediateTensorConsumerCount[tensor.id]--;\n              }\n            }\n          });\n        }\n      }\n    });\n  }\n\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  async executeAsync(inputs: NamedTensorMap, outputs?: string[]):\n      Promise<Tensor[]> {\n    return this._executeAsync(inputs, outputs);\n  }\n\n  disposeIntermediateTensors() {\n    if (!this.clonedTensorsMap) {\n      return;\n    }\n    Object.values(this.clonedTensorsMap).forEach(tensorsList => {\n      for (const tensor of tensorsList) {\n        if (tensor && !tensor.isDisposed) {\n          tensor.dispose();\n        }\n      }\n    });\n\n    this.clonedTensorsMap = null;\n  }\n\n  getIntermediateTensors(): NamedTensorsMap {\n    return this.clonedTensorsMap;\n  }\n\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs Optional. output node name from the Tensorflow model,\n   * if no outputs are specified, the default outputs of the model would be\n   * used. You can inspect intermediate nodes of the model by adding them to\n   * the outputs array.\n   * @param isFunctionExecution Optional. Flag for executing a function.\n   * @param tensorArrayMap Optional, global TensorArray map by id. Used for\n   * function execution.\n   * @param tensorArrayMap Optinal global TensorList map by id. Used for\n   * function execution.\n   */\n  private async _executeAsync(\n      inputs: NamedTensorMap, outputs?: string[], isFunctionExecution = false,\n      tensorArrayMap: TensorArrayMap = {},\n      tensorListMap: TensorListMap = {}): Promise<Tensor[]> {\n    // Dispose any tensors from a prior run to avoid leaking them.\n    this.disposeIntermediateTensors();\n    if (!isFunctionExecution) {\n      inputs = this.mapInputs(inputs);\n      this.checkInputs(inputs);\n      this.checkInputShapeAndType(inputs);\n      outputs = this.mapOutputs(outputs);\n      this.checkOutputs(outputs);\n    }\n\n    // Keep tensors if KEEP_INTERMEDIATE_TENSORS is on.\n    try {\n      this.keepIntermediateTensors = env().getBool('KEEP_INTERMEDIATE_TENSORS');\n    } catch (e) {\n      this.keepIntermediateTensors = false;\n      console.warn(e.message);\n    }\n\n    const context = new ExecutionContext(\n        this.weightMap, tensorArrayMap, tensorListMap,\n        this.functionExecutorMap);\n\n    if (this.keepIntermediateTensors) {\n      this.clonedTensorsMap = this.cloneTensorMap(this.weightMap);\n    }\n\n    // Graph with control flow op requires runtime evaluation of the execution\n    // order, while without control flow the execution order is pre-determined\n    // in the compile method.\n    const tensorsMap = await this.executeWithControlFlow(\n        inputs, context, outputs, isFunctionExecution);\n    const results = outputs.map(name => getTensor(name, tensorsMap, context));\n\n    // dispose all the intermediate tensors\n    const outputIds = results.map(t => t.id);\n    const inputIds = Object.keys(inputs).map(name => inputs[name].id);\n    const keepIds =\n        new Set<number>([...outputIds, ...inputIds, ...this.weightIds]);\n\n    Object.values(tensorsMap).forEach(tensorsList => {\n      tensorsList.forEach(tensor => {\n        if (tensor && !tensor.isDisposed && !keepIds.has(tensor.id)) {\n          tensor.dispose();\n        }\n      });\n    });\n\n    // dispose the context for the root executor\n    if (this.parent == null) {\n      context.dispose(keepIds);\n    }\n\n    return results;\n  }\n\n  async executeFunctionAsync(\n      inputs: Tensor[], tensorArrayMap: TensorArrayMap,\n      tensorListMap: TensorListMap): Promise<Tensor[]> {\n    const mappedInputs = inputs.reduce((map, tensor, index) => {\n      map[this.inputs[index].name] = tensor;\n      return map;\n    }, {} as NamedTensorMap);\n\n    return this._executeAsync(\n        mappedInputs, this.outputNodes, true, tensorArrayMap, tensorListMap);\n  }\n\n  /**\n   * When there are control flow nodes in the graph, the graph execution use\n   * ExecutionContext to keep track of the frames and loop iterators.\n   * @param inputs placeholder tensors for the graph.\n   * @param context the execution context object for current execution.\n   * @param outputNames Optional. output node name from the Tensorflow model,\n   * if no outputs are specified, the default outputs of the model would be\n   * used. You can inspect intermediate nodes of the model by adding them to\n   * the outputs array.\n   * @param isFunctionExecution Flag for executing a function.\n   */\n  private async executeWithControlFlow(\n      inputs: NamedTensorMap, context: ExecutionContext, outputNames?: string[],\n      isFunctionExecution?: boolean): Promise<NamedTensorsMap> {\n    const names = Object.keys(inputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodeNames = outputNames.map(name => parseNodeName(name)[0]);\n    let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);\n\n    // If no outputs are specified, then use the default outputs of the model.\n    if (outputNodes.length === 0) {\n      outputNodes = this._outputs;\n    }\n\n    const {usedNodes, missingInputs, dynamicNode, syncInputs} =\n        getExecutionSubgraph(\n            inputs, outputNodes, this.weightMap, this._initNodes);\n\n    // First nodes to execute include inputNodes, weights, and initNodes.\n    const stack: NodeWithContexts[] = [\n      ...inputNodes, ...this.graph.weights, ...(this._initNodes || [])\n    ].map(node => {\n      return {node, contexts: context.currentContext};\n    });\n    const tensorsMap: NamedTensorsMap = {...this.weightMap};\n    Object.keys(inputs).forEach(name => {\n      const [nodeName, index] = parseNodeName(name);\n      const tensors: Tensor[] = [];\n      tensors[index] = inputs[name];\n      tensorsMap[nodeName] = tensors;\n    });\n    const intermediateTensorConsumerCount: {[key: number]: number} = {};\n    const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n    const added: {[key: string]: boolean} = {};\n    while (stack.length > 0) {\n      const promises = this.processStack(\n          inputNodes, stack, context, tensorsMap, added, tensorsToKeep,\n          outputNodeNames, intermediateTensorConsumerCount, usedNodes);\n      await Promise.all(promises);\n    }\n    if (dynamicNode == null && !isFunctionExecution) {\n      console.warn(\n          `This model execution did not contain any nodes with control flow ` +\n          `or dynamic output shapes. You can use model.execute() instead.`);\n    }\n    const missingOutputs =\n        outputNodes\n            .filter(\n                node => !isControlFlow(node) &&\n                    !getTensor(node.name, tensorsMap, context))\n            .map(node => node.name);\n    if (missingOutputs.length > 0) {\n      let alternativeMsg = '';\n      if (dynamicNode != null) {\n        alternativeMsg =\n            `Alternatively, to avoid the dynamic ops, use model.execute() ` +\n            `and specify the inputs [${syncInputs}]`;\n      }\n      throw new Error(\n          `Cannot compute the outputs [${missingOutputs}] from the provided ` +\n          `inputs [${names}]. Consider providing the following inputs: ` +\n          `[${missingInputs}]. ${alternativeMsg}`);\n    }\n    return tensorsMap;\n  }\n\n  private processStack(\n      inputNodes: Node[], stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      tensorsToKeep: Set<number>, outputNames: string[],\n      intermediateTensorConsumerCount: {[key: number]: number},\n      usedNodes: Set<string>) {\n    const promises: Array<Promise<Tensor[]>> = [];\n    while (stack.length > 0) {\n      const item = stack.pop();\n      context.currentContext = item.contexts;\n      let nodeName = '';\n      // The tensor of the Enter op with isConstant set should be set\n      // in the parent scope, so it will be available as constant for the\n      // whole loop.\n      if (item.node.op === 'Enter' &&\n          getParamValue('isConstant', item.node, tensorMap, context)) {\n        [nodeName] = getNodeNameAndIndex(item.node.name, context);\n      }\n\n      // only process nodes that are not in the tensorMap yet, this include\n      // inputNodes and internal initNodes.\n      if (tensorMap[item.node.name] == null) {\n        const tensors =\n            executeOp(item.node, tensorMap, context, this._resourceManager);\n        if (!nodeName) {\n          [nodeName] = getNodeNameAndIndex(item.node.name, context);\n        }\n        const currentContext = context.currentContext;\n        if (util.isPromise(tensors)) {\n          promises.push(tensors.then(t => {\n            tensorMap[nodeName] = t;\n            if (this.keepIntermediateTensors) {\n              this.clonedTensorsMap[nodeName] = this.cloneTensorList(t);\n            }\n            context.currentContext = currentContext;\n            this.checkTensorForDisposal(\n                nodeName, item.node, tensorMap, context, tensorsToKeep,\n                outputNames, intermediateTensorConsumerCount);\n            this.processChildNodes(\n                item.node, stack, context, tensorMap, added, usedNodes);\n            return t;\n          }));\n        } else {\n          tensorMap[nodeName] = tensors;\n          if (this.keepIntermediateTensors) {\n            this.clonedTensorsMap[nodeName] = this.cloneTensorList(tensors);\n          }\n          this.checkTensorForDisposal(\n              nodeName, item.node, tensorMap, context, tensorsToKeep,\n              outputNames, intermediateTensorConsumerCount);\n          this.processChildNodes(\n              item.node, stack, context, tensorMap, added, usedNodes);\n        }\n      } else {\n        this.processChildNodes(\n            item.node, stack, context, tensorMap, added, usedNodes);\n      }\n    }\n    return promises;\n  }\n\n  private processChildNodes(\n      node: Node, stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      usedNodes: Set<string>) {\n    node.children.forEach((childNode) => {\n      const [nodeName, ] = getNodeNameAndIndex(childNode.name, context);\n      if (added[nodeName] || !usedNodes.has(childNode.name)) {\n        return;\n      }\n      // Merge op can be pushed if any of its inputs has value.\n      if (childNode.op === 'Merge') {\n        if (childNode.inputNames.some(name => {\n              return !!getTensor(name, tensorMap, context);\n            })) {\n          added[nodeName] = true;\n          stack.push({contexts: context.currentContext, node: childNode});\n        }\n      } else  // Otherwise all inputs must to have value.\n          if (childNode.inputNames.every(name => {\n                return !!getTensor(name, tensorMap, context);\n              })) {\n        added[nodeName] = true;\n        stack.push({contexts: context.currentContext, node: childNode});\n      }\n    });\n  }\n\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  dispose() {\n    Object.keys(this.weightMap)\n        .forEach(\n            key => this.weightMap[key].forEach(tensor => tensor.dispose()));\n  }\n\n  private checkInputShapeAndType(inputs: NamedTensorMap) {\n    Object.keys(inputs).forEach(name => {\n      const input = inputs[name];\n      const [nodeName, ] = parseNodeName(name);\n      const node = this.graph.nodes[nodeName];\n      if (node.attrParams['shape'] && node.attrParams['shape'].value) {\n        const shape = node.attrParams['shape'].value as number[];\n        const match = shape.length === input.shape.length &&\n            input.shape.every(\n                (dim, index) => shape[index] === -1 || shape[index] === dim);\n        util.assert(\n            match,\n            () => `The shape of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be [${shape}], but was ` +\n                `[${input.shape}]`);\n      }\n      if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {\n        util.assert(\n            input.dtype === node.attrParams['dtype'].value as string,\n            () => `The dtype of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be ` +\n                `${node.attrParams['dtype'].value}, but was ${input.dtype}`);\n      }\n    });\n  }\n\n  private mapInputs(inputs: NamedTensorMap) {\n    const result: NamedTensorMap = {};\n    for (const inputName in inputs) {\n      const tensor = this._signature ?.inputs ?.[inputName];\n      if (tensor != null) {\n        result[tensor.name] = inputs[inputName];\n      } else {\n        result[inputName] = inputs[inputName];\n      }\n    }\n    return result;\n  }\n\n  private checkInputs(inputs: NamedTensorMap) {\n    const notInGraph = Object.keys(inputs).filter(name => {\n      const [nodeName] = parseNodeName(name);\n      return this.graph.nodes[nodeName] == null;\n    });\n    if (notInGraph.length > 0) {\n      throw new Error(\n          `The dict provided in model.execute(dict) has ` +\n          `keys: [${notInGraph}] that are not part of graph`);\n    }\n  }\n\n  private mapOutputs(outputs: string[]) {\n    return outputs.map(name => {\n      const tensor = this._signature ?.outputs ?.[name];\n      if (tensor != null) {\n        return tensor.name;\n      }\n      return name;\n    }, {});\n  }\n\n  private checkOutputs(outputs: string[]): void {\n    outputs.forEach(name => {\n      const [normalizedName] = parseNodeName(name);\n      if (!this.graph.nodes[normalizedName]) {\n        throw new Error(`The output '${name}' is not found in the graph`);\n      }\n    });\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {HashTableMap, NamedTensorMap} from '../data/types';\nimport {HashTable} from './hash_table';\n\n/**\n * Contains global resources of a model.\n */\nexport class ResourceManager {\n  constructor(\n      readonly hashTableNameToHandle: NamedTensorMap = {},\n      readonly hashTableMap: HashTableMap = {}) {}\n\n  /**\n   * Register a `HashTable` in the resource manager.\n   *\n   * The `HashTable` can be retrieved by `resourceManager.getHashTableById`,\n   * where id is the table handle tensor's id.\n   *\n   * @param name Op node name that creates the `HashTable`.\n   * @param hashTable The `HashTable` to be added to resource manager.\n   */\n  addHashTable(name: string, hashTable: HashTable) {\n    this.hashTableNameToHandle[name] = hashTable.handle;\n    this.hashTableMap[hashTable.id] = hashTable;\n  }\n\n  /**\n   * Get the table handle by node name.\n   * @param name Op node name that creates the `HashTable`. This name is also\n   *     used in the inputs list of lookup and import `HashTable` ops.\n   */\n  getHashTableHandleByName(name: string) {\n    return this.hashTableNameToHandle[name];\n  }\n\n  /**\n   * Get the actual `HashTable` by its handle tensor's id.\n   * @param id The id of the handle tensor.\n   */\n  getHashTableById(id: number): HashTable {\n    return this.hashTableMap[id];\n  }\n\n  /**\n   * Dispose `ResourceManager`, including its hashTables and tensors in them.\n   */\n  dispose() {\n    for (const key in this.hashTableMap) {\n      this.hashTableMap[key].clearAndClose();\n      delete this.hashTableMap[key];\n    }\n\n    for (const name in this.hashTableNameToHandle) {\n      this.hashTableNameToHandle[name].dispose();\n      delete this.hashTableNameToHandle[name];\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {dispose, InferenceModel, io, ModelPredictConfig, NamedTensorMap, Tensor, util} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\nimport {NamedTensorsMap, TensorInfo} from '../data/types';\nimport {OperationMapper} from '../operations/operation_mapper';\n\nimport {GraphExecutor} from './graph_executor';\nimport {ResourceManager} from './resource_manager';\n\nexport const TFHUB_SEARCH_PARAM = '?tfjs-format=file';\nexport const DEFAULT_MODEL_NAME = 'model.json';\ntype Url = string|io.IOHandler|io.IOHandlerSync;\ntype UrlIOHandler<T extends Url> = T extends string ? io.IOHandler : T;\n\n/**\n * A `tf.GraphModel` is a directed, acyclic graph built from a\n * SavedModel GraphDef and allows inference execution.\n *\n * A `tf.GraphModel` can only be created by loading from a model converted from\n * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using\n * the command line converter tool and loaded via `tf.loadGraphModel`.\n *\n * @doc {heading: 'Models', subheading: 'Classes'}\n */\nexport class GraphModel<ModelURL extends Url = string | io.IOHandler> implements\n    InferenceModel {\n  private executor: GraphExecutor;\n  private version = 'n/a';\n  private handler: UrlIOHandler<ModelURL>;\n  private artifacts: io.ModelArtifacts;\n  private initializer: GraphExecutor;\n  private resourceIdToCapturedInput: {[key: number]: Tensor};\n  private resourceManager: ResourceManager;\n  private signature: tensorflow.ISignatureDef;\n  private initializerSignature: tensorflow.ISignatureDef;\n  private structuredOutputKeys: string[];\n  private readonly io: typeof io;\n\n  // Returns the version information for the tensorflow model GraphDef.\n  get modelVersion(): string {\n    return this.version;\n  }\n\n  get inputNodes(): string[] {\n    return this.executor.inputNodes;\n  }\n\n  get outputNodes(): string[] {\n    return this.executor.outputNodes;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this.executor.inputs;\n  }\n\n  get outputs(): TensorInfo[] {\n    return this.executor.outputs;\n  }\n\n  get weights(): NamedTensorsMap {\n    return this.executor.weightMap;\n  }\n\n  get metadata(): {} {\n    return this.artifacts.userDefinedMetadata;\n  }\n\n  get modelSignature(): {} {\n    return this.signature;\n  }\n\n  get modelStructuredOutputKeys(): {} {\n    return this.structuredOutputKeys;\n  }\n\n  /**\n   * @param modelUrl url for the model, or an `io.IOHandler`.\n   * @param weightManifestUrl url for the weight file generated by\n   * scripts/convert.py script.\n   * @param requestOption options for Request, which allows to send credentials\n   * and custom headers.\n   * @param onProgress Optional, progress callback function, fired periodically\n   * before the load is completed.\n   */\n  constructor(\n      private modelUrl: ModelURL, private loadOptions: io.LoadOptions = {},\n      tfio = io) {\n    this.io = tfio;\n    if (loadOptions == null) {\n      this.loadOptions = {};\n    }\n    this.resourceManager = new ResourceManager();\n  }\n\n  private findIOHandler() {\n    type IOHandler = UrlIOHandler<ModelURL>;\n    const path = this.modelUrl;\n    if ((path as io.IOHandler).load != null) {\n      // Path is an IO Handler.\n      this.handler = path as IOHandler;\n    } else if (this.loadOptions.requestInit != null) {\n      this.handler = this.io.browserHTTPRequest(\n                         path as string, this.loadOptions) as IOHandler;\n    } else {\n      const handlers =\n          this.io.getLoadHandlers(path as string, this.loadOptions);\n      if (handlers.length === 0) {\n        // For backward compatibility: if no load handler can be found,\n        // assume it is a relative http path.\n        handlers.push(\n            this.io.browserHTTPRequest(path as string, this.loadOptions));\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) load handlers for ` +\n            `URL '${[path]}'`);\n      }\n      this.handler = handlers[0] as IOHandler;\n    }\n  }\n\n  /**\n   * Loads the model and weight files, construct the in memory weight map and\n   * compile the inference graph.\n   */\n  load(): UrlIOHandler<ModelURL> extends io.IOHandlerSync? boolean:\n                                             Promise<boolean> {\n    type IOHandler = UrlIOHandler<ModelURL>;\n    this.findIOHandler();\n    if (this.handler.load == null) {\n      throw new Error(\n          'Cannot proceed with model loading because the IOHandler provided ' +\n          'does not have the `load` method implemented.');\n    }\n\n    type Result =\n        IOHandler extends io.IOHandlerSync ? boolean : Promise<boolean>;\n\n    const loadResult = this.handler.load() as ReturnType<IOHandler['load']>;\n    if (util.isPromise(loadResult)) {\n      return loadResult.then(artifacts => this.loadSync(artifacts)) as Result;\n    }\n\n    return this.loadSync(loadResult) as Result;\n  }\n\n  /**\n   * Synchronously construct the in memory weight map and\n   * compile the inference graph.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  loadSync(artifacts: io.ModelArtifacts) {\n    this.artifacts = artifacts;\n    const graph = this.artifacts.modelTopology as tensorflow.IGraphDef;\n\n    let signature = this.artifacts.signature;\n    if (this.artifacts.userDefinedMetadata != null) {\n      const metadata = this.artifacts.userDefinedMetadata;\n      if (metadata.signature != null) {\n        signature = metadata.signature;\n      }\n\n      if (metadata.structuredOutputKeys != null) {\n        this.structuredOutputKeys = metadata.structuredOutputKeys as string[];\n      }\n    }\n    this.signature = signature;\n\n    this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;\n    const weightMap = this.io.decodeWeights(\n        this.artifacts.weightData, this.artifacts.weightSpecs);\n    this.executor = new GraphExecutor(\n        OperationMapper.Instance.transformGraph(graph, this.signature));\n    this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);\n    // Attach a model-level resourceManager to each executor to share resources,\n    // such as `HashTable`.\n    this.executor.resourceManager = this.resourceManager;\n\n    if (artifacts.modelInitializer != null &&\n        (artifacts.modelInitializer as tensorflow.IGraphDef).node != null) {\n      const initializer =\n          OperationMapper.Instance.transformGraph(artifacts.modelInitializer);\n      this.initializer = new GraphExecutor(initializer);\n      this.initializer.weightMap = this.executor.weightMap;\n      // Attach a model-level resourceManager to the initializer, the\n      // hashTables created from when executing the initializer will be stored\n      // in the resourceManager.\n      this.initializer.resourceManager = this.resourceManager;\n      this.initializerSignature = artifacts.initializerSignature;\n    }\n\n    return true;\n  }\n\n  /**\n   * Save the configuration and/or weights of the GraphModel.\n   *\n   * An `IOHandler` is an object that has a `save` method of the proper\n   * signature defined. The `save` method manages the storing or\n   * transmission of serialized data (\"artifacts\") that represent the\n   * model's topology and weights onto or via a specific medium, such as\n   * file downloads, local storage, IndexedDB in the web browser and HTTP\n   * requests to a server. TensorFlow.js provides `IOHandler`\n   * implementations for a number of frequently used saving mediums, such as\n   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n   * for more details.\n   *\n   * This method also allows you to refer to certain types of `IOHandler`s\n   * as URL-like string shortcuts, such as 'localstorage://' and\n   * 'indexeddb://'.\n   *\n   * Example 1: Save `model`'s topology and weights to browser [local\n   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n   * then load it back.\n   *\n   * ```js\n   * const modelUrl =\n   *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n   * const model = await tf.loadGraphModel(modelUrl);\n   * const zeros = tf.zeros([1, 224, 224, 3]);\n   * model.predict(zeros).print();\n   *\n   * const saveResults = await model.save('localstorage://my-model-1');\n   *\n   * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');\n   * console.log('Prediction from loaded model:');\n   * model.predict(zeros).print();\n   * ```\n   *\n   * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n   * scheme-based string shortcut for `IOHandler`.\n   * @param config Options for saving the model.\n   * @returns A `Promise` of `SaveResult`, which summarizes the result of\n   * the saving, such as byte sizes of the saved artifacts for the model's\n   *   topology and weight values.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  async save(handlerOrURL: io.IOHandler|string, config?: io.SaveConfig):\n      Promise<io.SaveResult> {\n    if (typeof handlerOrURL === 'string') {\n      const handlers = this.io.getSaveHandlers(handlerOrURL);\n      if (handlers.length === 0) {\n        throw new Error(\n            `Cannot find any save handlers for URL '${handlerOrURL}'`);\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) save handlers for ` +\n            `URL '${handlerOrURL}'`);\n      }\n      handlerOrURL = handlers[0];\n    }\n    if (handlerOrURL.save == null) {\n      throw new Error(\n          'GraphModel.save() cannot proceed because the IOHandler ' +\n          'provided does not have the `save` attribute defined.');\n    }\n\n    return handlerOrURL.save(this.artifacts);\n  }\n\n  private addStructuredOutputNames(outputTensors: Tensor|Tensor[]) {\n    if (this.structuredOutputKeys) {\n      const outputTensorsArray =\n          outputTensors instanceof Tensor ? [outputTensors] : outputTensors;\n      const outputTensorMap: NamedTensorMap = {};\n\n      outputTensorsArray.forEach(\n          (outputTensor, i) => outputTensorMap[this.structuredOutputKeys[i]] =\n              outputTensor);\n\n      return outputTensorMap;\n    }\n    return outputTensors;\n  }\n\n  /**\n   * Execute the inference for the input tensors.\n   *\n   * @param input The input tensors, when there is single input for the model,\n   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\n   * inputs params should be in either `tf.Tensor`[] if the input order is\n   * fixed, or otherwise NamedTensorMap format.\n   *\n   * For model with multiple inputs, we recommend you use NamedTensorMap as the\n   * input type, if you use `tf.Tensor`[], the order of the array needs to\n   * follow the\n   * order of inputNodes array. @see {@link GraphModel.inputNodes}\n   *\n   * You can also feed any intermediate nodes using the NamedTensorMap as the\n   * input type. For example, given the graph\n   *    InputNode => Intermediate => OutputNode,\n   * you can execute the subgraph Intermediate => OutputNode by calling\n   *    model.execute('IntermediateNode' : tf.tensor(...));\n   *\n   * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n   * state needs to be fed manually.\n   *\n   * For batch inference execution, the tensors for each input need to be\n   * concatenated together. For example with mobilenet, the required input shape\n   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n   * If we are provide a batched data of 100 images, the input tensor should be\n   * in the shape of [100, 244, 244, 3].\n   *\n   * @param config Prediction configuration for specifying the batch size.\n   * Currently the batch size option is ignored for graph model.\n   *\n   * @returns Inference result tensors. If the model is converted and it\n   * originally had structured_outputs in tensorflow, then a NamedTensorMap\n   * will be returned matching the structured_outputs. If no structured_outputs\n   * are present, the output will be single `tf.Tensor` if the model has single\n   * output node, otherwise Tensor[].\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  predict(inputs: Tensor|Tensor[]|NamedTensorMap, config?: ModelPredictConfig):\n      Tensor|Tensor[]|NamedTensorMap {\n    const outputTensors = this.execute(inputs, this.outputNodes);\n    return this.addStructuredOutputNames(outputTensors);\n  }\n\n  /**\n   * Execute the inference for the input tensors in async fashion, use this\n   * method when your model contains control flow ops.\n   *\n   * @param input The input tensors, when there is single input for the model,\n   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\n   * inputs params should be in either `tf.Tensor`[] if the input order is\n   * fixed, or otherwise NamedTensorMap format.\n   *\n   * For model with multiple inputs, we recommend you use NamedTensorMap as the\n   * input type, if you use `tf.Tensor`[], the order of the array needs to\n   * follow the\n   * order of inputNodes array. @see {@link GraphModel.inputNodes}\n   *\n   * You can also feed any intermediate nodes using the NamedTensorMap as the\n   * input type. For example, given the graph\n   *    InputNode => Intermediate => OutputNode,\n   * you can execute the subgraph Intermediate => OutputNode by calling\n   *    model.execute('IntermediateNode' : tf.tensor(...));\n   *\n   * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n   * state needs to be fed manually.\n   *\n   * For batch inference execution, the tensors for each input need to be\n   * concatenated together. For example with mobilenet, the required input shape\n   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n   * If we are provide a batched data of 100 images, the input tensor should be\n   * in the shape of [100, 244, 244, 3].\n   *\n   * @param config Prediction configuration for specifying the batch size.\n   * Currently the batch size option is ignored for graph model.\n   *\n   * @returns A Promise of inference result tensors. If the model is converted\n   * and it originally had structured_outputs in tensorflow, then a\n   * NamedTensorMap will be returned matching the structured_outputs. If no\n   * structured_outputs are present, the output will be single `tf.Tensor` if\n   * the model has single output node, otherwise Tensor[].\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async predictAsync(\n      inputs: Tensor|Tensor[]|NamedTensorMap,\n      config?: ModelPredictConfig): Promise<Tensor|Tensor[]|NamedTensorMap> {\n    const outputTensors = await this.executeAsync(inputs, this.outputNodes);\n    return this.addStructuredOutputNames(outputTensors);\n  }\n\n  private normalizeInputs(inputs: Tensor|Tensor[]|\n                          NamedTensorMap): NamedTensorMap {\n    if (!(inputs instanceof Tensor) && !Array.isArray(inputs)) {\n      // The input is already a NamedTensorMap.\n      const signatureInputs = this.signature?.inputs;\n      if (signatureInputs != null) {\n        for (const input in signatureInputs) {\n          const tensor = signatureInputs[input];\n          if (tensor.resourceId != null) {\n            inputs[input] = this.resourceIdToCapturedInput[tensor.resourceId];\n          }\n        }\n      }\n      return inputs;\n    }\n    inputs = Array.isArray(inputs) ? inputs : [inputs];\n\n    const numCapturedInputs =\n        Object.keys(this.resourceIdToCapturedInput).length;\n    if (inputs.length + numCapturedInputs !== this.inputNodes.length) {\n      throw new Error(`Input tensor count mismatch, the graph model has ${\n          this.inputNodes.length -\n          numCapturedInputs} non-resource placeholders, while there are ${\n          inputs.length} input tensors provided.`);\n    }\n\n    let inputIndex = 0;\n    return this.inputNodes.reduce((map, inputName) => {\n      const resourceId = this.signature?.inputs?.[inputName]?.resourceId;\n      if (resourceId != null) {\n        map[inputName] = this.resourceIdToCapturedInput[resourceId];\n      } else {\n        map[inputName] = (inputs as Tensor[])[inputIndex++];\n      }\n      return map;\n    }, {} as NamedTensorMap);\n  }\n\n  private normalizeOutputs(outputs: string|string[]): string[] {\n    outputs = outputs || this.outputNodes;\n    return !Array.isArray(outputs) ? [outputs] : outputs;\n  }\n\n  private executeInitializerGraph() {\n    if (this.initializer == null) {\n      return [];\n    }\n    if (this.initializerSignature == null) {\n      return this.initializer.execute({}, []);\n    } else {\n      return this.initializer.execute(\n          {}, Object.keys(this.initializerSignature.outputs));\n    }\n  }\n\n  private async executeInitializerGraphAsync() {\n    if (this.initializer == null) {\n      return [];\n    }\n    if (this.initializerSignature == null) {\n      return this.initializer.executeAsync({}, []);\n    } else {\n      return this.initializer.executeAsync(\n          {}, Object.keys(this.initializerSignature.outputs));\n    }\n  }\n\n  private setResourceIdToCapturedInput(outputs: Tensor[]) {\n    this.resourceIdToCapturedInput = {};\n\n    if (this.initializerSignature) {\n      const signatureOutputs = this.initializerSignature.outputs;\n      const outputNames = Object.keys(signatureOutputs);\n      for (let i = 0; i < outputNames.length; i++) {\n        const outputName = outputNames[i];\n        const tensorInfo = signatureOutputs[outputName];\n        this.resourceIdToCapturedInput[tensorInfo.resourceId] = outputs[i];\n      }\n    }\n  }\n\n  /**\n   * Executes inference for the model for given input tensors.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the TensorFlow model, if no\n   * outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   *\n   * @returns A single tensor if provided with a single output or no outputs\n   * are provided and there is only one default output, otherwise return a\n   * tensor array. The order of the tensor array is the same as the outputs\n   * if provided, otherwise the order of outputNodes attribute of the model.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  execute(inputs: Tensor|Tensor[]|NamedTensorMap, outputs?: string|string[]):\n      Tensor|Tensor[] {\n    if (this.resourceIdToCapturedInput == null) {\n      this.setResourceIdToCapturedInput(this.executeInitializerGraph());\n    }\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = this.executor.execute(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n\n  /**\n   * Executes inference for the model for given input tensors in async\n   * fashion, use this method when your model contains control flow ops.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the TensorFlow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   *\n   * @returns A Promise of single tensor if provided with a single output or\n   * no outputs are provided and there is only one default output, otherwise\n   * return a tensor map.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async executeAsync(\n      inputs: Tensor|Tensor[]|NamedTensorMap,\n      outputs?: string|string[]): Promise<Tensor|Tensor[]> {\n    if (this.resourceIdToCapturedInput == null) {\n      this.setResourceIdToCapturedInput(\n          await this.executeInitializerGraphAsync());\n    }\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = await this.executor.executeAsync(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n\n  /**\n   * Get intermediate tensors for model debugging mode (flag\n   * KEEP_INTERMEDIATE_TENSORS is true).\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  getIntermediateTensors(): NamedTensorsMap {\n    return this.executor.getIntermediateTensors();\n  }\n\n  /**\n   * Dispose intermediate tensors for model debugging mode (flag\n   * KEEP_INTERMEDIATE_TENSORS is true).\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  disposeIntermediateTensors() {\n    this.executor.disposeIntermediateTensors();\n  }\n\n  private convertTensorMapToTensorsMap(map: NamedTensorMap): NamedTensorsMap {\n    return Object.keys(map).reduce((newMap: NamedTensorsMap, key) => {\n      newMap[key] = [map[key]];\n      return newMap;\n    }, {});\n  }\n\n  /**\n   * Releases the memory used by the weight tensors and resourceManager.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  dispose() {\n    this.executor.dispose();\n\n    if (this.initializer) {\n      this.initializer.dispose();\n      if (this.resourceIdToCapturedInput) {\n        dispose(this.resourceIdToCapturedInput);\n      }\n    }\n\n    this.resourceManager.dispose();\n  }\n}\n\n/**\n * Load a graph model given a URL to the model definition.\n *\n * Example of loading MobileNetV2 from a URL and making a prediction with a\n * zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n * const model = await tf.loadGraphModel(modelUrl);\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n *\n * Example of loading MobileNetV2 from a TF Hub URL and making a prediction\n * with a zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';\n * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n * @param modelUrl The url or an `io.IOHandler` that loads the model.\n * @param options Options for the HTTP request, which allows to send\n *     credentials\n *    and custom headers.\n *\n * @doc {heading: 'Models', subheading: 'Loading'}\n */\nexport async function loadGraphModel(\n    modelUrl: string|io.IOHandler, options: io.LoadOptions = {},\n    tfio = io): Promise<GraphModel> {\n  if (modelUrl == null) {\n    throw new Error(\n        'modelUrl in loadGraphModel() cannot be null. Please provide a url ' +\n        'or an IOHandler that loads the model');\n  }\n  if (options == null) {\n    options = {};\n  }\n\n  if (options.fromTFHub && typeof modelUrl === 'string') {\n    modelUrl = getTFHubUrl(modelUrl);\n  }\n  const model = new GraphModel(modelUrl, options, tfio);\n  await model.load();\n  return model;\n}\n\n/**\n * Load a graph model given a synchronous IO handler with a 'load' method.\n *\n * @param modelSource The `io.IOHandlerSync` that loads the model, or the\n *     `io.ModelArtifacts` that encode the model, or a tuple of\n *     `[io.ModelJSON, ArrayBuffer]` of which the first element encodes the\n *      model and the second contains the weights.\n *\n * @doc {heading: 'Models', subheading: 'Loading'}\n */\nexport function loadGraphModelSync(\n    modelSource: io.IOHandlerSync|\n    io.ModelArtifacts|[io.ModelJSON, /* Weights */ ArrayBuffer]):\n    GraphModel<io.IOHandlerSync> {\n  if (modelSource == null) {\n    throw new Error(\n        'modelUrl in loadGraphModelSync() cannot be null. Please provide ' +\n        'model artifacts or an IOHandler that loads the model');\n  }\n\n  let ioHandler: io.IOHandlerSync;\n  if (modelSource instanceof Array) {\n    const [modelJSON, weights] = modelSource;\n    if (!modelJSON) {\n      throw new Error('modelJSON must be the first element of the array');\n    }\n    if (!weights || !(weights instanceof ArrayBuffer)) {\n      throw new Error(\n          'An ArrayBuffer of weights must be the second element of' +\n          ' the array');\n    }\n    if (!('modelTopology' in modelJSON)) {\n      throw new Error('Model JSON is missing \\'modelTopology\\'');\n    }\n    if (!('weightsManifest' in modelJSON)) {\n      throw new Error('Model JSON is missing \\'weightsManifest\\'');\n    }\n\n    const weightSpecs = io.getWeightSpecs(modelJSON.weightsManifest);\n    const modelArtifacts =\n        io.getModelArtifactsForJSONSync(modelJSON, weightSpecs, weights);\n    ioHandler = io.fromMemorySync(modelArtifacts);\n  } else if ('load' in modelSource) {\n    // Then modelSource is already an IOHandlerSync.\n    ioHandler = modelSource;\n  } else if (\n      'modelTopology' in modelSource && 'weightSpecs' in modelSource &&\n      'weightData' in modelSource) {\n    // modelSource is of type ModelArtifacts.\n    ioHandler = io.fromMemorySync(modelSource);\n  } else {\n    throw new Error('Unknown model format');\n  }\n\n  const model = new GraphModel(ioHandler);\n  model.load();\n  return model;\n}\n\nfunction getTFHubUrl(modelUrl: string): string {\n  if (!modelUrl.endsWith('/')) {\n    modelUrl = (modelUrl) + '/';\n  }\n  return `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;\n}\n"],
  "mappings": "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",
  "names": ["DataType", "SaverDef", "CheckpointFormatVersion", "tensor", "contextId", "pad", "tensor", "json", "json", "json", "json", "json", "json", "json", "json", "json", "json", "json", "json", "json", "json", "json", "json", "json", "json", "op", "functions", "executeOp", "tensor", "tensor", "t", "indices", "tensor", "t", "split", "tensors", "executeOp", "tensor", "condResult", "split", "pad", "executeOp", "executeOp", "step", "mean", "executeOp", "executeOp", "executeOp", "data", "t", "executeOp", "executeOp", "image", "executeOp", "executeOp", "executeOp", "executeOp", "executeOp", "reverse", "x", "weights", "size", "executeOp", "tensor", "executeOp", "executeOp", "executeOp", "executeOp", "executeOp", "tidy", "node", "tensorMap", "context", "tensor", "clone", "executeOp", "t", "stack", "tensor", "_a", "t", "e", "o", "s", "n", "i", "r", "a", "l", "u", "h", "d", "c", "f", "p", "m"]
}
